
5 switches 2 motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b2  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000058b  00000000  00000000  000008ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000310  00000000  00000000  00000e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  0000116c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  000011f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setup>:
#define MOTOR1_PIN2_PB PB1
#define MOTOR2_PIN1_PB PB2
#define MOTOR2_PIN2_PB PB3

void setup() {
	DDRD &= ~((1 << STOP_PD) | (1 << GO_FORWARD_PD) | (1 << GO_BACK_PD) | (1 << TURN_LEFT_PD) | (1 << TURN_RIGHT_PD));
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 7e       	andi	r24, 0xE0	; 224
  70:	81 bb       	out	0x11, r24	; 17
	PORTD |= (1 << STOP_PD) | (1 << GO_FORWARD_PD) | (1 << GO_BACK_PD) | (1 << TURN_LEFT_PD) | (1 << TURN_RIGHT_PD);
  72:	82 b3       	in	r24, 0x12	; 18
  74:	8f 61       	ori	r24, 0x1F	; 31
  76:	82 bb       	out	0x12, r24	; 18
	DDRB |= (1 << MOTOR1_PIN1_PB) | (1 << MOTOR1_PIN2_PB) | (1 << MOTOR2_PIN1_PB) | (1 << MOTOR2_PIN2_PB);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	8f 60       	ori	r24, 0x0F	; 15
  7c:	87 bb       	out	0x17, r24	; 23
  7e:	08 95       	ret

00000080 <stopMotors>:
}

void stopMotors() {
	PORTB &= ~((1 << MOTOR1_PIN1_PB) | (1 << MOTOR1_PIN2_PB) | (1 << MOTOR2_PIN1_PB) | (1 << MOTOR2_PIN2_PB));
  80:	88 b3       	in	r24, 0x18	; 24
  82:	80 7f       	andi	r24, 0xF0	; 240
  84:	88 bb       	out	0x18, r24	; 24
  86:	08 95       	ret

00000088 <goForward>:
}

void goForward() {
	PORTB |= (1 << MOTOR1_PIN1_PB) | (1 << MOTOR2_PIN2_PB);
  88:	88 b3       	in	r24, 0x18	; 24
  8a:	89 60       	ori	r24, 0x09	; 9
  8c:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~((1 << MOTOR1_PIN2_PB) | (1 << MOTOR2_PIN1_PB));
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	89 7f       	andi	r24, 0xF9	; 249
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret

00000096 <goBack>:
}

void goBack() {
	PORTB |= (1 << MOTOR1_PIN2_PB) | (1 << MOTOR2_PIN1_PB);
  96:	88 b3       	in	r24, 0x18	; 24
  98:	86 60       	ori	r24, 0x06	; 6
  9a:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~((1 << MOTOR1_PIN1_PB) | (1 << MOTOR2_PIN2_PB));
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	86 7f       	andi	r24, 0xF6	; 246
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	08 95       	ret

000000a4 <turnLeft>:
}

void turnLeft() {
	PORTB |= (1 << MOTOR1_PIN2_PB) | (1 << MOTOR2_PIN2_PB);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	8a 60       	ori	r24, 0x0A	; 10
  a8:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~((1 << MOTOR1_PIN1_PB) | (1 << MOTOR2_PIN1_PB));
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	8a 7f       	andi	r24, 0xFA	; 250
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret

000000b2 <turnRight>:
}

void turnRight() {
	PORTB |= (1 << MOTOR1_PIN1_PB) | (1 << MOTOR2_PIN1_PB);
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	85 60       	ori	r24, 0x05	; 5
  b6:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~((1 << MOTOR1_PIN2_PB) | (1 << MOTOR2_PIN2_PB));	
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	85 7f       	andi	r24, 0xF5	; 245
  bc:	88 bb       	out	0x18, r24	; 24
  be:	08 95       	ret

000000c0 <main>:
}

int main(void) {
	setup();
  c0:	0e 94 36 00 	call	0x6c	; 0x6c <setup>

	while (1) {
		if (!(PIND & (1 << STOP_PD))) {
  c4:	80 99       	sbic	0x10, 0	; 16
  c6:	03 c0       	rjmp	.+6      	; 0xce <main+0xe>
			stopMotors();
  c8:	0e 94 40 00 	call	0x80	; 0x80 <stopMotors>
  cc:	16 c0       	rjmp	.+44     	; 0xfa <main+0x3a>
			} else if (!(PIND & (1 << GO_FORWARD_PD))) {
  ce:	81 99       	sbic	0x10, 1	; 16
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <main+0x18>
			goForward();
  d2:	0e 94 44 00 	call	0x88	; 0x88 <goForward>
  d6:	11 c0       	rjmp	.+34     	; 0xfa <main+0x3a>
			} else if (!(PIND & (1 << GO_BACK_PD))) {
  d8:	82 99       	sbic	0x10, 2	; 16
  da:	03 c0       	rjmp	.+6      	; 0xe2 <main+0x22>
			goBack();
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <goBack>
  e0:	0c c0       	rjmp	.+24     	; 0xfa <main+0x3a>
			} else if (!(PIND & (1 << TURN_LEFT_PD))) {
  e2:	83 99       	sbic	0x10, 3	; 16
  e4:	03 c0       	rjmp	.+6      	; 0xec <main+0x2c>
			turnLeft();
  e6:	0e 94 52 00 	call	0xa4	; 0xa4 <turnLeft>
  ea:	07 c0       	rjmp	.+14     	; 0xfa <main+0x3a>
			} else if (!(PIND & (1 << TURN_RIGHT_PD))) {
  ec:	84 99       	sbic	0x10, 4	; 16
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <main+0x36>
			turnRight();
  f0:	0e 94 59 00 	call	0xb2	; 0xb2 <turnRight>
  f4:	02 c0       	rjmp	.+4      	; 0xfa <main+0x3a>
			} else {
			stopMotors();
  f6:	0e 94 40 00 	call	0x80	; 0x80 <stopMotors>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	87 ea       	ldi	r24, 0xA7	; 167
  fc:	91 e6       	ldi	r25, 0x61	; 97
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x3e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x44>
 104:	00 00       	nop
 106:	de cf       	rjmp	.-68     	; 0xc4 <main+0x4>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
