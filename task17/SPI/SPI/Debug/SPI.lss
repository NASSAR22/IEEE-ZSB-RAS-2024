
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000358  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000358  000003cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009d3  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067d  00000000  00000000  00000e63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cd  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000019b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000371  00000000  00000000  00001a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003e3  00000000  00000000  00001da5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002188  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 42 01 	call	0x284	; 0x284 <main>
  7a:	0c 94 aa 01 	jmp	0x354	; 0x354 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <masterInit>:
#define F_CPU 4000000UL
#include <util/delay.h>

void masterInit(void){
 /*Set MOSI, SCK and SS Output*/
 DDRB=(1<<7)|(1<<5)|(1<<4);
  82:	80 eb       	ldi	r24, 0xB0	; 176
  84:	87 bb       	out	0x17, r24	; 23
 /*Enable SPI Master set clock rate fck/128 data is 
 sample at falling edge*/
 SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR1)|(1<<SPR0)|(1<<CPHA);
  86:	87 e5       	ldi	r24, 0x57	; 87
  88:	8d b9       	out	0x0d, r24	; 13
  8a:	08 95       	ret

0000008c <masterTransmit>:
}

void masterTransmit(char spiData){
 //PORTB&=~(1<<5);
 /*Start the transmission*/
 SPDR=spiData;
  8c:	8f b9       	out	0x0f, r24	; 15
 /*Wait for completion*/
 while(!(SPSR&(1<<SPIF)));
  8e:	77 9b       	sbis	0x0e, 7	; 14
  90:	fe cf       	rjmp	.-4      	; 0x8e <masterTransmit+0x2>
 //PORTB&=~(1<<5);
 
}
  92:	08 95       	ret

00000094 <masterReceive>:

char masterReceive(void){
 /*Wait for the SPI buffer's full*/
 while(!(SPSR&(1<<SPIF)));
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <masterReceive>
 /*return SPI Buffer*/
 return SPDR;
  98:	8f b1       	in	r24, 0x0f	; 15
}
  9a:	08 95       	ret

0000009c <tc72Init>:

void tc72Init(void){
 PORTB|=(1<<4);
  9c:	88 b3       	in	r24, 0x18	; 24
  9e:	80 61       	ori	r24, 0x10	; 16
  a0:	88 bb       	out	0x18, r24	; 24
 /*Select Control Register*/
 masterTransmit(0x80);
  a2:	80 e8       	ldi	r24, 0x80	; 128
  a4:	0e 94 46 00 	call	0x8c	; 0x8c <masterTransmit>
 /*Select Continuous temperature Conversion*/
 masterTransmit(0x04);
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	0e 94 46 00 	call	0x8c	; 0x8c <masterTransmit>
 PORTB&=~(1<<4);
  ae:	88 b3       	in	r24, 0x18	; 24
  b0:	8f 7e       	andi	r24, 0xEF	; 239
  b2:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f eb       	ldi	r18, 0xBF	; 191
  b6:	84 ed       	ldi	r24, 0xD4	; 212
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <tc72Init+0x1e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <tc72Init+0x28>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <displayTemperature>:
 _delay_ms(150);
}

void displayTemperature(char msb,char lsb){
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	60 97       	sbiw	r28, 0x10	; 16
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	28 2f       	mov	r18, r24
 char ssd[16]={0x3F,0x06,0x5B,0x4F,0x66,0x6D,0x7D,
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	e0 e6       	ldi	r30, 0x60	; 96
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	8a 95       	dec	r24
  ee:	e1 f7       	brne	.-8      	; 0xe8 <displayTemperature+0x20>
 0x07,0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71};
 char sign;
 lsb>>=6;
  f0:	62 95       	swap	r22
  f2:	66 95       	lsr	r22
  f4:	66 95       	lsr	r22
  f6:	63 70       	andi	r22, 0x03	; 3

 if(msb&0x80) {
  f8:	22 23       	and	r18, r18
  fa:	54 f4       	brge	.+20     	; 0x110 <displayTemperature+0x48>
  msb=(~msb)+1;
  fc:	21 95       	neg	r18
  sign=1;
  if(lsb!=0) lsb=75/lsb;
  fe:	66 23       	and	r22, r22
 100:	69 f0       	breq	.+26     	; 0x11c <displayTemperature+0x54>
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	8b e4       	ldi	r24, 0x4B	; 75
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 82 01 	call	0x304	; 0x304 <__divmodhi4>
 char sign;
 lsb>>=6;

 if(msb&0x80) {
  msb=(~msb)+1;
  sign=1;
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	07 c0       	rjmp	.+14     	; 0x11e <displayTemperature+0x56>
  if(lsb!=0) lsb=75/lsb;
 }
 else {
  sign=0;
  lsb*=25;
 110:	89 e1       	ldi	r24, 0x19	; 25
 112:	68 9f       	mul	r22, r24
 114:	60 2d       	mov	r22, r0
 116:	11 24       	eor	r1, r1
  msb=(~msb)+1;
  sign=1;
  if(lsb!=0) lsb=75/lsb;
 }
 else {
  sign=0;
 118:	80 e0       	ldi	r24, 0x00	; 0
 11a:	01 c0       	rjmp	.+2      	; 0x11e <displayTemperature+0x56>
 char sign;
 lsb>>=6;

 if(msb&0x80) {
  msb=(~msb)+1;
  sign=1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 else {
  sign=0;
  lsb*=25;
 }

 PORTD=0x00;
 11e:	12 ba       	out	0x12, r1	; 18
 if(sign==1) PORTC=0x40;
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	19 f4       	brne	.+6      	; 0x12a <displayTemperature+0x62>
 124:	80 e4       	ldi	r24, 0x40	; 64
 126:	85 bb       	out	0x15, r24	; 21
 128:	12 c0       	rjmp	.+36     	; 0x14e <displayTemperature+0x86>
 else if(msb>=100) PORTC=ssd[msb/100];
 12a:	24 36       	cpi	r18, 0x64	; 100
 12c:	78 f0       	brcs	.+30     	; 0x14c <displayTemperature+0x84>
 12e:	89 e2       	ldi	r24, 0x29	; 41
 130:	28 9f       	mul	r18, r24
 132:	81 2d       	mov	r24, r1
 134:	11 24       	eor	r1, r1
 136:	82 95       	swap	r24
 138:	8f 70       	andi	r24, 0x0F	; 15
 13a:	e1 e0       	ldi	r30, 0x01	; 1
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ec 0f       	add	r30, r28
 140:	fd 1f       	adc	r31, r29
 142:	e8 0f       	add	r30, r24
 144:	f1 1d       	adc	r31, r1
 146:	80 81       	ld	r24, Z
 148:	85 bb       	out	0x15, r24	; 21
 14a:	01 c0       	rjmp	.+2      	; 0x14e <displayTemperature+0x86>
 else PORTC=0x00;
 14c:	15 ba       	out	0x15, r1	; 21
 PORTD=(1<<0);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	82 bb       	out	0x12, r24	; 18
 152:	87 e8       	ldi	r24, 0x87	; 135
 154:	93 e1       	ldi	r25, 0x13	; 19
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <displayTemperature+0x8e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <displayTemperature+0x94>
 15c:	00 00       	nop
 _delay_ms(5);
 
 PORTD=0x00;
 15e:	12 ba       	out	0x12, r1	; 18
 if(msb>=10)
 160:	2a 30       	cpi	r18, 0x0A	; 10
 162:	d8 f0       	brcs	.+54     	; 0x19a <displayTemperature+0xd2>
  PORTC=ssd[(msb%100)/10];
 164:	89 e2       	ldi	r24, 0x29	; 41
 166:	28 9f       	mul	r18, r24
 168:	81 2d       	mov	r24, r1
 16a:	11 24       	eor	r1, r1
 16c:	82 95       	swap	r24
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	e2 2f       	mov	r30, r18
 172:	94 e6       	ldi	r25, 0x64	; 100
 174:	89 9f       	mul	r24, r25
 176:	e0 19       	sub	r30, r0
 178:	11 24       	eor	r1, r1
 17a:	9d ec       	ldi	r25, 0xCD	; 205
 17c:	e9 9f       	mul	r30, r25
 17e:	81 2d       	mov	r24, r1
 180:	11 24       	eor	r1, r1
 182:	86 95       	lsr	r24
 184:	86 95       	lsr	r24
 186:	86 95       	lsr	r24
 188:	e1 e0       	ldi	r30, 0x01	; 1
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	ec 0f       	add	r30, r28
 18e:	fd 1f       	adc	r31, r29
 190:	e8 0f       	add	r30, r24
 192:	f1 1d       	adc	r31, r1
 194:	80 81       	ld	r24, Z
 196:	85 bb       	out	0x15, r24	; 21
 198:	01 c0       	rjmp	.+2      	; 0x19c <displayTemperature+0xd4>
 else PORTC=0;
 19a:	15 ba       	out	0x15, r1	; 21
 PORTD=(1<<1);
 19c:	82 e0       	ldi	r24, 0x02	; 2
 19e:	82 bb       	out	0x12, r24	; 18
 1a0:	87 e8       	ldi	r24, 0x87	; 135
 1a2:	93 e1       	ldi	r25, 0x13	; 19
 1a4:	01 97       	sbiw	r24, 0x01	; 1
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <displayTemperature+0xdc>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <displayTemperature+0xe2>
 1aa:	00 00       	nop
 _delay_ms(5);

 PORTD=0x00;
 1ac:	12 ba       	out	0x12, r1	; 18
 PORTC=ssd[msb%10]|0x80;
 1ae:	8d ec       	ldi	r24, 0xCD	; 205
 1b0:	28 9f       	mul	r18, r24
 1b2:	91 2d       	mov	r25, r1
 1b4:	11 24       	eor	r1, r1
 1b6:	96 95       	lsr	r25
 1b8:	96 95       	lsr	r25
 1ba:	96 95       	lsr	r25
 1bc:	99 0f       	add	r25, r25
 1be:	39 2f       	mov	r19, r25
 1c0:	33 0f       	add	r19, r19
 1c2:	33 0f       	add	r19, r19
 1c4:	93 0f       	add	r25, r19
 1c6:	29 1b       	sub	r18, r25
 1c8:	e1 e0       	ldi	r30, 0x01	; 1
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	ec 0f       	add	r30, r28
 1ce:	fd 1f       	adc	r31, r29
 1d0:	e2 0f       	add	r30, r18
 1d2:	f1 1d       	adc	r31, r1
 1d4:	90 81       	ld	r25, Z
 1d6:	90 68       	ori	r25, 0x80	; 128
 1d8:	95 bb       	out	0x15, r25	; 21
 PORTD=(1<<2);
 1da:	94 e0       	ldi	r25, 0x04	; 4
 1dc:	92 bb       	out	0x12, r25	; 18
 1de:	e7 e8       	ldi	r30, 0x87	; 135
 1e0:	f3 e1       	ldi	r31, 0x13	; 19
 1e2:	31 97       	sbiw	r30, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <displayTemperature+0x11a>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <displayTemperature+0x120>
 1e8:	00 00       	nop
 _delay_ms(5);

 PORTD=0x00;
 1ea:	12 ba       	out	0x12, r1	; 18
 PORTC=ssd[lsb/10];
 1ec:	68 9f       	mul	r22, r24
 1ee:	81 2d       	mov	r24, r1
 1f0:	11 24       	eor	r1, r1
 1f2:	86 95       	lsr	r24
 1f4:	86 95       	lsr	r24
 1f6:	86 95       	lsr	r24
 1f8:	e1 e0       	ldi	r30, 0x01	; 1
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	ec 0f       	add	r30, r28
 1fe:	fd 1f       	adc	r31, r29
 200:	e8 0f       	add	r30, r24
 202:	f1 1d       	adc	r31, r1
 204:	90 81       	ld	r25, Z
 206:	95 bb       	out	0x15, r25	; 21
 PORTD=(1<<3);
 208:	98 e0       	ldi	r25, 0x08	; 8
 20a:	92 bb       	out	0x12, r25	; 18
 20c:	e7 e8       	ldi	r30, 0x87	; 135
 20e:	f3 e1       	ldi	r31, 0x13	; 19
 210:	31 97       	sbiw	r30, 0x01	; 1
 212:	f1 f7       	brne	.-4      	; 0x210 <displayTemperature+0x148>
 214:	00 c0       	rjmp	.+0      	; 0x216 <displayTemperature+0x14e>
 216:	00 00       	nop
 _delay_ms(5);

 PORTD=0x00;
 218:	12 ba       	out	0x12, r1	; 18
 PORTC=ssd[lsb%10];
 21a:	88 0f       	add	r24, r24
 21c:	98 2f       	mov	r25, r24
 21e:	99 0f       	add	r25, r25
 220:	99 0f       	add	r25, r25
 222:	89 0f       	add	r24, r25
 224:	68 1b       	sub	r22, r24
 226:	e1 e0       	ldi	r30, 0x01	; 1
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ec 0f       	add	r30, r28
 22c:	fd 1f       	adc	r31, r29
 22e:	e6 0f       	add	r30, r22
 230:	f1 1d       	adc	r31, r1
 232:	80 81       	ld	r24, Z
 234:	85 bb       	out	0x15, r24	; 21
 PORTD=(1<<4);
 236:	80 e1       	ldi	r24, 0x10	; 16
 238:	82 bb       	out	0x12, r24	; 18
 23a:	87 e8       	ldi	r24, 0x87	; 135
 23c:	93 e1       	ldi	r25, 0x13	; 19
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <displayTemperature+0x176>
 242:	00 c0       	rjmp	.+0      	; 0x244 <displayTemperature+0x17c>
 244:	00 00       	nop
 _delay_ms(5);

 PORTD=0x00;
 246:	12 ba       	out	0x12, r1	; 18
 PORTC=0x63;
 248:	83 e6       	ldi	r24, 0x63	; 99
 24a:	85 bb       	out	0x15, r24	; 21
 PORTD=(1<<5);
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	82 bb       	out	0x12, r24	; 18
 250:	e7 e8       	ldi	r30, 0x87	; 135
 252:	f3 e1       	ldi	r31, 0x13	; 19
 254:	31 97       	sbiw	r30, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <displayTemperature+0x18c>
 258:	00 c0       	rjmp	.+0      	; 0x25a <displayTemperature+0x192>
 25a:	00 00       	nop
 _delay_ms(5);

 PORTD=0x00;
 25c:	12 ba       	out	0x12, r1	; 18
 PORTC=ssd[12];
 25e:	8d 85       	ldd	r24, Y+13	; 0x0d
 260:	85 bb       	out	0x15, r24	; 21
 PORTD=(1<<6);
 262:	80 e4       	ldi	r24, 0x40	; 64
 264:	82 bb       	out	0x12, r24	; 18
 266:	87 e8       	ldi	r24, 0x87	; 135
 268:	93 e1       	ldi	r25, 0x13	; 19
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <displayTemperature+0x1a2>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <displayTemperature+0x1a8>
 270:	00 00       	nop
 _delay_ms(5);
}
 272:	60 96       	adiw	r28, 0x10	; 16
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <main>:


int main(void)
{
 char msb,lsb;
    DDRC=0xFF;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	84 bb       	out	0x14, r24	; 20
 DDRD=0xFF;
 288:	81 bb       	out	0x11, r24	; 17
 DDRA=0xFF;
 28a:	8a bb       	out	0x1a, r24	; 26
 masterInit();
 28c:	0e 94 41 00 	call	0x82	; 0x82 <masterInit>
 tc72Init();
 290:	0e 94 4e 00 	call	0x9c	; 0x9c <tc72Init>
 294:	2f eb       	ldi	r18, 0xBF	; 191
 296:	84 ed       	ldi	r24, 0xD4	; 212
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	21 50       	subi	r18, 0x01	; 1
 29c:	80 40       	sbci	r24, 0x00	; 0
 29e:	90 40       	sbci	r25, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x16>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x20>
 2a4:	00 00       	nop
 _delay_ms(150);
    while (1) 
    {
  
  PORTB|=(1<<4);
 2a6:	88 b3       	in	r24, 0x18	; 24
 2a8:	80 61       	ori	r24, 0x10	; 16
 2aa:	88 bb       	out	0x18, r24	; 24
  /*Read the MSB*/
  masterTransmit(0x02);
 2ac:	82 e0       	ldi	r24, 0x02	; 2
 2ae:	0e 94 46 00 	call	0x8c	; 0x8c <masterTransmit>
  /*Issue one more clock frame
  to force data out*/
  masterTransmit(0x00);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 46 00 	call	0x8c	; 0x8c <masterTransmit>
  PORTB&=~(1<<4);
 2b8:	88 b3       	in	r24, 0x18	; 24
 2ba:	8f 7e       	andi	r24, 0xEF	; 239
 2bc:	88 bb       	out	0x18, r24	; 24
 2be:	87 ee       	ldi	r24, 0xE7	; 231
 2c0:	93 e0       	ldi	r25, 0x03	; 3
 2c2:	01 97       	sbiw	r24, 0x01	; 1
 2c4:	f1 f7       	brne	.-4      	; 0x2c2 <main+0x3e>
 2c6:	00 c0       	rjmp	.+0      	; 0x2c8 <main+0x44>
 2c8:	00 00       	nop
  
  _delay_ms(1);
  msb=masterReceive();
 2ca:	0e 94 4a 00 	call	0x94	; 0x94 <masterReceive>
 2ce:	c8 2f       	mov	r28, r24
  
  PORTB|=(1<<4);
 2d0:	88 b3       	in	r24, 0x18	; 24
 2d2:	80 61       	ori	r24, 0x10	; 16
 2d4:	88 bb       	out	0x18, r24	; 24
  /*Read The LSB*/
  masterTransmit(0x01);
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 46 00 	call	0x8c	; 0x8c <masterTransmit>
  /*Issue one more clock frame
  to force data out*/
  masterTransmit(0x00);
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 46 00 	call	0x8c	; 0x8c <masterTransmit>
  PORTB&=~(1<<4);
 2e2:	88 b3       	in	r24, 0x18	; 24
 2e4:	8f 7e       	andi	r24, 0xEF	; 239
 2e6:	88 bb       	out	0x18, r24	; 24
 2e8:	87 ee       	ldi	r24, 0xE7	; 231
 2ea:	93 e0       	ldi	r25, 0x03	; 3
 2ec:	01 97       	sbiw	r24, 0x01	; 1
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x68>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x6e>
 2f2:	00 00       	nop
  
  _delay_ms(1);
  lsb=masterReceive();
 2f4:	0e 94 4a 00 	call	0x94	; 0x94 <masterReceive>
  PORTA=lsb;
 2f8:	8b bb       	out	0x1b, r24	; 27
  displayTemperature(msb,lsb);
 2fa:	68 2f       	mov	r22, r24
 2fc:	8c 2f       	mov	r24, r28
 2fe:	0e 94 64 00 	call	0xc8	; 0xc8 <displayTemperature>
 302:	d1 cf       	rjmp	.-94     	; 0x2a6 <main+0x22>

00000304 <__divmodhi4>:
 304:	97 fb       	bst	r25, 7
 306:	07 2e       	mov	r0, r23
 308:	16 f4       	brtc	.+4      	; 0x30e <__divmodhi4+0xa>
 30a:	00 94       	com	r0
 30c:	07 d0       	rcall	.+14     	; 0x31c <__divmodhi4_neg1>
 30e:	77 fd       	sbrc	r23, 7
 310:	09 d0       	rcall	.+18     	; 0x324 <__divmodhi4_neg2>
 312:	0e 94 96 01 	call	0x32c	; 0x32c <__udivmodhi4>
 316:	07 fc       	sbrc	r0, 7
 318:	05 d0       	rcall	.+10     	; 0x324 <__divmodhi4_neg2>
 31a:	3e f4       	brtc	.+14     	; 0x32a <__divmodhi4_exit>

0000031c <__divmodhi4_neg1>:
 31c:	90 95       	com	r25
 31e:	81 95       	neg	r24
 320:	9f 4f       	sbci	r25, 0xFF	; 255
 322:	08 95       	ret

00000324 <__divmodhi4_neg2>:
 324:	70 95       	com	r23
 326:	61 95       	neg	r22
 328:	7f 4f       	sbci	r23, 0xFF	; 255

0000032a <__divmodhi4_exit>:
 32a:	08 95       	ret

0000032c <__udivmodhi4>:
 32c:	aa 1b       	sub	r26, r26
 32e:	bb 1b       	sub	r27, r27
 330:	51 e1       	ldi	r21, 0x11	; 17
 332:	07 c0       	rjmp	.+14     	; 0x342 <__udivmodhi4_ep>

00000334 <__udivmodhi4_loop>:
 334:	aa 1f       	adc	r26, r26
 336:	bb 1f       	adc	r27, r27
 338:	a6 17       	cp	r26, r22
 33a:	b7 07       	cpc	r27, r23
 33c:	10 f0       	brcs	.+4      	; 0x342 <__udivmodhi4_ep>
 33e:	a6 1b       	sub	r26, r22
 340:	b7 0b       	sbc	r27, r23

00000342 <__udivmodhi4_ep>:
 342:	88 1f       	adc	r24, r24
 344:	99 1f       	adc	r25, r25
 346:	5a 95       	dec	r21
 348:	a9 f7       	brne	.-22     	; 0x334 <__udivmodhi4_loop>
 34a:	80 95       	com	r24
 34c:	90 95       	com	r25
 34e:	bc 01       	movw	r22, r24
 350:	cd 01       	movw	r24, r26
 352:	08 95       	ret

00000354 <_exit>:
 354:	f8 94       	cli

00000356 <__stop_program>:
 356:	ff cf       	rjmp	.-2      	; 0x356 <__stop_program>
