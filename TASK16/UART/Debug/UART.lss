
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005eb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000144  00800060  00005eb6  00005f4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008001a4  008001a4  0000608e  2**0
                  ALLOC
  3 .stab         00006534  00000000  00000000  00006090  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000276f  00000000  00000000  0000c5c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000ed33  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000eeb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000f084  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00011094  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  000121f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  000131f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  00013398  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  00013656  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00013f64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 eb 0e 	jmp	0x1dd6	; 0x1dd6 <__vector_1>
       8:	0c 94 1e 0f 	jmp	0x1e3c	; 0x1e3c <__vector_2>
       c:	0c 94 51 0f 	jmp	0x1ea2	; 0x1ea2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 df 08 	jmp	0x11be	; 0x11be <__vector_10>
      2c:	0c 94 93 08 	jmp	0x1126	; 0x1126 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 eb       	ldi	r30, 0xB6	; 182
      68:	fe e5       	ldi	r31, 0x5E	; 94
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3a       	cpi	r26, 0xA4	; 164
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 ea       	ldi	r26, 0xA4	; 164
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3b       	cpi	r26, 0xB5	; 181
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <main>
      8a:	0c 94 59 2f 	jmp	0x5eb2	; 0x5eb2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 22 2f 	jmp	0x5e44	; 0x5e44 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e8       	ldi	r26, 0x81	; 129
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2e 2f 	jmp	0x5e5c	; 0x5e5c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2e 2f 	jmp	0x5e5c	; 0x5e5c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 22 2f 	jmp	0x5e44	; 0x5e44 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e8       	ldi	r24, 0x81	; 129
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3e 2f 	jmp	0x5e7c	; 0x5e7c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2e 2f 	jmp	0x5e5c	; 0x5e5c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2e 2f 	jmp	0x5e5c	; 0x5e5c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2e 2f 	jmp	0x5e5c	; 0x5e5c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4a 2f 	jmp	0x5e94	; 0x5e94 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2b 2f 	jmp	0x5e56	; 0x5e56 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 47 2f 	jmp	0x5e8e	; 0x5e8e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 32 2f 	jmp	0x5e64	; 0x5e64 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 4e 2f 	jmp	0x5e9c	; 0x5e9c <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e7 57       	subi	r30, 0x77	; 119
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <WDT_voidEnable>:

#include "WDT_Config.h"
#include "WDT_Private.h"


void WDT_voidEnable(void){
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     ca8:	a1 e4       	ldi	r26, 0x41	; 65
     caa:	b0 e0       	ldi	r27, 0x00	; 0
     cac:	e1 e4       	ldi	r30, 0x41	; 65
     cae:	f0 e0       	ldi	r31, 0x00	; 0
     cb0:	80 81       	ld	r24, Z
     cb2:	88 60       	ori	r24, 0x08	; 8
     cb4:	8c 93       	st	X, r24
	
	/* Select Prescaler */
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP0_Pin);
     cb6:	a1 e4       	ldi	r26, 0x41	; 65
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e1 e4       	ldi	r30, 0x41	; 65
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	81 60       	ori	r24, 0x01	; 1
     cc2:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP1_Pin);
     cc4:	a1 e4       	ldi	r26, 0x41	; 65
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e1 e4       	ldi	r30, 0x41	; 65
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	82 60       	ori	r24, 0x02	; 2
     cd0:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_WDP2_Pin);
     cd2:	a1 e4       	ldi	r26, 0x41	; 65
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e1 e4       	ldi	r30, 0x41	; 65
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	84 60       	ori	r24, 0x04	; 4
     cde:	8c 93       	st	X, r24
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <WDT_voidDisable>:

void WDT_voidDisable(void){
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Enable_Pin);
     cee:	a1 e4       	ldi	r26, 0x41	; 65
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	e1 e4       	ldi	r30, 0x41	; 65
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	88 60       	ori	r24, 0x08	; 8
     cfa:	8c 93       	st	X, r24
	SET_BIT(WDT_u8_WDTCR_REG, WDT_Disable_Pin);
     cfc:	a1 e4       	ldi	r26, 0x41	; 65
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	e1 e4       	ldi	r30, 0x41	; 65
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	80 61       	ori	r24, 0x10	; 16
     d08:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     d0a:	e1 e4       	ldi	r30, 0x41	; 65
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	10 82       	st	Z, r1
}
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <UART_Init>:

#include "UART_Config.h"
#include "UART_Private.h"


void UART_Init(void){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	00 d0       	rcall	.+0      	; 0xd1c <UART_Init+0x6>
     d1c:	0f 92       	push	r0
     d1e:	cd b7       	in	r28, 0x3d	; 61
     d20:	de b7       	in	r29, 0x3e	; 62
	
	/* This Variable To Put 1 In Bit 7 & Select Asynch Mode  */
	u8 Local_u8UCSRCValue = 0x80;
     d22:	80 e8       	ldi	r24, 0x80	; 128
     d24:	8b 83       	std	Y+3, r24	; 0x03
	
	/* Variable To Select Boud Rate */
	u16 Local_u16BoudRate = 103;
     d26:	87 e6       	ldi	r24, 0x67	; 103
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	9a 83       	std	Y+2, r25	; 0x02
     d2c:	89 83       	std	Y+1, r24	; 0x01
	
	/* Select Normal Speed Mode */
	#if Speed_Mode == Normal_Speed
	CLR_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
     d2e:	ab e2       	ldi	r26, 0x2B	; 43
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	eb e2       	ldi	r30, 0x2B	; 43
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8d 7f       	andi	r24, 0xFD	; 253
     d3a:	8c 93       	st	X, r24
	#elif Speed_Mode == Double_Speed
	SET_BIT(UART_u8_UCSRA_REG, UART_U2X_PIN);
	#endif
	
	/* Disable MPCM */
	CLR_BIT(UART_u8_UCSRA_REG, UART_MPCM_PIN);
     d3c:	ab e2       	ldi	r26, 0x2B	; 43
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	eb e2       	ldi	r30, 0x2B	; 43
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	8e 7f       	andi	r24, 0xFE	; 254
     d48:	8c 93       	st	X, r24
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
	CLR_BIT(Local_u8UCSRCValue, UART_UCSZ0);
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	
	#elif BitData_Mode == Eight_Data
	CLR_BIT(UART_u8_UCSRB_REG, UART_UCSZ2_PIN);
     d4a:	aa e2       	ldi	r26, 0x2A	; 42
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	ea e2       	ldi	r30, 0x2A	; 42
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	8b 7f       	andi	r24, 0xFB	; 251
     d56:	8c 93       	st	X, r24
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ0);
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	82 60       	ori	r24, 0x02	; 2
     d5c:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	84 60       	ori	r24, 0x04	; 4
     d62:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UCSZ1);
	#endif
	
	/* Operation Mode (Asynch / Synch) */
	#if Operation_Mode == ASynch
	CLR_BIT(Local_u8UCSRCValue, UART_UMSEL);
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	8f 7b       	andi	r24, 0xBF	; 191
     d68:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UMSEL);
	#endif
	
	/* Select Parity Mode (None / Even / Odd) */
	#if Parity_Mode == None
	CLR_BIT(Local_u8UCSRCValue, UART_UPM0);
     d6a:	8b 81       	ldd	r24, Y+3	; 0x03
     d6c:	8f 7e       	andi	r24, 0xEF	; 239
     d6e:	8b 83       	std	Y+3, r24	; 0x03
	CLR_BIT(Local_u8UCSRCValue, UART_UPM1);
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	8f 7d       	andi	r24, 0xDF	; 223
     d74:	8b 83       	std	Y+3, r24	; 0x03
	SET_BIT(Local_u8UCSRCValue, UART_UPM1);
	#endif
	
	/*  Stop Bits Mode ( 1 / 2) */
	#if StopBits_Mode == One_Bit
	CLR_BIT(Local_u8UCSRCValue, UART_USBS);
     d76:	8b 81       	ldd	r24, Y+3	; 0x03
     d78:	87 7f       	andi	r24, 0xF7	; 247
     d7a:	8b 83       	std	Y+3, r24	; 0x03
	#elif StopBits_Mode == Two_Bits
	SET_BIT(Local_u8UCSRCValue, UART_USBS);
	#endif
	
	/* Update UCSRC Reg Value  */
	UART_u8_UCSRC_REG = Local_u8UCSRCValue;
     d7c:	e0 e4       	ldi	r30, 0x40	; 64
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	8b 81       	ldd	r24, Y+3	; 0x03
     d82:	80 83       	st	Z, r24
	
	/* Boud Rate => 9600 */
	UART_u8_UBRRL_REG = (u8)Local_u16BoudRate;
     d84:	e9 e2       	ldi	r30, 0x29	; 41
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	80 83       	st	Z, r24
	UART_u8_UBRRH_REG = (u8)(Local_u16BoudRate >> 8);
     d8c:	e0 e4       	ldi	r30, 0x40	; 64
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	89 2f       	mov	r24, r25
     d96:	99 27       	eor	r25, r25
     d98:	80 83       	st	Z, r24
	
	/* Enable Tx & Rx */
	SET_BIT(UART_u8_UCSRB_REG, UART_TXEN_PIN);
     d9a:	aa e2       	ldi	r26, 0x2A	; 42
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	ea e2       	ldi	r30, 0x2A	; 42
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	88 60       	ori	r24, 0x08	; 8
     da6:	8c 93       	st	X, r24
	SET_BIT(UART_u8_UCSRB_REG, UART_RXEN_PIN);
     da8:	aa e2       	ldi	r26, 0x2A	; 42
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	ea e2       	ldi	r30, 0x2A	; 42
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	80 61       	ori	r24, 0x10	; 16
     db4:	8c 93       	st	X, r24
	
}
     db6:	0f 90       	pop	r0
     db8:	0f 90       	pop	r0
     dba:	0f 90       	pop	r0
     dbc:	cf 91       	pop	r28
     dbe:	df 91       	pop	r29
     dc0:	08 95       	ret

00000dc2 <UART_Send1ByteData>:

void UART_Send1ByteData(u8 Copy_u8Sended1ByteData){
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE Pin Should be 1 (empty) to be able to write date in it */
	while(!GET_BIT(UART_u8_UCSRA_REG, UART_UDRE_PIN));
     dce:	eb e2       	ldi	r30, 0x2B	; 43
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	82 95       	swap	r24
     dd6:	86 95       	lsr	r24
     dd8:	87 70       	andi	r24, 0x07	; 7
     dda:	88 2f       	mov	r24, r24
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	81 70       	andi	r24, 0x01	; 1
     de0:	90 70       	andi	r25, 0x00	; 0
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	a1 f3       	breq	.-24     	; 0xdce <UART_Send1ByteData+0xc>
	
	/* Send 1 Byte Data */
	UART_u8_UDR_REG = Copy_u8Sended1ByteData;
     de6:	ec e2       	ldi	r30, 0x2C	; 44
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	80 83       	st	Z, r24
	
}
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <UART_SendString>:

void UART_SendString(u8 *Copy_u8SendedString){
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	00 d0       	rcall	.+0      	; 0xdfc <UART_SendString+0x6>
     dfc:	0f 92       	push	r0
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9b 83       	std	Y+3, r25	; 0x03
     e04:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <UART_SendString+0x30>
	while(Copy_u8SendedString[i] !=  '\0'){
		UART_Send1ByteData(Copy_u8SendedString[i]);
     e0a:	89 81       	ldd	r24, Y+1	; 0x01
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	9b 81       	ldd	r25, Y+3	; 0x03
     e14:	fc 01       	movw	r30, r24
     e16:	e2 0f       	add	r30, r18
     e18:	f3 1f       	adc	r31, r19
     e1a:	80 81       	ld	r24, Z
     e1c:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <UART_Send1ByteData>
		i++;
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	89 83       	std	Y+1, r24	; 0x01
	
}

void UART_SendString(u8 *Copy_u8SendedString){
	u8 i = 0;
	while(Copy_u8SendedString[i] !=  '\0'){
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	9b 81       	ldd	r25, Y+3	; 0x03
     e30:	fc 01       	movw	r30, r24
     e32:	e2 0f       	add	r30, r18
     e34:	f3 1f       	adc	r31, r19
     e36:	80 81       	ld	r24, Z
     e38:	88 23       	and	r24, r24
     e3a:	39 f7       	brne	.-50     	; 0xe0a <UART_SendString+0x14>
		UART_Send1ByteData(Copy_u8SendedString[i]);
		i++;
	}
}
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	0f 90       	pop	r0
     e42:	cf 91       	pop	r28
     e44:	df 91       	pop	r29
     e46:	08 95       	ret

00000e48 <UART_u8Recieve1ByteData>:

u8 UART_u8Recieve1ByteData(u8 *Copy_Pu8RecievedByteData){
     e48:	df 93       	push	r29
     e4a:	cf 93       	push	r28
     e4c:	00 d0       	rcall	.+0      	; 0xe4e <UART_u8Recieve1ByteData+0x6>
     e4e:	0f 92       	push	r0
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	9b 83       	std	Y+3, r25	; 0x03
     e56:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	89 83       	std	Y+1, r24	; 0x01
	
	if(Copy_Pu8RecievedByteData != NULL){
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	9b 81       	ldd	r25, Y+3	; 0x03
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	61 f0       	breq	.+24     	; 0xe7c <UART_u8Recieve1ByteData+0x34>
		while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
     e64:	eb e2       	ldi	r30, 0x2B	; 43
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	88 23       	and	r24, r24
     e6c:	dc f7       	brge	.-10     	; 0xe64 <UART_u8Recieve1ByteData+0x1c>
		*Copy_Pu8RecievedByteData = UART_u8_UDR_REG;
     e6e:	ec e2       	ldi	r30, 0x2C	; 44
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	ea 81       	ldd	r30, Y+2	; 0x02
     e76:	fb 81       	ldd	r31, Y+3	; 0x03
     e78:	80 83       	st	Z, r24
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <UART_u8Recieve1ByteData+0x36>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     e7c:	19 82       	std	Y+1, r1	; 0x01
	}
	
	return Local_u8ErrorState;
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	cf 91       	pop	r28
     e88:	df 91       	pop	r29
     e8a:	08 95       	ret

00000e8c <UART_u8RecieveString>:


u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
     e8c:	df 93       	push	r29
     e8e:	cf 93       	push	r28
     e90:	00 d0       	rcall	.+0      	; 0xe92 <UART_u8RecieveString+0x6>
     e92:	00 d0       	rcall	.+0      	; 0xe94 <UART_u8RecieveString+0x8>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9c 83       	std	Y+4, r25	; 0x04
     e9c:	8b 83       	std	Y+3, r24	; 0x03
     e9e:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     ea4:	19 82       	std	Y+1, r1	; 0x01
	
	if(Copy_Pu8RecievedString != NULL){
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	9c 81       	ldd	r25, Y+4	; 0x04
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	19 f1       	breq	.+70     	; 0xef4 <UART_u8RecieveString+0x68>
     eae:	14 c0       	rjmp	.+40     	; 0xed8 <UART_u8RecieveString+0x4c>
		while(i < Copy_u8StringSize){
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
     eb0:	eb e2       	ldi	r30, 0x2B	; 43
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	88 23       	and	r24, r24
     eb8:	dc f7       	brge	.-10     	; 0xeb0 <UART_u8RecieveString+0x24>
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	dc 01       	movw	r26, r24
     ec6:	a2 0f       	add	r26, r18
     ec8:	b3 1f       	adc	r27, r19
     eca:	ec e2       	ldi	r30, 0x2C	; 44
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	8c 93       	st	X, r24
			i++;
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	89 83       	std	Y+1, r24	; 0x01
u8 UART_u8RecieveString(u8 *Copy_Pu8RecievedString, u8 Copy_u8StringSize){
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 i = 0;
	
	if(Copy_Pu8RecievedString != NULL){
		while(i < Copy_u8StringSize){
     ed8:	99 81       	ldd	r25, Y+1	; 0x01
     eda:	8d 81       	ldd	r24, Y+5	; 0x05
     edc:	98 17       	cp	r25, r24
     ede:	40 f3       	brcs	.-48     	; 0xeb0 <UART_u8RecieveString+0x24>
			while(!GET_BIT(UART_u8_UCSRA_REG, UART_RXC_PIN));
			Copy_Pu8RecievedString[i] = UART_u8_UDR_REG;
			i++;
		}
		Copy_Pu8RecievedString[i] = '\0';
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	8b 81       	ldd	r24, Y+3	; 0x03
     ee8:	9c 81       	ldd	r25, Y+4	; 0x04
     eea:	fc 01       	movw	r30, r24
     eec:	e2 0f       	add	r30, r18
     eee:	f3 1f       	adc	r31, r19
     ef0:	10 82       	st	Z, r1
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <UART_u8RecieveString+0x6a>
	}
	
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     ef4:	1a 82       	std	Y+2, r1	; 0x02
	}
	
	return Local_u8ErrorState;
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
}
     ef8:	0f 90       	pop	r0
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	0f 90       	pop	r0
     f02:	cf 91       	pop	r28
     f04:	df 91       	pop	r29
     f06:	08 95       	ret

00000f08 <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
     f08:	df 93       	push	r29
     f0a:	cf 93       	push	r28
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
     f10:	a3 e5       	ldi	r26, 0x53	; 83
     f12:	b0 e0       	ldi	r27, 0x00	; 0
     f14:	e3 e5       	ldi	r30, 0x53	; 83
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	80 81       	ld	r24, Z
     f1a:	80 64       	ori	r24, 0x40	; 64
     f1c:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
     f1e:	a3 e5       	ldi	r26, 0x53	; 83
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e3 e5       	ldi	r30, 0x53	; 83
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	88 60       	ori	r24, 0x08	; 8
     f2a:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
     f2c:	a3 e5       	ldi	r26, 0x53	; 83
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	e3 e5       	ldi	r30, 0x53	; 83
     f32:	f0 e0       	ldi	r31, 0x00	; 0
     f34:	80 81       	ld	r24, Z
     f36:	80 62       	ori	r24, 0x20	; 32
     f38:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
     f3a:	a3 e5       	ldi	r26, 0x53	; 83
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e3 e5       	ldi	r30, 0x53	; 83
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	80 61       	ori	r24, 0x10	; 16
     f46:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
     f48:	a3 e5       	ldi	r26, 0x53	; 83
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	e3 e5       	ldi	r30, 0x53	; 83
     f4e:	f0 e0       	ldi	r31, 0x00	; 0
     f50:	80 81       	ld	r24, Z
     f52:	8e 7f       	andi	r24, 0xFE	; 254
     f54:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
     f56:	a3 e5       	ldi	r26, 0x53	; 83
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e3 e5       	ldi	r30, 0x53	; 83
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	82 60       	ori	r24, 0x02	; 2
     f62:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
     f64:	a3 e5       	ldi	r26, 0x53	; 83
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e3 e5       	ldi	r30, 0x53	; 83
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8b 7f       	andi	r24, 0xFB	; 251
     f70:	8c 93       	st	X, r24
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
     f80:	af e4       	ldi	r26, 0x4F	; 79
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	ef e4       	ldi	r30, 0x4F	; 79
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	82 60       	ori	r24, 0x02	; 2
     f8c:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
     f8e:	af e4       	ldi	r26, 0x4F	; 79
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	ef e4       	ldi	r30, 0x4F	; 79
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	8e 7f       	andi	r24, 0xFE	; 254
     f9a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
     f9c:	ae e4       	ldi	r26, 0x4E	; 78
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ee e4       	ldi	r30, 0x4E	; 78
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	80 81       	ld	r24, Z
     fa6:	88 60       	ori	r24, 0x08	; 8
     fa8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
     faa:	ae e4       	ldi	r26, 0x4E	; 78
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ee e4       	ldi	r30, 0x4E	; 78
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	80 61       	ori	r24, 0x10	; 16
     fb6:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
     fb8:	af e4       	ldi	r26, 0x4F	; 79
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ef e4       	ldi	r30, 0x4F	; 79
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	80 68       	ori	r24, 0x80	; 128
     fc4:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
     fc6:	af e4       	ldi	r26, 0x4F	; 79
     fc8:	b0 e0       	ldi	r27, 0x00	; 0
     fca:	ef e4       	ldi	r30, 0x4F	; 79
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	8f 7b       	andi	r24, 0xBF	; 191
     fd2:	8c 93       	st	X, r24

	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
     fd4:	ae e4       	ldi	r26, 0x4E	; 78
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	ee e4       	ldi	r30, 0x4E	; 78
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8e 7f       	andi	r24, 0xFE	; 254
     fe0:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
     fe2:	ae e4       	ldi	r26, 0x4E	; 78
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ee e4       	ldi	r30, 0x4E	; 78
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	82 60       	ori	r24, 0x02	; 2
     fee:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
     ff0:	ae e4       	ldi	r26, 0x4E	; 78
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ee e4       	ldi	r30, 0x4E	; 78
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8b 7f       	andi	r24, 0xFB	; 251
     ffc:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 39999;
     ffe:	e6 e4       	ldi	r30, 0x46	; 70
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	8f e3       	ldi	r24, 0x3F	; 63
    1004:	9c e9       	ldi	r25, 0x9C	; 156
    1006:	91 83       	std	Z+1, r25	; 0x01
    1008:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = 3499;
    100a:	ea e4       	ldi	r30, 0x4A	; 74
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	8b ea       	ldi	r24, 0xAB	; 171
    1010:	9d e0       	ldi	r25, 0x0D	; 13
    1012:	91 83       	std	Z+1, r25	; 0x01
    1014:	80 83       	st	Z, r24
}
    1016:	cf 91       	pop	r28
    1018:	df 91       	pop	r29
    101a:	08 95       	ret

0000101c <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
    101c:	df 93       	push	r29
    101e:	cf 93       	push	r28
    1020:	00 d0       	rcall	.+0      	; 0x1022 <TIMERS_u8TIMER0SetCallBack+0x6>
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
    1028:	9b 83       	std	Y+3, r25	; 0x03
    102a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	9b 81       	ldd	r25, Y+3	; 0x03
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	39 f0       	breq	.+14     	; 0x1046 <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
    1038:	8a 81       	ldd	r24, Y+2	; 0x02
    103a:	9b 81       	ldd	r25, Y+3	; 0x03
    103c:	90 93 a5 01 	sts	0x01A5, r25
    1040:	80 93 a4 01 	sts	0x01A4, r24
    1044:	01 c0       	rjmp	.+2      	; 0x1048 <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1046:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1048:	89 81       	ldd	r24, Y+1	; 0x01
}
    104a:	0f 90       	pop	r0
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	00 d0       	rcall	.+0      	; 0x105c <TIMERS_u8TIMER0CTCSetCallBack+0x6>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9b 83       	std	Y+3, r25	; 0x03
    1064:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
    106a:	8a 81       	ldd	r24, Y+2	; 0x02
    106c:	9b 81       	ldd	r25, Y+3	; 0x03
    106e:	00 97       	sbiw	r24, 0x00	; 0
    1070:	39 f0       	breq	.+14     	; 0x1080 <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	9b 81       	ldd	r25, Y+3	; 0x03
    1076:	90 93 a7 01 	sts	0x01A7, r25
    107a:	80 93 a6 01 	sts	0x01A6, r24
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    1080:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1082:	89 81       	ldd	r24, Y+1	; 0x01
}
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
    109c:	ec e5       	ldi	r30, 0x5C	; 92
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	80 83       	st	Z, r24
	
}
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <TIMERS_voidTIMER0SetPreload>:

void TIMERS_voidTIMER0SetPreload(u8 Copy_u8PreloadValue){
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	0f 92       	push	r0
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u8_TCNT0_REG = Copy_u8PreloadValue;
    10b8:	e2 e5       	ldi	r30, 0x52	; 82
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	80 83       	st	Z, r24
}
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	00 d0       	rcall	.+0      	; 0x10ce <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	9a 83       	std	Y+2, r25	; 0x02
    10d4:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
    10d6:	ea e4       	ldi	r30, 0x4A	; 74
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	89 81       	ldd	r24, Y+1	; 0x01
    10dc:	9a 81       	ldd	r25, Y+2	; 0x02
    10de:	91 83       	std	Z+1, r25	; 0x01
    10e0:	80 83       	st	Z, r24
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	cf 91       	pop	r28
    10e8:	df 91       	pop	r29
    10ea:	08 95       	ret

000010ec <TIMERS_voidTIMER1SetTimerValue>:

void TIMERS_voidTIMER1SetTimerValue(u16 Copy_u8OCR1Value){
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <TIMERS_voidTIMER1SetTimerValue+0x6>
    10f2:	cd b7       	in	r28, 0x3d	; 61
    10f4:	de b7       	in	r29, 0x3e	; 62
    10f6:	9a 83       	std	Y+2, r25	; 0x02
    10f8:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_TCNT1_REG = Copy_u8OCR1Value;
    10fa:	ec e4       	ldi	r30, 0x4C	; 76
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	9a 81       	ldd	r25, Y+2	; 0x02
    1102:	91 83       	std	Z+1, r25	; 0x01
    1104:	80 83       	st	Z, r24
}
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	cf 91       	pop	r28
    110c:	df 91       	pop	r29
    110e:	08 95       	ret

00001110 <TIMERS_u16TIMER1ReadTimerValue>:

u16 TIMERS_u16TIMER1ReadTimerValue(void){
    1110:	df 93       	push	r29
    1112:	cf 93       	push	r28
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
	return TIMERS_u16_TCNT1_REG;
    1118:	ec e4       	ldi	r30, 0x4C	; 76
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
}
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
    1126:	1f 92       	push	r1
    1128:	0f 92       	push	r0
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	0f 92       	push	r0
    112e:	11 24       	eor	r1, r1
    1130:	2f 93       	push	r18
    1132:	3f 93       	push	r19
    1134:	4f 93       	push	r20
    1136:	5f 93       	push	r21
    1138:	6f 93       	push	r22
    113a:	7f 93       	push	r23
    113c:	8f 93       	push	r24
    113e:	9f 93       	push	r25
    1140:	af 93       	push	r26
    1142:	bf 93       	push	r27
    1144:	ef 93       	push	r30
    1146:	ff 93       	push	r31
    1148:	df 93       	push	r29
    114a:	cf 93       	push	r28
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
    1150:	80 91 a8 01 	lds	r24, 0x01A8
    1154:	90 91 a9 01 	lds	r25, 0x01A9
    1158:	01 96       	adiw	r24, 0x01	; 1
    115a:	90 93 a9 01 	sts	0x01A9, r25
    115e:	80 93 a8 01 	sts	0x01A8, r24
	if(Local_u16CounterOVF == 3907){
    1162:	80 91 a8 01 	lds	r24, 0x01A8
    1166:	90 91 a9 01 	lds	r25, 0x01A9
    116a:	2f e0       	ldi	r18, 0x0F	; 15
    116c:	83 34       	cpi	r24, 0x43	; 67
    116e:	92 07       	cpc	r25, r18
    1170:	99 f4       	brne	.+38     	; 0x1198 <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
    1172:	e2 e5       	ldi	r30, 0x52	; 82
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 ec       	ldi	r24, 0xC0	; 192
    1178:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
    117a:	10 92 a9 01 	sts	0x01A9, r1
    117e:	10 92 a8 01 	sts	0x01A8, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
    1182:	80 91 a4 01 	lds	r24, 0x01A4
    1186:	90 91 a5 01 	lds	r25, 0x01A5
    118a:	00 97       	sbiw	r24, 0x00	; 0
    118c:	29 f0       	breq	.+10     	; 0x1198 <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
    118e:	e0 91 a4 01 	lds	r30, 0x01A4
    1192:	f0 91 a5 01 	lds	r31, 0x01A5
    1196:	09 95       	icall
		}
	}
}
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	ff 91       	pop	r31
    119e:	ef 91       	pop	r30
    11a0:	bf 91       	pop	r27
    11a2:	af 91       	pop	r26
    11a4:	9f 91       	pop	r25
    11a6:	8f 91       	pop	r24
    11a8:	7f 91       	pop	r23
    11aa:	6f 91       	pop	r22
    11ac:	5f 91       	pop	r21
    11ae:	4f 91       	pop	r20
    11b0:	3f 91       	pop	r19
    11b2:	2f 91       	pop	r18
    11b4:	0f 90       	pop	r0
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	0f 90       	pop	r0
    11ba:	1f 90       	pop	r1
    11bc:	18 95       	reti

000011be <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
    11be:	1f 92       	push	r1
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	0f 92       	push	r0
    11c6:	11 24       	eor	r1, r1
    11c8:	2f 93       	push	r18
    11ca:	3f 93       	push	r19
    11cc:	4f 93       	push	r20
    11ce:	5f 93       	push	r21
    11d0:	6f 93       	push	r22
    11d2:	7f 93       	push	r23
    11d4:	8f 93       	push	r24
    11d6:	9f 93       	push	r25
    11d8:	af 93       	push	r26
    11da:	bf 93       	push	r27
    11dc:	ef 93       	push	r30
    11de:	ff 93       	push	r31
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
    11e8:	80 91 aa 01 	lds	r24, 0x01AA
    11ec:	90 91 ab 01 	lds	r25, 0x01AB
    11f0:	01 96       	adiw	r24, 0x01	; 1
    11f2:	90 93 ab 01 	sts	0x01AB, r25
    11f6:	80 93 aa 01 	sts	0x01AA, r24
	if(Local_u16CounterCTC == 10000){
    11fa:	80 91 aa 01 	lds	r24, 0x01AA
    11fe:	90 91 ab 01 	lds	r25, 0x01AB
    1202:	27 e2       	ldi	r18, 0x27	; 39
    1204:	80 31       	cpi	r24, 0x10	; 16
    1206:	92 07       	cpc	r25, r18
    1208:	79 f4       	brne	.+30     	; 0x1228 <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
    120a:	10 92 ab 01 	sts	0x01AB, r1
    120e:	10 92 aa 01 	sts	0x01AA, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
    1212:	80 91 a6 01 	lds	r24, 0x01A6
    1216:	90 91 a7 01 	lds	r25, 0x01A7
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	29 f0       	breq	.+10     	; 0x1228 <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
    121e:	e0 91 a6 01 	lds	r30, 0x01A6
    1222:	f0 91 a7 01 	lds	r31, 0x01A7
    1226:	09 95       	icall
		}
	}
}
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	ff 91       	pop	r31
    122e:	ef 91       	pop	r30
    1230:	bf 91       	pop	r27
    1232:	af 91       	pop	r26
    1234:	9f 91       	pop	r25
    1236:	8f 91       	pop	r24
    1238:	7f 91       	pop	r23
    123a:	6f 91       	pop	r22
    123c:	5f 91       	pop	r21
    123e:	4f 91       	pop	r20
    1240:	3f 91       	pop	r19
    1242:	2f 91       	pop	r18
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <Switch_Init+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <Switch_Init+0x8>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	8b 83       	std	Y+3, r24	; 0x03
    1260:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
    1262:	1a 82       	std	Y+2, r1	; 0x02
    1264:	19 82       	std	Y+1, r1	; 0x01
    1266:	50 c0       	rjmp	.+160    	; 0x1308 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
    1268:	29 81       	ldd	r18, Y+1	; 0x01
    126a:	3a 81       	ldd	r19, Y+2	; 0x02
    126c:	c9 01       	movw	r24, r18
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	28 0f       	add	r18, r24
    1274:	39 1f       	adc	r19, r25
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	fc 01       	movw	r30, r24
    127c:	e2 0f       	add	r30, r18
    127e:	f3 1f       	adc	r31, r19
    1280:	40 81       	ld	r20, Z
    1282:	29 81       	ldd	r18, Y+1	; 0x01
    1284:	3a 81       	ldd	r19, Y+2	; 0x02
    1286:	c9 01       	movw	r24, r18
    1288:	88 0f       	add	r24, r24
    128a:	99 1f       	adc	r25, r25
    128c:	28 0f       	add	r18, r24
    128e:	39 1f       	adc	r19, r25
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	fc 01       	movw	r30, r24
    1296:	e2 0f       	add	r30, r18
    1298:	f3 1f       	adc	r31, r19
    129a:	91 81       	ldd	r25, Z+1	; 0x01
    129c:	84 2f       	mov	r24, r20
    129e:	69 2f       	mov	r22, r25
    12a0:	40 e0       	ldi	r20, 0x00	; 0
    12a2:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
    12a6:	29 81       	ldd	r18, Y+1	; 0x01
    12a8:	3a 81       	ldd	r19, Y+2	; 0x02
    12aa:	c9 01       	movw	r24, r18
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	28 0f       	add	r18, r24
    12b2:	39 1f       	adc	r19, r25
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	fc 01       	movw	r30, r24
    12ba:	e2 0f       	add	r30, r18
    12bc:	f3 1f       	adc	r31, r19
    12be:	50 81       	ld	r21, Z
    12c0:	29 81       	ldd	r18, Y+1	; 0x01
    12c2:	3a 81       	ldd	r19, Y+2	; 0x02
    12c4:	c9 01       	movw	r24, r18
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	28 0f       	add	r18, r24
    12cc:	39 1f       	adc	r19, r25
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	fc 01       	movw	r30, r24
    12d4:	e2 0f       	add	r30, r18
    12d6:	f3 1f       	adc	r31, r19
    12d8:	41 81       	ldd	r20, Z+1	; 0x01
    12da:	29 81       	ldd	r18, Y+1	; 0x01
    12dc:	3a 81       	ldd	r19, Y+2	; 0x02
    12de:	c9 01       	movw	r24, r18
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	28 0f       	add	r18, r24
    12e6:	39 1f       	adc	r19, r25
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	9c 81       	ldd	r25, Y+4	; 0x04
    12ec:	fc 01       	movw	r30, r24
    12ee:	e2 0f       	add	r30, r18
    12f0:	f3 1f       	adc	r31, r19
    12f2:	92 81       	ldd	r25, Z+2	; 0x02
    12f4:	85 2f       	mov	r24, r21
    12f6:	64 2f       	mov	r22, r20
    12f8:	49 2f       	mov	r20, r25
    12fa:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
    12fe:	89 81       	ldd	r24, Y+1	; 0x01
    1300:	9a 81       	ldd	r25, Y+2	; 0x02
    1302:	01 96       	adiw	r24, 0x01	; 1
    1304:	9a 83       	std	Y+2, r25	; 0x02
    1306:	89 83       	std	Y+1, r24	; 0x01
    1308:	8d 81       	ldd	r24, Y+5	; 0x05
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	89 81       	ldd	r24, Y+1	; 0x01
    1310:	9a 81       	ldd	r25, Y+2	; 0x02
    1312:	82 17       	cp	r24, r18
    1314:	93 07       	cpc	r25, r19
    1316:	0c f4       	brge	.+2      	; 0x131a <Switch_Init+0xcc>
    1318:	a7 cf       	rjmp	.-178    	; 0x1268 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <Switch_GetValue+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <Switch_GetValue+0x8>
    1332:	cd b7       	in	r28, 0x3d	; 61
    1334:	de b7       	in	r29, 0x3e	; 62
    1336:	9a 83       	std	Y+2, r25	; 0x02
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	7c 83       	std	Y+4, r23	; 0x04
    133c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
    133e:	e9 81       	ldd	r30, Y+1	; 0x01
    1340:	fa 81       	ldd	r31, Y+2	; 0x02
    1342:	80 81       	ld	r24, Z
    1344:	e9 81       	ldd	r30, Y+1	; 0x01
    1346:	fa 81       	ldd	r31, Y+2	; 0x02
    1348:	91 81       	ldd	r25, Z+1	; 0x01
    134a:	2b 81       	ldd	r18, Y+3	; 0x03
    134c:	3c 81       	ldd	r19, Y+4	; 0x04
    134e:	69 2f       	mov	r22, r25
    1350:	a9 01       	movw	r20, r18
    1352:	0e 94 00 12 	call	0x2400	; 0x2400 <DIO_u8GetPinValue>
}
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	cf 91       	pop	r28
    1360:	df 91       	pop	r29
    1362:	08 95       	ret

00001364 <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
    1364:	df 93       	push	r29
    1366:	cf 93       	push	r28
    1368:	00 d0       	rcall	.+0      	; 0x136a <LCD_setPinDirection+0x6>
    136a:	00 d0       	rcall	.+0      	; 0x136c <LCD_setPinDirection+0x8>
    136c:	0f 92       	push	r0
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	89 83       	std	Y+1, r24	; 0x01
    1374:	6a 83       	std	Y+2, r22	; 0x02
    1376:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	88 30       	cpi	r24, 0x08	; 8
    137c:	08 f0       	brcs	.+2      	; 0x1380 <LCD_setPinDirection+0x1c>
    137e:	d5 c0       	rjmp	.+426    	; 0x152a <LCD_setPinDirection+0x1c6>
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	84 30       	cpi	r24, 0x04	; 4
    1384:	08 f0       	brcs	.+2      	; 0x1388 <LCD_setPinDirection+0x24>
    1386:	d1 c0       	rjmp	.+418    	; 0x152a <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1388:	89 81       	ldd	r24, Y+1	; 0x01
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	3d 83       	std	Y+5, r19	; 0x05
    1390:	2c 83       	std	Y+4, r18	; 0x04
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	91 05       	cpc	r25, r1
    139a:	09 f4       	brne	.+2      	; 0x139e <LCD_setPinDirection+0x3a>
    139c:	43 c0       	rjmp	.+134    	; 0x1424 <LCD_setPinDirection+0xc0>
    139e:	2c 81       	ldd	r18, Y+4	; 0x04
    13a0:	3d 81       	ldd	r19, Y+5	; 0x05
    13a2:	22 30       	cpi	r18, 0x02	; 2
    13a4:	31 05       	cpc	r19, r1
    13a6:	2c f4       	brge	.+10     	; 0x13b2 <LCD_setPinDirection+0x4e>
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
    13aa:	9d 81       	ldd	r25, Y+5	; 0x05
    13ac:	00 97       	sbiw	r24, 0x00	; 0
    13ae:	71 f0       	breq	.+28     	; 0x13cc <LCD_setPinDirection+0x68>
    13b0:	bc c0       	rjmp	.+376    	; 0x152a <LCD_setPinDirection+0x1c6>
    13b2:	2c 81       	ldd	r18, Y+4	; 0x04
    13b4:	3d 81       	ldd	r19, Y+5	; 0x05
    13b6:	22 30       	cpi	r18, 0x02	; 2
    13b8:	31 05       	cpc	r19, r1
    13ba:	09 f4       	brne	.+2      	; 0x13be <LCD_setPinDirection+0x5a>
    13bc:	5f c0       	rjmp	.+190    	; 0x147c <LCD_setPinDirection+0x118>
    13be:	8c 81       	ldd	r24, Y+4	; 0x04
    13c0:	9d 81       	ldd	r25, Y+5	; 0x05
    13c2:	83 30       	cpi	r24, 0x03	; 3
    13c4:	91 05       	cpc	r25, r1
    13c6:	09 f4       	brne	.+2      	; 0x13ca <LCD_setPinDirection+0x66>
    13c8:	85 c0       	rjmp	.+266    	; 0x14d4 <LCD_setPinDirection+0x170>
    13ca:	af c0       	rjmp	.+350    	; 0x152a <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	a1 f4       	brne	.+40     	; 0x13fa <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    13d2:	aa e3       	ldi	r26, 0x3A	; 58
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ea e3       	ldi	r30, 0x3A	; 58
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <LCD_setPinDirection+0x8c>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <LCD_setPinDirection+0x88>
    13f4:	84 2b       	or	r24, r20
    13f6:	8c 93       	st	X, r24
    13f8:	98 c0       	rjmp	.+304    	; 0x152a <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
    13fa:	aa e3       	ldi	r26, 0x3A	; 58
    13fc:	b0 e0       	ldi	r27, 0x00	; 0
    13fe:	ea e3       	ldi	r30, 0x3A	; 58
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	48 2f       	mov	r20, r24
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	28 2f       	mov	r18, r24
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	02 2e       	mov	r0, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <LCD_setPinDirection+0xb4>
    1414:	88 0f       	add	r24, r24
    1416:	99 1f       	adc	r25, r25
    1418:	0a 94       	dec	r0
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <LCD_setPinDirection+0xb0>
    141c:	80 95       	com	r24
    141e:	84 23       	and	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	83 c0       	rjmp	.+262    	; 0x152a <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	a1 f4       	brne	.+40     	; 0x1452 <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    142a:	a7 e3       	ldi	r26, 0x37	; 55
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e7 e3       	ldi	r30, 0x37	; 55
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	48 2f       	mov	r20, r24
    1436:	8a 81       	ldd	r24, Y+2	; 0x02
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	81 e0       	ldi	r24, 0x01	; 1
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	02 2e       	mov	r0, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <LCD_setPinDirection+0xe4>
    1444:	88 0f       	add	r24, r24
    1446:	99 1f       	adc	r25, r25
    1448:	0a 94       	dec	r0
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <LCD_setPinDirection+0xe0>
    144c:	84 2b       	or	r24, r20
    144e:	8c 93       	st	X, r24
    1450:	6c c0       	rjmp	.+216    	; 0x152a <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    1452:	a7 e3       	ldi	r26, 0x37	; 55
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e7 e3       	ldi	r30, 0x37	; 55
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	8a 81       	ldd	r24, Y+2	; 0x02
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <LCD_setPinDirection+0x10c>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <LCD_setPinDirection+0x108>
    1474:	80 95       	com	r24
    1476:	84 23       	and	r24, r20
    1478:	8c 93       	st	X, r24
    147a:	57 c0       	rjmp	.+174    	; 0x152a <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    147c:	8b 81       	ldd	r24, Y+3	; 0x03
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	a1 f4       	brne	.+40     	; 0x14aa <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1482:	a4 e3       	ldi	r26, 0x34	; 52
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e4 e3       	ldi	r30, 0x34	; 52
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	48 2f       	mov	r20, r24
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	02 2e       	mov	r0, r18
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <LCD_setPinDirection+0x13c>
    149c:	88 0f       	add	r24, r24
    149e:	99 1f       	adc	r25, r25
    14a0:	0a 94       	dec	r0
    14a2:	e2 f7       	brpl	.-8      	; 0x149c <LCD_setPinDirection+0x138>
    14a4:	84 2b       	or	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	40 c0       	rjmp	.+128    	; 0x152a <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    14aa:	a4 e3       	ldi	r26, 0x34	; 52
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e4 e3       	ldi	r30, 0x34	; 52
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <LCD_setPinDirection+0x164>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <LCD_setPinDirection+0x160>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	2b c0       	rjmp	.+86     	; 0x152a <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	a1 f4       	brne	.+40     	; 0x1502 <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14da:	a1 e3       	ldi	r26, 0x31	; 49
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e1 e3       	ldi	r30, 0x31	; 49
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <LCD_setPinDirection+0x194>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <LCD_setPinDirection+0x190>
    14fc:	84 2b       	or	r24, r20
    14fe:	8c 93       	st	X, r24
    1500:	14 c0       	rjmp	.+40     	; 0x152a <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    1502:	a1 e3       	ldi	r26, 0x31	; 49
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e1 e3       	ldi	r30, 0x31	; 49
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	48 2f       	mov	r20, r24
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	28 2f       	mov	r18, r24
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	81 e0       	ldi	r24, 0x01	; 1
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	02 2e       	mov	r0, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <LCD_setPinDirection+0x1bc>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	0a 94       	dec	r0
    1522:	e2 f7       	brpl	.-8      	; 0x151c <LCD_setPinDirection+0x1b8>
    1524:	80 95       	com	r24
    1526:	84 23       	and	r24, r20
    1528:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    152a:	0f 90       	pop	r0
    152c:	0f 90       	pop	r0
    152e:	0f 90       	pop	r0
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	cf 91       	pop	r28
    1536:	df 91       	pop	r29
    1538:	08 95       	ret

0000153a <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    153a:	df 93       	push	r29
    153c:	cf 93       	push	r28
    153e:	00 d0       	rcall	.+0      	; 0x1540 <LCD_setPinValue+0x6>
    1540:	00 d0       	rcall	.+0      	; 0x1542 <LCD_setPinValue+0x8>
    1542:	0f 92       	push	r0
    1544:	cd b7       	in	r28, 0x3d	; 61
    1546:	de b7       	in	r29, 0x3e	; 62
    1548:	89 83       	std	Y+1, r24	; 0x01
    154a:	6a 83       	std	Y+2, r22	; 0x02
    154c:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	88 30       	cpi	r24, 0x08	; 8
    1552:	08 f0       	brcs	.+2      	; 0x1556 <LCD_setPinValue+0x1c>
    1554:	d5 c0       	rjmp	.+426    	; 0x1700 <LCD_setPinValue+0x1c6>
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	08 f0       	brcs	.+2      	; 0x155e <LCD_setPinValue+0x24>
    155c:	d1 c0       	rjmp	.+418    	; 0x1700 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    155e:	89 81       	ldd	r24, Y+1	; 0x01
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3d 83       	std	Y+5, r19	; 0x05
    1566:	2c 83       	std	Y+4, r18	; 0x04
    1568:	8c 81       	ldd	r24, Y+4	; 0x04
    156a:	9d 81       	ldd	r25, Y+5	; 0x05
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	91 05       	cpc	r25, r1
    1570:	09 f4       	brne	.+2      	; 0x1574 <LCD_setPinValue+0x3a>
    1572:	43 c0       	rjmp	.+134    	; 0x15fa <LCD_setPinValue+0xc0>
    1574:	2c 81       	ldd	r18, Y+4	; 0x04
    1576:	3d 81       	ldd	r19, Y+5	; 0x05
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	2c f4       	brge	.+10     	; 0x1588 <LCD_setPinValue+0x4e>
    157e:	8c 81       	ldd	r24, Y+4	; 0x04
    1580:	9d 81       	ldd	r25, Y+5	; 0x05
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	71 f0       	breq	.+28     	; 0x15a2 <LCD_setPinValue+0x68>
    1586:	bc c0       	rjmp	.+376    	; 0x1700 <LCD_setPinValue+0x1c6>
    1588:	2c 81       	ldd	r18, Y+4	; 0x04
    158a:	3d 81       	ldd	r19, Y+5	; 0x05
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	09 f4       	brne	.+2      	; 0x1594 <LCD_setPinValue+0x5a>
    1592:	5f c0       	rjmp	.+190    	; 0x1652 <LCD_setPinValue+0x118>
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	9d 81       	ldd	r25, Y+5	; 0x05
    1598:	83 30       	cpi	r24, 0x03	; 3
    159a:	91 05       	cpc	r25, r1
    159c:	09 f4       	brne	.+2      	; 0x15a0 <LCD_setPinValue+0x66>
    159e:	85 c0       	rjmp	.+266    	; 0x16aa <LCD_setPinValue+0x170>
    15a0:	af c0       	rjmp	.+350    	; 0x1700 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	81 30       	cpi	r24, 0x01	; 1
    15a6:	a1 f4       	brne	.+40     	; 0x15d0 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15a8:	ab e3       	ldi	r26, 0x3B	; 59
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	eb e3       	ldi	r30, 0x3B	; 59
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <LCD_setPinValue+0x8c>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <LCD_setPinValue+0x88>
    15ca:	84 2b       	or	r24, r20
    15cc:	8c 93       	st	X, r24
    15ce:	98 c0       	rjmp	.+304    	; 0x1700 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    15d0:	ab e3       	ldi	r26, 0x3B	; 59
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	eb e3       	ldi	r30, 0x3B	; 59
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	48 2f       	mov	r20, r24
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	02 2e       	mov	r0, r18
    15e8:	02 c0       	rjmp	.+4      	; 0x15ee <LCD_setPinValue+0xb4>
    15ea:	88 0f       	add	r24, r24
    15ec:	99 1f       	adc	r25, r25
    15ee:	0a 94       	dec	r0
    15f0:	e2 f7       	brpl	.-8      	; 0x15ea <LCD_setPinValue+0xb0>
    15f2:	80 95       	com	r24
    15f4:	84 23       	and	r24, r20
    15f6:	8c 93       	st	X, r24
    15f8:	83 c0       	rjmp	.+262    	; 0x1700 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	81 30       	cpi	r24, 0x01	; 1
    15fe:	a1 f4       	brne	.+40     	; 0x1628 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1600:	a8 e3       	ldi	r26, 0x38	; 56
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e8 e3       	ldi	r30, 0x38	; 56
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	48 2f       	mov	r20, r24
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	02 2e       	mov	r0, r18
    1618:	02 c0       	rjmp	.+4      	; 0x161e <LCD_setPinValue+0xe4>
    161a:	88 0f       	add	r24, r24
    161c:	99 1f       	adc	r25, r25
    161e:	0a 94       	dec	r0
    1620:	e2 f7       	brpl	.-8      	; 0x161a <LCD_setPinValue+0xe0>
    1622:	84 2b       	or	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	6c c0       	rjmp	.+216    	; 0x1700 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    1628:	a8 e3       	ldi	r26, 0x38	; 56
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e8 e3       	ldi	r30, 0x38	; 56
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <LCD_setPinValue+0x10c>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <LCD_setPinValue+0x108>
    164a:	80 95       	com	r24
    164c:	84 23       	and	r24, r20
    164e:	8c 93       	st	X, r24
    1650:	57 c0       	rjmp	.+174    	; 0x1700 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	81 30       	cpi	r24, 0x01	; 1
    1656:	a1 f4       	brne	.+40     	; 0x1680 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1658:	a5 e3       	ldi	r26, 0x35	; 53
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e5 e3       	ldi	r30, 0x35	; 53
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	48 2f       	mov	r20, r24
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	90 e0       	ldi	r25, 0x00	; 0
    166e:	02 2e       	mov	r0, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <LCD_setPinValue+0x13c>
    1672:	88 0f       	add	r24, r24
    1674:	99 1f       	adc	r25, r25
    1676:	0a 94       	dec	r0
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <LCD_setPinValue+0x138>
    167a:	84 2b       	or	r24, r20
    167c:	8c 93       	st	X, r24
    167e:	40 c0       	rjmp	.+128    	; 0x1700 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    1680:	a5 e3       	ldi	r26, 0x35	; 53
    1682:	b0 e0       	ldi	r27, 0x00	; 0
    1684:	e5 e3       	ldi	r30, 0x35	; 53
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	48 2f       	mov	r20, r24
    168c:	8a 81       	ldd	r24, Y+2	; 0x02
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	02 2e       	mov	r0, r18
    1698:	02 c0       	rjmp	.+4      	; 0x169e <LCD_setPinValue+0x164>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	0a 94       	dec	r0
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <LCD_setPinValue+0x160>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
    16a8:	2b c0       	rjmp	.+86     	; 0x1700 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	81 30       	cpi	r24, 0x01	; 1
    16ae:	a1 f4       	brne	.+40     	; 0x16d8 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16b0:	a2 e3       	ldi	r26, 0x32	; 50
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e2 e3       	ldi	r30, 0x32	; 50
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	48 2f       	mov	r20, r24
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	28 2f       	mov	r18, r24
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	02 2e       	mov	r0, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <LCD_setPinValue+0x194>
    16ca:	88 0f       	add	r24, r24
    16cc:	99 1f       	adc	r25, r25
    16ce:	0a 94       	dec	r0
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <LCD_setPinValue+0x190>
    16d2:	84 2b       	or	r24, r20
    16d4:	8c 93       	st	X, r24
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    16d8:	a2 e3       	ldi	r26, 0x32	; 50
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e2 e3       	ldi	r30, 0x32	; 50
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	48 2f       	mov	r20, r24
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	28 2f       	mov	r18, r24
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	02 2e       	mov	r0, r18
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <LCD_setPinValue+0x1bc>
    16f2:	88 0f       	add	r24, r24
    16f4:	99 1f       	adc	r25, r25
    16f6:	0a 94       	dec	r0
    16f8:	e2 f7       	brpl	.-8      	; 0x16f2 <LCD_setPinValue+0x1b8>
    16fa:	80 95       	com	r24
    16fc:	84 23       	and	r24, r20
    16fe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	0f 90       	pop	r0
    1708:	0f 90       	pop	r0
    170a:	cf 91       	pop	r28
    170c:	df 91       	pop	r29
    170e:	08 95       	ret

00001710 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    1710:	df 93       	push	r29
    1712:	cf 93       	push	r28
    1714:	00 d0       	rcall	.+0      	; 0x1716 <LCD_getPinValue+0x6>
    1716:	00 d0       	rcall	.+0      	; 0x1718 <LCD_getPinValue+0x8>
    1718:	0f 92       	push	r0
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	8a 83       	std	Y+2, r24	; 0x02
    1720:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    1722:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	88 30       	cpi	r24, 0x08	; 8
    1728:	08 f0       	brcs	.+2      	; 0x172c <LCD_getPinValue+0x1c>
    172a:	84 c0       	rjmp	.+264    	; 0x1834 <LCD_getPinValue+0x124>
    172c:	8a 81       	ldd	r24, Y+2	; 0x02
    172e:	84 30       	cpi	r24, 0x04	; 4
    1730:	08 f0       	brcs	.+2      	; 0x1734 <LCD_getPinValue+0x24>
    1732:	80 c0       	rjmp	.+256    	; 0x1834 <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	28 2f       	mov	r18, r24
    1738:	30 e0       	ldi	r19, 0x00	; 0
    173a:	3d 83       	std	Y+5, r19	; 0x05
    173c:	2c 83       	std	Y+4, r18	; 0x04
    173e:	4c 81       	ldd	r20, Y+4	; 0x04
    1740:	5d 81       	ldd	r21, Y+5	; 0x05
    1742:	41 30       	cpi	r20, 0x01	; 1
    1744:	51 05       	cpc	r21, r1
    1746:	79 f1       	breq	.+94     	; 0x17a6 <LCD_getPinValue+0x96>
    1748:	8c 81       	ldd	r24, Y+4	; 0x04
    174a:	9d 81       	ldd	r25, Y+5	; 0x05
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	91 05       	cpc	r25, r1
    1750:	34 f4       	brge	.+12     	; 0x175e <LCD_getPinValue+0x4e>
    1752:	2c 81       	ldd	r18, Y+4	; 0x04
    1754:	3d 81       	ldd	r19, Y+5	; 0x05
    1756:	21 15       	cp	r18, r1
    1758:	31 05       	cpc	r19, r1
    175a:	69 f0       	breq	.+26     	; 0x1776 <LCD_getPinValue+0x66>
    175c:	6b c0       	rjmp	.+214    	; 0x1834 <LCD_getPinValue+0x124>
    175e:	4c 81       	ldd	r20, Y+4	; 0x04
    1760:	5d 81       	ldd	r21, Y+5	; 0x05
    1762:	42 30       	cpi	r20, 0x02	; 2
    1764:	51 05       	cpc	r21, r1
    1766:	b9 f1       	breq	.+110    	; 0x17d6 <LCD_getPinValue+0xc6>
    1768:	8c 81       	ldd	r24, Y+4	; 0x04
    176a:	9d 81       	ldd	r25, Y+5	; 0x05
    176c:	83 30       	cpi	r24, 0x03	; 3
    176e:	91 05       	cpc	r25, r1
    1770:	09 f4       	brne	.+2      	; 0x1774 <LCD_getPinValue+0x64>
    1772:	49 c0       	rjmp	.+146    	; 0x1806 <LCD_getPinValue+0xf6>
    1774:	5f c0       	rjmp	.+190    	; 0x1834 <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1776:	e9 e3       	ldi	r30, 0x39	; 57
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	88 2f       	mov	r24, r24
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a9 01       	movw	r20, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <LCD_getPinValue+0x7e>
    178a:	55 95       	asr	r21
    178c:	47 95       	ror	r20
    178e:	8a 95       	dec	r24
    1790:	e2 f7       	brpl	.-8      	; 0x178a <LCD_getPinValue+0x7a>
    1792:	ca 01       	movw	r24, r20
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	90 70       	andi	r25, 0x00	; 0
    1798:	88 23       	and	r24, r24
    179a:	19 f0       	breq	.+6      	; 0x17a2 <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
    17a0:	49 c0       	rjmp	.+146    	; 0x1834 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17a2:	19 82       	std	Y+1, r1	; 0x01
    17a4:	47 c0       	rjmp	.+142    	; 0x1834 <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17a6:	e6 e3       	ldi	r30, 0x36	; 54
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	88 2f       	mov	r24, r24
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	a9 01       	movw	r20, r18
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <LCD_getPinValue+0xae>
    17ba:	55 95       	asr	r21
    17bc:	47 95       	ror	r20
    17be:	8a 95       	dec	r24
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <LCD_getPinValue+0xaa>
    17c2:	ca 01       	movw	r24, r20
    17c4:	81 70       	andi	r24, 0x01	; 1
    17c6:	90 70       	andi	r25, 0x00	; 0
    17c8:	88 23       	and	r24, r24
    17ca:	19 f0       	breq	.+6      	; 0x17d2 <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	89 83       	std	Y+1, r24	; 0x01
    17d0:	31 c0       	rjmp	.+98     	; 0x1834 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17d2:	19 82       	std	Y+1, r1	; 0x01
    17d4:	2f c0       	rjmp	.+94     	; 0x1834 <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    17d6:	e3 e3       	ldi	r30, 0x33	; 51
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	8b 81       	ldd	r24, Y+3	; 0x03
    17e2:	88 2f       	mov	r24, r24
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	a9 01       	movw	r20, r18
    17e8:	02 c0       	rjmp	.+4      	; 0x17ee <LCD_getPinValue+0xde>
    17ea:	55 95       	asr	r21
    17ec:	47 95       	ror	r20
    17ee:	8a 95       	dec	r24
    17f0:	e2 f7       	brpl	.-8      	; 0x17ea <LCD_getPinValue+0xda>
    17f2:	ca 01       	movw	r24, r20
    17f4:	81 70       	andi	r24, 0x01	; 1
    17f6:	90 70       	andi	r25, 0x00	; 0
    17f8:	88 23       	and	r24, r24
    17fa:	19 f0       	breq	.+6      	; 0x1802 <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	89 83       	std	Y+1, r24	; 0x01
    1800:	19 c0       	rjmp	.+50     	; 0x1834 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1802:	19 82       	std	Y+1, r1	; 0x01
    1804:	17 c0       	rjmp	.+46     	; 0x1834 <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1806:	e0 e3       	ldi	r30, 0x30	; 48
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a9 01       	movw	r20, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <LCD_getPinValue+0x10e>
    181a:	55 95       	asr	r21
    181c:	47 95       	ror	r20
    181e:	8a 95       	dec	r24
    1820:	e2 f7       	brpl	.-8      	; 0x181a <LCD_getPinValue+0x10a>
    1822:	ca 01       	movw	r24, r20
    1824:	81 70       	andi	r24, 0x01	; 1
    1826:	90 70       	andi	r25, 0x00	; 0
    1828:	88 23       	and	r24, r24
    182a:	19 f0       	breq	.+6      	; 0x1832 <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1832:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1834:	89 81       	ldd	r24, Y+1	; 0x01
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <LCD_setPortDirection+0x6>
    184c:	00 d0       	rcall	.+0      	; 0x184e <LCD_setPortDirection+0x8>
    184e:	cd b7       	in	r28, 0x3d	; 61
    1850:	de b7       	in	r29, 0x3e	; 62
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	84 30       	cpi	r24, 0x04	; 4
    185a:	90 f5       	brcc	.+100    	; 0x18c0 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	28 2f       	mov	r18, r24
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	3c 83       	std	Y+4, r19	; 0x04
    1864:	2b 83       	std	Y+3, r18	; 0x03
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	81 30       	cpi	r24, 0x01	; 1
    186c:	91 05       	cpc	r25, r1
    186e:	d1 f0       	breq	.+52     	; 0x18a4 <LCD_setPortDirection+0x5e>
    1870:	2b 81       	ldd	r18, Y+3	; 0x03
    1872:	3c 81       	ldd	r19, Y+4	; 0x04
    1874:	22 30       	cpi	r18, 0x02	; 2
    1876:	31 05       	cpc	r19, r1
    1878:	2c f4       	brge	.+10     	; 0x1884 <LCD_setPortDirection+0x3e>
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	61 f0       	breq	.+24     	; 0x189a <LCD_setPortDirection+0x54>
    1882:	1e c0       	rjmp	.+60     	; 0x18c0 <LCD_setPortDirection+0x7a>
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	22 30       	cpi	r18, 0x02	; 2
    188a:	31 05       	cpc	r19, r1
    188c:	81 f0       	breq	.+32     	; 0x18ae <LCD_setPortDirection+0x68>
    188e:	8b 81       	ldd	r24, Y+3	; 0x03
    1890:	9c 81       	ldd	r25, Y+4	; 0x04
    1892:	83 30       	cpi	r24, 0x03	; 3
    1894:	91 05       	cpc	r25, r1
    1896:	81 f0       	breq	.+32     	; 0x18b8 <LCD_setPortDirection+0x72>
    1898:	13 c0       	rjmp	.+38     	; 0x18c0 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    189a:	ea e3       	ldi	r30, 0x3A	; 58
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	80 83       	st	Z, r24
    18a2:	0e c0       	rjmp	.+28     	; 0x18c0 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18a4:	e7 e3       	ldi	r30, 0x37	; 55
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	8a 81       	ldd	r24, Y+2	; 0x02
    18aa:	80 83       	st	Z, r24
    18ac:	09 c0       	rjmp	.+18     	; 0x18c0 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18ae:	e4 e3       	ldi	r30, 0x34	; 52
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	80 83       	st	Z, r24
    18b6:	04 c0       	rjmp	.+8      	; 0x18c0 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    18b8:	e1 e3       	ldi	r30, 0x31	; 49
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	8a 81       	ldd	r24, Y+2	; 0x02
    18be:	80 83       	st	Z, r24
			break;
		}
	}
}
    18c0:	0f 90       	pop	r0
    18c2:	0f 90       	pop	r0
    18c4:	0f 90       	pop	r0
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	00 d0       	rcall	.+0      	; 0x18d4 <LCD_setPortValue+0x6>
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <LCD_setPortValue+0x8>
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	84 30       	cpi	r24, 0x04	; 4
    18e2:	90 f5       	brcc	.+100    	; 0x1948 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3c 83       	std	Y+4, r19	; 0x04
    18ec:	2b 83       	std	Y+3, r18	; 0x03
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	d1 f0       	breq	.+52     	; 0x192c <LCD_setPortValue+0x5e>
    18f8:	2b 81       	ldd	r18, Y+3	; 0x03
    18fa:	3c 81       	ldd	r19, Y+4	; 0x04
    18fc:	22 30       	cpi	r18, 0x02	; 2
    18fe:	31 05       	cpc	r19, r1
    1900:	2c f4       	brge	.+10     	; 0x190c <LCD_setPortValue+0x3e>
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	00 97       	sbiw	r24, 0x00	; 0
    1908:	61 f0       	breq	.+24     	; 0x1922 <LCD_setPortValue+0x54>
    190a:	1e c0       	rjmp	.+60     	; 0x1948 <LCD_setPortValue+0x7a>
    190c:	2b 81       	ldd	r18, Y+3	; 0x03
    190e:	3c 81       	ldd	r19, Y+4	; 0x04
    1910:	22 30       	cpi	r18, 0x02	; 2
    1912:	31 05       	cpc	r19, r1
    1914:	81 f0       	breq	.+32     	; 0x1936 <LCD_setPortValue+0x68>
    1916:	8b 81       	ldd	r24, Y+3	; 0x03
    1918:	9c 81       	ldd	r25, Y+4	; 0x04
    191a:	83 30       	cpi	r24, 0x03	; 3
    191c:	91 05       	cpc	r25, r1
    191e:	81 f0       	breq	.+32     	; 0x1940 <LCD_setPortValue+0x72>
    1920:	13 c0       	rjmp	.+38     	; 0x1948 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1922:	eb e3       	ldi	r30, 0x3B	; 59
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	80 83       	st	Z, r24
    192a:	0e c0       	rjmp	.+28     	; 0x1948 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    192c:	e8 e3       	ldi	r30, 0x38	; 56
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	8a 81       	ldd	r24, Y+2	; 0x02
    1932:	80 83       	st	Z, r24
    1934:	09 c0       	rjmp	.+18     	; 0x1948 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1936:	e5 e3       	ldi	r30, 0x35	; 53
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	80 83       	st	Z, r24
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1940:	e2 e3       	ldi	r30, 0x32	; 50
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	8a 81       	ldd	r24, Y+2	; 0x02
    1946:	80 83       	st	Z, r24
			break;
		}
	}
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	cf 91       	pop	r28
    1952:	df 91       	pop	r29
    1954:	08 95       	ret

00001956 <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    1956:	df 93       	push	r29
    1958:	cf 93       	push	r28
    195a:	00 d0       	rcall	.+0      	; 0x195c <LCD_getPortValue+0x6>
    195c:	00 d0       	rcall	.+0      	; 0x195e <LCD_getPortValue+0x8>
    195e:	cd b7       	in	r28, 0x3d	; 61
    1960:	de b7       	in	r29, 0x3e	; 62
    1962:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    1964:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	84 30       	cpi	r24, 0x04	; 4
    196a:	90 f5       	brcc	.+100    	; 0x19d0 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	28 2f       	mov	r18, r24
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	3c 83       	std	Y+4, r19	; 0x04
    1974:	2b 83       	std	Y+3, r18	; 0x03
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 05       	cpc	r25, r1
    197e:	d1 f0       	breq	.+52     	; 0x19b4 <LCD_getPortValue+0x5e>
    1980:	2b 81       	ldd	r18, Y+3	; 0x03
    1982:	3c 81       	ldd	r19, Y+4	; 0x04
    1984:	22 30       	cpi	r18, 0x02	; 2
    1986:	31 05       	cpc	r19, r1
    1988:	2c f4       	brge	.+10     	; 0x1994 <LCD_getPortValue+0x3e>
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	00 97       	sbiw	r24, 0x00	; 0
    1990:	61 f0       	breq	.+24     	; 0x19aa <LCD_getPortValue+0x54>
    1992:	1e c0       	rjmp	.+60     	; 0x19d0 <LCD_getPortValue+0x7a>
    1994:	2b 81       	ldd	r18, Y+3	; 0x03
    1996:	3c 81       	ldd	r19, Y+4	; 0x04
    1998:	22 30       	cpi	r18, 0x02	; 2
    199a:	31 05       	cpc	r19, r1
    199c:	81 f0       	breq	.+32     	; 0x19be <LCD_getPortValue+0x68>
    199e:	8b 81       	ldd	r24, Y+3	; 0x03
    19a0:	9c 81       	ldd	r25, Y+4	; 0x04
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	91 05       	cpc	r25, r1
    19a6:	81 f0       	breq	.+32     	; 0x19c8 <LCD_getPortValue+0x72>
    19a8:	13 c0       	rjmp	.+38     	; 0x19d0 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19aa:	e9 e3       	ldi	r30, 0x39	; 57
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	89 83       	std	Y+1, r24	; 0x01
    19b2:	0e c0       	rjmp	.+28     	; 0x19d0 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    19b4:	e6 e3       	ldi	r30, 0x36	; 54
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	89 83       	std	Y+1, r24	; 0x01
    19bc:	09 c0       	rjmp	.+18     	; 0x19d0 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    19be:	e3 e3       	ldi	r30, 0x33	; 51
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	04 c0       	rjmp	.+8      	; 0x19d0 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    19c8:	e0 e3       	ldi	r30, 0x30	; 48
    19ca:	f0 e0       	ldi	r31, 0x00	; 0
    19cc:	80 81       	ld	r24, Z
    19ce:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    19d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d2:	0f 90       	pop	r0
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    19e8:	af e5       	ldi	r26, 0x5F	; 95
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	ef e5       	ldi	r30, 0x5F	; 95
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	80 68       	ori	r24, 0x80	; 128
    19f4:	8c 93       	st	X, r24
}
    19f6:	cf 91       	pop	r28
    19f8:	df 91       	pop	r29
    19fa:	08 95       	ret

000019fc <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    1a04:	af e5       	ldi	r26, 0x5F	; 95
    1a06:	b0 e0       	ldi	r27, 0x00	; 0
    1a08:	ef e5       	ldi	r30, 0x5F	; 95
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	8f 77       	andi	r24, 0x7F	; 127
    1a10:	8c 93       	st	X, r24
}
    1a12:	cf 91       	pop	r28
    1a14:	df 91       	pop	r29
    1a16:	08 95       	ret

00001a18 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1a18:	df 93       	push	r29
    1a1a:	cf 93       	push	r28
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <setCallBack+0x6>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01
    1a28:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	88 2f       	mov	r24, r24
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	fc 01       	movw	r30, r24
    1a36:	e4 55       	subi	r30, 0x54	; 84
    1a38:	fe 4f       	sbci	r31, 0xFE	; 254
    1a3a:	89 81       	ldd	r24, Y+1	; 0x01
    1a3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3e:	91 83       	std	Z+1, r25	; 0x01
    1a40:	80 83       	st	Z, r24
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1a4e:	df 93       	push	r29
    1a50:	cf 93       	push	r28
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1a56:	a5 e5       	ldi	r26, 0x55	; 85
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	e5 e5       	ldi	r30, 0x55	; 85
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	8e 7f       	andi	r24, 0xFE	; 254
    1a62:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1a64:	a5 e5       	ldi	r26, 0x55	; 85
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e5 e5       	ldi	r30, 0x55	; 85
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8d 7f       	andi	r24, 0xFD	; 253
    1a70:	8c 93       	st	X, r24
}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1a80:	a5 e5       	ldi	r26, 0x55	; 85
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e5 e5       	ldi	r30, 0x55	; 85
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	82 60       	ori	r24, 0x02	; 2
    1a8c:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1a8e:	a5 e5       	ldi	r26, 0x55	; 85
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e5       	ldi	r30, 0x55	; 85
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	8e 7f       	andi	r24, 0xFE	; 254
    1a9a:	8c 93       	st	X, r24
}
    1a9c:	cf 91       	pop	r28
    1a9e:	df 91       	pop	r29
    1aa0:	08 95       	ret

00001aa2 <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1aaa:	a5 e5       	ldi	r26, 0x55	; 85
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	e5 e5       	ldi	r30, 0x55	; 85
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	8d 7f       	andi	r24, 0xFD	; 253
    1ab6:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1ab8:	a5 e5       	ldi	r26, 0x55	; 85
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e5 e5       	ldi	r30, 0x55	; 85
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	81 60       	ori	r24, 0x01	; 1
    1ac4:	8c 93       	st	X, r24
}
    1ac6:	cf 91       	pop	r28
    1ac8:	df 91       	pop	r29
    1aca:	08 95       	ret

00001acc <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1ad4:	a5 e5       	ldi	r26, 0x55	; 85
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	e5 e5       	ldi	r30, 0x55	; 85
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	82 60       	ori	r24, 0x02	; 2
    1ae0:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1ae2:	a5 e5       	ldi	r26, 0x55	; 85
    1ae4:	b0 e0       	ldi	r27, 0x00	; 0
    1ae6:	e5 e5       	ldi	r30, 0x55	; 85
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 81       	ld	r24, Z
    1aec:	81 60       	ori	r24, 0x01	; 1
    1aee:	8c 93       	st	X, r24
}
    1af0:	cf 91       	pop	r28
    1af2:	df 91       	pop	r29
    1af4:	08 95       	ret

00001af6 <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    1af6:	df 93       	push	r29
    1af8:	cf 93       	push	r28
    1afa:	cd b7       	in	r28, 0x3d	; 61
    1afc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1afe:	a5 e5       	ldi	r26, 0x55	; 85
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e5 e5       	ldi	r30, 0x55	; 85
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8b 7f       	andi	r24, 0xFB	; 251
    1b0a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1b0c:	a5 e5       	ldi	r26, 0x55	; 85
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e5 e5       	ldi	r30, 0x55	; 85
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
    1b16:	87 7f       	andi	r24, 0xF7	; 247
    1b18:	8c 93       	st	X, r24
}
    1b1a:	cf 91       	pop	r28
    1b1c:	df 91       	pop	r29
    1b1e:	08 95       	ret

00001b20 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1b28:	a5 e5       	ldi	r26, 0x55	; 85
    1b2a:	b0 e0       	ldi	r27, 0x00	; 0
    1b2c:	e5 e5       	ldi	r30, 0x55	; 85
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	88 60       	ori	r24, 0x08	; 8
    1b34:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1b36:	a5 e5       	ldi	r26, 0x55	; 85
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e5 e5       	ldi	r30, 0x55	; 85
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	8b 7f       	andi	r24, 0xFB	; 251
    1b42:	8c 93       	st	X, r24
}
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1b52:	a5 e5       	ldi	r26, 0x55	; 85
    1b54:	b0 e0       	ldi	r27, 0x00	; 0
    1b56:	e5 e5       	ldi	r30, 0x55	; 85
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	87 7f       	andi	r24, 0xF7	; 247
    1b5e:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1b60:	a5 e5       	ldi	r26, 0x55	; 85
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e5 e5       	ldi	r30, 0x55	; 85
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	84 60       	ori	r24, 0x04	; 4
    1b6c:	8c 93       	st	X, r24
}
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1b7c:	a5 e5       	ldi	r26, 0x55	; 85
    1b7e:	b0 e0       	ldi	r27, 0x00	; 0
    1b80:	e5 e5       	ldi	r30, 0x55	; 85
    1b82:	f0 e0       	ldi	r31, 0x00	; 0
    1b84:	80 81       	ld	r24, Z
    1b86:	88 60       	ori	r24, 0x08	; 8
    1b88:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1b8a:	a5 e5       	ldi	r26, 0x55	; 85
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e5 e5       	ldi	r30, 0x55	; 85
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	80 81       	ld	r24, Z
    1b94:	84 60       	ori	r24, 0x04	; 4
    1b96:	8c 93       	st	X, r24
}
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1ba6:	a4 e5       	ldi	r26, 0x54	; 84
    1ba8:	b0 e0       	ldi	r27, 0x00	; 0
    1baa:	e4 e5       	ldi	r30, 0x54	; 84
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	80 64       	ori	r24, 0x40	; 64
    1bb2:	8c 93       	st	X, r24
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	cd b7       	in	r28, 0x3d	; 61
    1bc0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    1bc2:	a4 e5       	ldi	r26, 0x54	; 84
    1bc4:	b0 e0       	ldi	r27, 0x00	; 0
    1bc6:	e4 e5       	ldi	r30, 0x54	; 84
    1bc8:	f0 e0       	ldi	r31, 0x00	; 0
    1bca:	80 81       	ld	r24, Z
    1bcc:	8f 7b       	andi	r24, 0xBF	; 191
    1bce:	8c 93       	st	X, r24
}
    1bd0:	cf 91       	pop	r28
    1bd2:	df 91       	pop	r29
    1bd4:	08 95       	ret

00001bd6 <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_RISING_MODE();
    1bde:	0e 94 66 0d 	call	0x1acc	; 0x1acc <EXTI0_RISING_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1be2:	ab e5       	ldi	r26, 0x5B	; 91
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	eb e5       	ldi	r30, 0x5B	; 91
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	80 64       	ori	r24, 0x40	; 64
    1bee:	8c 93       	st	X, r24
}
    1bf0:	cf 91       	pop	r28
    1bf2:	df 91       	pop	r29
    1bf4:	08 95       	ret

00001bf6 <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    1bf6:	df 93       	push	r29
    1bf8:	cf 93       	push	r28
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    1bfe:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1c02:	ab e5       	ldi	r26, 0x5B	; 91
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	eb e5       	ldi	r30, 0x5B	; 91
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	80 68       	ori	r24, 0x80	; 128
    1c0e:	8c 93       	st	X, r24
}
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <EXTI_INTEnable>:


void EXTI_INTEnable(u8 Copy_u8INTNumber, u8 Copy_u8INTMode){
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	cd b7       	in	r28, 0x3d	; 61
    1c1c:	de b7       	in	r29, 0x3e	; 62
    1c1e:	2a 97       	sbiw	r28, 0x0a	; 10
    1c20:	0f b6       	in	r0, 0x3f	; 63
    1c22:	f8 94       	cli
    1c24:	de bf       	out	0x3e, r29	; 62
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	cd bf       	out	0x3d, r28	; 61
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8INTNumber){
    1c2e:	89 81       	ldd	r24, Y+1	; 0x01
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	3a 87       	std	Y+10, r19	; 0x0a
    1c36:	29 87       	std	Y+9, r18	; 0x09
    1c38:	89 85       	ldd	r24, Y+9	; 0x09
    1c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3c:	81 30       	cpi	r24, 0x01	; 1
    1c3e:	91 05       	cpc	r25, r1
    1c40:	e9 f1       	breq	.+122    	; 0x1cbc <EXTI_INTEnable+0xa6>
    1c42:	29 85       	ldd	r18, Y+9	; 0x09
    1c44:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <EXTI_INTEnable+0x38>
    1c4c:	69 c0       	rjmp	.+210    	; 0x1d20 <EXTI_INTEnable+0x10a>
    1c4e:	89 85       	ldd	r24, Y+9	; 0x09
    1c50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c52:	00 97       	sbiw	r24, 0x00	; 0
    1c54:	09 f0       	breq	.+2      	; 0x1c58 <EXTI_INTEnable+0x42>
    1c56:	7f c0       	rjmp	.+254    	; 0x1d56 <EXTI_INTEnable+0x140>
		case EXTI_INT0:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1c58:	ab e5       	ldi	r26, 0x5B	; 91
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	eb e5       	ldi	r30, 0x5B	; 91
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 64       	ori	r24, 0x40	; 64
    1c64:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	28 2f       	mov	r18, r24
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	38 87       	std	Y+8, r19	; 0x08
    1c6e:	2f 83       	std	Y+7, r18	; 0x07
    1c70:	8f 81       	ldd	r24, Y+7	; 0x07
    1c72:	98 85       	ldd	r25, Y+8	; 0x08
    1c74:	81 30       	cpi	r24, 0x01	; 1
    1c76:	91 05       	cpc	r25, r1
    1c78:	c1 f0       	breq	.+48     	; 0x1caa <EXTI_INTEnable+0x94>
    1c7a:	2f 81       	ldd	r18, Y+7	; 0x07
    1c7c:	38 85       	ldd	r19, Y+8	; 0x08
    1c7e:	22 30       	cpi	r18, 0x02	; 2
    1c80:	31 05       	cpc	r19, r1
    1c82:	2c f4       	brge	.+10     	; 0x1c8e <EXTI_INTEnable+0x78>
    1c84:	8f 81       	ldd	r24, Y+7	; 0x07
    1c86:	98 85       	ldd	r25, Y+8	; 0x08
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <EXTI_INTEnable+0x8e>
    1c8c:	64 c0       	rjmp	.+200    	; 0x1d56 <EXTI_INTEnable+0x140>
    1c8e:	2f 81       	ldd	r18, Y+7	; 0x07
    1c90:	38 85       	ldd	r19, Y+8	; 0x08
    1c92:	22 30       	cpi	r18, 0x02	; 2
    1c94:	31 05       	cpc	r19, r1
    1c96:	61 f0       	breq	.+24     	; 0x1cb0 <EXTI_INTEnable+0x9a>
    1c98:	8f 81       	ldd	r24, Y+7	; 0x07
    1c9a:	98 85       	ldd	r25, Y+8	; 0x08
    1c9c:	83 30       	cpi	r24, 0x03	; 3
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	51 f0       	breq	.+20     	; 0x1cb6 <EXTI_INTEnable+0xa0>
    1ca2:	59 c0       	rjmp	.+178    	; 0x1d56 <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    1ca4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <EXTI0_LowLevel_MODE>
    1ca8:	56 c0       	rjmp	.+172    	; 0x1d56 <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    1caa:	0e 94 3c 0d 	call	0x1a78	; 0x1a78 <EXTI0_FALLING_MODE>
    1cae:	53 c0       	rjmp	.+166    	; 0x1d56 <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    1cb0:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <EXTI0_AnyLogicalChange_MODE>
    1cb4:	50 c0       	rjmp	.+160    	; 0x1d56 <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    1cb6:	0e 94 66 0d 	call	0x1acc	; 0x1acc <EXTI0_RISING_MODE>
    1cba:	4d c0       	rjmp	.+154    	; 0x1d56 <EXTI_INTEnable+0x140>
			}
			break;

		case EXTI_INT1:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1cbc:	ab e5       	ldi	r26, 0x5B	; 91
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	eb e5       	ldi	r30, 0x5B	; 91
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	80 68       	ori	r24, 0x80	; 128
    1cc8:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	3e 83       	std	Y+6, r19	; 0x06
    1cd2:	2d 83       	std	Y+5, r18	; 0x05
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	81 30       	cpi	r24, 0x01	; 1
    1cda:	91 05       	cpc	r25, r1
    1cdc:	c1 f0       	breq	.+48     	; 0x1d0e <EXTI_INTEnable+0xf8>
    1cde:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce0:	3e 81       	ldd	r19, Y+6	; 0x06
    1ce2:	22 30       	cpi	r18, 0x02	; 2
    1ce4:	31 05       	cpc	r19, r1
    1ce6:	2c f4       	brge	.+10     	; 0x1cf2 <EXTI_INTEnable+0xdc>
    1ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    1cea:	9e 81       	ldd	r25, Y+6	; 0x06
    1cec:	00 97       	sbiw	r24, 0x00	; 0
    1cee:	61 f0       	breq	.+24     	; 0x1d08 <EXTI_INTEnable+0xf2>
    1cf0:	32 c0       	rjmp	.+100    	; 0x1d56 <EXTI_INTEnable+0x140>
    1cf2:	2d 81       	ldd	r18, Y+5	; 0x05
    1cf4:	3e 81       	ldd	r19, Y+6	; 0x06
    1cf6:	22 30       	cpi	r18, 0x02	; 2
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	61 f0       	breq	.+24     	; 0x1d14 <EXTI_INTEnable+0xfe>
    1cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1d00:	83 30       	cpi	r24, 0x03	; 3
    1d02:	91 05       	cpc	r25, r1
    1d04:	51 f0       	breq	.+20     	; 0x1d1a <EXTI_INTEnable+0x104>
    1d06:	27 c0       	rjmp	.+78     	; 0x1d56 <EXTI_INTEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    1d08:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <EXTI1_LowLevel_MODE>
    1d0c:	24 c0       	rjmp	.+72     	; 0x1d56 <EXTI_INTEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    1d0e:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <EXTI1_FALLING_MODE>
    1d12:	21 c0       	rjmp	.+66     	; 0x1d56 <EXTI_INTEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    1d14:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <EXTI1_AnyLogicalChange_MODE>
    1d18:	1e c0       	rjmp	.+60     	; 0x1d56 <EXTI_INTEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1d1a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <EXTI1_RISING_MODE>
    1d1e:	1b c0       	rjmp	.+54     	; 0x1d56 <EXTI_INTEnable+0x140>
					break;
			}
			break;
		case EXTI_INT2:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1d20:	ab e5       	ldi	r26, 0x5B	; 91
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	eb e5       	ldi	r30, 0x5B	; 91
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	80 62       	ori	r24, 0x20	; 32
    1d2c:	8c 93       	st	X, r24
			switch(Copy_u8INTMode){
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	3c 83       	std	Y+4, r19	; 0x04
    1d36:	2b 83       	std	Y+3, r18	; 0x03
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	81 30       	cpi	r24, 0x01	; 1
    1d3e:	91 05       	cpc	r25, r1
    1d40:	41 f0       	breq	.+16     	; 0x1d52 <EXTI_INTEnable+0x13c>
    1d42:	2b 81       	ldd	r18, Y+3	; 0x03
    1d44:	3c 81       	ldd	r19, Y+4	; 0x04
    1d46:	23 30       	cpi	r18, 0x03	; 3
    1d48:	31 05       	cpc	r19, r1
    1d4a:	29 f4       	brne	.+10     	; 0x1d56 <EXTI_INTEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1d4c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <EXTI2_RISING_MODE>
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <EXTI_INTEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    1d52:	0e 94 dd 0d 	call	0x1bba	; 0x1bba <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    1d56:	2a 96       	adiw	r28, 0x0a	; 10
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	f8 94       	cli
    1d5c:	de bf       	out	0x3e, r29	; 62
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	cd bf       	out	0x3d, r28	; 61
    1d62:	cf 91       	pop	r28
    1d64:	df 91       	pop	r29
    1d66:	08 95       	ret

00001d68 <EXTI_voidINTDisable>:

void EXTI_voidINTDisable(u8 Copy_u8_INT_Index){
    1d68:	df 93       	push	r29
    1d6a:	cf 93       	push	r28
    1d6c:	00 d0       	rcall	.+0      	; 0x1d6e <EXTI_voidINTDisable+0x6>
    1d6e:	0f 92       	push	r0
    1d70:	cd b7       	in	r28, 0x3d	; 61
    1d72:	de b7       	in	r29, 0x3e	; 62
    1d74:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_INT_Index){
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	3b 83       	std	Y+3, r19	; 0x03
    1d7e:	2a 83       	std	Y+2, r18	; 0x02
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	81 30       	cpi	r24, 0x01	; 1
    1d86:	91 05       	cpc	r25, r1
    1d88:	89 f0       	breq	.+34     	; 0x1dac <EXTI_voidINTDisable+0x44>
    1d8a:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d8e:	22 30       	cpi	r18, 0x02	; 2
    1d90:	31 05       	cpc	r19, r1
    1d92:	a1 f0       	breq	.+40     	; 0x1dbc <EXTI_voidINTDisable+0x54>
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	00 97       	sbiw	r24, 0x00	; 0
    1d9a:	b9 f4       	brne	.+46     	; 0x1dca <EXTI_voidINTDisable+0x62>
		case EXTI_INT0:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1d9c:	ab e5       	ldi	r26, 0x5B	; 91
    1d9e:	b0 e0       	ldi	r27, 0x00	; 0
    1da0:	eb e5       	ldi	r30, 0x5B	; 91
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	80 81       	ld	r24, Z
    1da6:	8f 7b       	andi	r24, 0xBF	; 191
    1da8:	8c 93       	st	X, r24
    1daa:	0f c0       	rjmp	.+30     	; 0x1dca <EXTI_voidINTDisable+0x62>
			break;

		case EXTI_INT1:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    1dac:	ab e5       	ldi	r26, 0x5B	; 91
    1dae:	b0 e0       	ldi	r27, 0x00	; 0
    1db0:	eb e5       	ldi	r30, 0x5B	; 91
    1db2:	f0 e0       	ldi	r31, 0x00	; 0
    1db4:	80 81       	ld	r24, Z
    1db6:	8f 77       	andi	r24, 0x7F	; 127
    1db8:	8c 93       	st	X, r24
    1dba:	07 c0       	rjmp	.+14     	; 0x1dca <EXTI_voidINTDisable+0x62>
			break;
		
		case EXTI_INT2:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1dbc:	ab e5       	ldi	r26, 0x5B	; 91
    1dbe:	b0 e0       	ldi	r27, 0x00	; 0
    1dc0:	eb e5       	ldi	r30, 0x5B	; 91
    1dc2:	f0 e0       	ldi	r31, 0x00	; 0
    1dc4:	80 81       	ld	r24, Z
    1dc6:	8f 7d       	andi	r24, 0xDF	; 223
    1dc8:	8c 93       	st	X, r24
			break;
	}
}
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    1dd6:	1f 92       	push	r1
    1dd8:	0f 92       	push	r0
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	0f 92       	push	r0
    1dde:	11 24       	eor	r1, r1
    1de0:	2f 93       	push	r18
    1de2:	3f 93       	push	r19
    1de4:	4f 93       	push	r20
    1de6:	5f 93       	push	r21
    1de8:	6f 93       	push	r22
    1dea:	7f 93       	push	r23
    1dec:	8f 93       	push	r24
    1dee:	9f 93       	push	r25
    1df0:	af 93       	push	r26
    1df2:	bf 93       	push	r27
    1df4:	ef 93       	push	r30
    1df6:	ff 93       	push	r31
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT0] != NULL){
    1e00:	80 91 ac 01 	lds	r24, 0x01AC
    1e04:	90 91 ad 01 	lds	r25, 0x01AD
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	29 f0       	breq	.+10     	; 0x1e16 <__vector_1+0x40>
		EXTI[0]();
    1e0c:	e0 91 ac 01 	lds	r30, 0x01AC
    1e10:	f0 91 ad 01 	lds	r31, 0x01AD
    1e14:	09 95       	icall
	}

}
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	ff 91       	pop	r31
    1e1c:	ef 91       	pop	r30
    1e1e:	bf 91       	pop	r27
    1e20:	af 91       	pop	r26
    1e22:	9f 91       	pop	r25
    1e24:	8f 91       	pop	r24
    1e26:	7f 91       	pop	r23
    1e28:	6f 91       	pop	r22
    1e2a:	5f 91       	pop	r21
    1e2c:	4f 91       	pop	r20
    1e2e:	3f 91       	pop	r19
    1e30:	2f 91       	pop	r18
    1e32:	0f 90       	pop	r0
    1e34:	0f be       	out	0x3f, r0	; 63
    1e36:	0f 90       	pop	r0
    1e38:	1f 90       	pop	r1
    1e3a:	18 95       	reti

00001e3c <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    1e3c:	1f 92       	push	r1
    1e3e:	0f 92       	push	r0
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	0f 92       	push	r0
    1e44:	11 24       	eor	r1, r1
    1e46:	2f 93       	push	r18
    1e48:	3f 93       	push	r19
    1e4a:	4f 93       	push	r20
    1e4c:	5f 93       	push	r21
    1e4e:	6f 93       	push	r22
    1e50:	7f 93       	push	r23
    1e52:	8f 93       	push	r24
    1e54:	9f 93       	push	r25
    1e56:	af 93       	push	r26
    1e58:	bf 93       	push	r27
    1e5a:	ef 93       	push	r30
    1e5c:	ff 93       	push	r31
    1e5e:	df 93       	push	r29
    1e60:	cf 93       	push	r28
    1e62:	cd b7       	in	r28, 0x3d	; 61
    1e64:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT1] != NULL){
    1e66:	80 91 ae 01 	lds	r24, 0x01AE
    1e6a:	90 91 af 01 	lds	r25, 0x01AF
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	29 f0       	breq	.+10     	; 0x1e7c <__vector_2+0x40>
			EXTI[1]();
    1e72:	e0 91 ae 01 	lds	r30, 0x01AE
    1e76:	f0 91 af 01 	lds	r31, 0x01AF
    1e7a:	09 95       	icall
	}

}
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	ff 91       	pop	r31
    1e82:	ef 91       	pop	r30
    1e84:	bf 91       	pop	r27
    1e86:	af 91       	pop	r26
    1e88:	9f 91       	pop	r25
    1e8a:	8f 91       	pop	r24
    1e8c:	7f 91       	pop	r23
    1e8e:	6f 91       	pop	r22
    1e90:	5f 91       	pop	r21
    1e92:	4f 91       	pop	r20
    1e94:	3f 91       	pop	r19
    1e96:	2f 91       	pop	r18
    1e98:	0f 90       	pop	r0
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	0f 90       	pop	r0
    1e9e:	1f 90       	pop	r1
    1ea0:	18 95       	reti

00001ea2 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1ea2:	1f 92       	push	r1
    1ea4:	0f 92       	push	r0
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	0f 92       	push	r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	2f 93       	push	r18
    1eae:	3f 93       	push	r19
    1eb0:	4f 93       	push	r20
    1eb2:	5f 93       	push	r21
    1eb4:	6f 93       	push	r22
    1eb6:	7f 93       	push	r23
    1eb8:	8f 93       	push	r24
    1eba:	9f 93       	push	r25
    1ebc:	af 93       	push	r26
    1ebe:	bf 93       	push	r27
    1ec0:	ef 93       	push	r30
    1ec2:	ff 93       	push	r31
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	cd b7       	in	r28, 0x3d	; 61
    1eca:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI_INT2] != NULL){
    1ecc:	80 91 b0 01 	lds	r24, 0x01B0
    1ed0:	90 91 b1 01 	lds	r25, 0x01B1
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	29 f0       	breq	.+10     	; 0x1ee2 <__vector_3+0x40>
			EXTI[2]();
    1ed8:	e0 91 b0 01 	lds	r30, 0x01B0
    1edc:	f0 91 b1 01 	lds	r31, 0x01B1
    1ee0:	09 95       	icall
	}

}
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	ff 91       	pop	r31
    1ee8:	ef 91       	pop	r30
    1eea:	bf 91       	pop	r27
    1eec:	af 91       	pop	r26
    1eee:	9f 91       	pop	r25
    1ef0:	8f 91       	pop	r24
    1ef2:	7f 91       	pop	r23
    1ef4:	6f 91       	pop	r22
    1ef6:	5f 91       	pop	r21
    1ef8:	4f 91       	pop	r20
    1efa:	3f 91       	pop	r19
    1efc:	2f 91       	pop	r18
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	0f 90       	pop	r0
    1f04:	1f 90       	pop	r1
    1f06:	18 95       	reti

00001f08 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    1f08:	df 93       	push	r29
    1f0a:	cf 93       	push	r28
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    1f10:	ea e3       	ldi	r30, 0x3A	; 58
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	87 e0       	ldi	r24, 0x07	; 7
    1f16:	80 83       	st	Z, r24
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    1f18:	e7 e3       	ldi	r30, 0x37	; 55
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    1f1e:	e4 e3       	ldi	r30, 0x34	; 52
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	10 82       	st	Z, r1
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1f24:	e1 e3       	ldi	r30, 0x31	; 49
    1f26:	f0 e0       	ldi	r31, 0x00	; 0
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    1f2c:	eb e3       	ldi	r30, 0x3B	; 59
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    1f32:	e8 e3       	ldi	r30, 0x38	; 56
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    1f38:	e5 e3       	ldi	r30, 0x35	; 53
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    1f3e:	e2 e3       	ldi	r30, 0x32	; 50
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	10 82       	st	Z, r1

}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	2e 97       	sbiw	r28, 0x0e	; 14
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
    1f5e:	8a 83       	std	Y+2, r24	; 0x02
    1f60:	6b 83       	std	Y+3, r22	; 0x03
    1f62:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1f68:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6a:	84 30       	cpi	r24, 0x04	; 4
    1f6c:	08 f0       	brcs	.+2      	; 0x1f70 <DIO_u8SetPinDirection+0x26>
    1f6e:	0c c1       	rjmp	.+536    	; 0x2188 <DIO_u8SetPinDirection+0x23e>
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	88 30       	cpi	r24, 0x08	; 8
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <DIO_u8SetPinDirection+0x2e>
    1f76:	08 c1       	rjmp	.+528    	; 0x2188 <DIO_u8SetPinDirection+0x23e>
    1f78:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7a:	81 30       	cpi	r24, 0x01	; 1
    1f7c:	21 f0       	breq	.+8      	; 0x1f86 <DIO_u8SetPinDirection+0x3c>
    1f7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f80:	88 23       	and	r24, r24
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <DIO_u8SetPinDirection+0x3c>
    1f84:	01 c1       	rjmp	.+514    	; 0x2188 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1f86:	8a 81       	ldd	r24, Y+2	; 0x02
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	3e 87       	std	Y+14, r19	; 0x0e
    1f8e:	2d 87       	std	Y+13, r18	; 0x0d
    1f90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f94:	81 30       	cpi	r24, 0x01	; 1
    1f96:	91 05       	cpc	r25, r1
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <DIO_u8SetPinDirection+0x52>
    1f9a:	4f c0       	rjmp	.+158    	; 0x203a <DIO_u8SetPinDirection+0xf0>
    1f9c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1f9e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fa0:	22 30       	cpi	r18, 0x02	; 2
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <DIO_u8SetPinDirection+0x66>
    1fa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	71 f0       	breq	.+28     	; 0x1fca <DIO_u8SetPinDirection+0x80>
    1fae:	ed c0       	rjmp	.+474    	; 0x218a <DIO_u8SetPinDirection+0x240>
    1fb0:	2d 85       	ldd	r18, Y+13	; 0x0d
    1fb2:	3e 85       	ldd	r19, Y+14	; 0x0e
    1fb4:	22 30       	cpi	r18, 0x02	; 2
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	09 f4       	brne	.+2      	; 0x1fbc <DIO_u8SetPinDirection+0x72>
    1fba:	77 c0       	rjmp	.+238    	; 0x20aa <DIO_u8SetPinDirection+0x160>
    1fbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fc0:	83 30       	cpi	r24, 0x03	; 3
    1fc2:	91 05       	cpc	r25, r1
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <DIO_u8SetPinDirection+0x7e>
    1fc6:	a9 c0       	rjmp	.+338    	; 0x211a <DIO_u8SetPinDirection+0x1d0>
    1fc8:	e0 c0       	rjmp	.+448    	; 0x218a <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1fca:	8c 81       	ldd	r24, Y+4	; 0x04
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	3c 87       	std	Y+12, r19	; 0x0c
    1fd2:	2b 87       	std	Y+11, r18	; 0x0b
    1fd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1fd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	d1 f0       	breq	.+52     	; 0x2010 <DIO_u8SetPinDirection+0xc6>
    1fdc:	2b 85       	ldd	r18, Y+11	; 0x0b
    1fde:	3c 85       	ldd	r19, Y+12	; 0x0c
    1fe0:	21 30       	cpi	r18, 0x01	; 1
    1fe2:	31 05       	cpc	r19, r1
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <DIO_u8SetPinDirection+0x9e>
    1fe6:	d1 c0       	rjmp	.+418    	; 0x218a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1fe8:	aa e3       	ldi	r26, 0x3A	; 58
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	ea e3       	ldi	r30, 0x3A	; 58
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	48 2f       	mov	r20, r24
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	02 2e       	mov	r0, r18
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <DIO_u8SetPinDirection+0xbc>
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	0a 94       	dec	r0
    2008:	e2 f7       	brpl	.-8      	; 0x2002 <DIO_u8SetPinDirection+0xb8>
    200a:	84 2b       	or	r24, r20
    200c:	8c 93       	st	X, r24
    200e:	bd c0       	rjmp	.+378    	; 0x218a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    2010:	aa e3       	ldi	r26, 0x3A	; 58
    2012:	b0 e0       	ldi	r27, 0x00	; 0
    2014:	ea e3       	ldi	r30, 0x3A	; 58
    2016:	f0 e0       	ldi	r31, 0x00	; 0
    2018:	80 81       	ld	r24, Z
    201a:	48 2f       	mov	r20, r24
    201c:	8b 81       	ldd	r24, Y+3	; 0x03
    201e:	28 2f       	mov	r18, r24
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	81 e0       	ldi	r24, 0x01	; 1
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	02 2e       	mov	r0, r18
    2028:	02 c0       	rjmp	.+4      	; 0x202e <DIO_u8SetPinDirection+0xe4>
    202a:	88 0f       	add	r24, r24
    202c:	99 1f       	adc	r25, r25
    202e:	0a 94       	dec	r0
    2030:	e2 f7       	brpl	.-8      	; 0x202a <DIO_u8SetPinDirection+0xe0>
    2032:	80 95       	com	r24
    2034:	84 23       	and	r24, r20
    2036:	8c 93       	st	X, r24
    2038:	a8 c0       	rjmp	.+336    	; 0x218a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	3a 87       	std	Y+10, r19	; 0x0a
    2042:	29 87       	std	Y+9, r18	; 0x09
    2044:	89 85       	ldd	r24, Y+9	; 0x09
    2046:	9a 85       	ldd	r25, Y+10	; 0x0a
    2048:	00 97       	sbiw	r24, 0x00	; 0
    204a:	d1 f0       	breq	.+52     	; 0x2080 <DIO_u8SetPinDirection+0x136>
    204c:	29 85       	ldd	r18, Y+9	; 0x09
    204e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2050:	21 30       	cpi	r18, 0x01	; 1
    2052:	31 05       	cpc	r19, r1
    2054:	09 f0       	breq	.+2      	; 0x2058 <DIO_u8SetPinDirection+0x10e>
    2056:	99 c0       	rjmp	.+306    	; 0x218a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    2058:	a7 e3       	ldi	r26, 0x37	; 55
    205a:	b0 e0       	ldi	r27, 0x00	; 0
    205c:	e7 e3       	ldi	r30, 0x37	; 55
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	80 81       	ld	r24, Z
    2062:	48 2f       	mov	r20, r24
    2064:	8b 81       	ldd	r24, Y+3	; 0x03
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	02 2e       	mov	r0, r18
    2070:	02 c0       	rjmp	.+4      	; 0x2076 <DIO_u8SetPinDirection+0x12c>
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	0a 94       	dec	r0
    2078:	e2 f7       	brpl	.-8      	; 0x2072 <DIO_u8SetPinDirection+0x128>
    207a:	84 2b       	or	r24, r20
    207c:	8c 93       	st	X, r24
    207e:	85 c0       	rjmp	.+266    	; 0x218a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    2080:	a7 e3       	ldi	r26, 0x37	; 55
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e7 e3       	ldi	r30, 0x37	; 55
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	48 2f       	mov	r20, r24
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	02 2e       	mov	r0, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <DIO_u8SetPinDirection+0x154>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	0a 94       	dec	r0
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <DIO_u8SetPinDirection+0x150>
    20a2:	80 95       	com	r24
    20a4:	84 23       	and	r24, r20
    20a6:	8c 93       	st	X, r24
    20a8:	70 c0       	rjmp	.+224    	; 0x218a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    20aa:	8c 81       	ldd	r24, Y+4	; 0x04
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	38 87       	std	Y+8, r19	; 0x08
    20b2:	2f 83       	std	Y+7, r18	; 0x07
    20b4:	8f 81       	ldd	r24, Y+7	; 0x07
    20b6:	98 85       	ldd	r25, Y+8	; 0x08
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	d1 f0       	breq	.+52     	; 0x20f0 <DIO_u8SetPinDirection+0x1a6>
    20bc:	2f 81       	ldd	r18, Y+7	; 0x07
    20be:	38 85       	ldd	r19, Y+8	; 0x08
    20c0:	21 30       	cpi	r18, 0x01	; 1
    20c2:	31 05       	cpc	r19, r1
    20c4:	09 f0       	breq	.+2      	; 0x20c8 <DIO_u8SetPinDirection+0x17e>
    20c6:	61 c0       	rjmp	.+194    	; 0x218a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    20c8:	a4 e3       	ldi	r26, 0x34	; 52
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	e4 e3       	ldi	r30, 0x34	; 52
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	48 2f       	mov	r20, r24
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	28 2f       	mov	r18, r24
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	02 2e       	mov	r0, r18
    20e0:	02 c0       	rjmp	.+4      	; 0x20e6 <DIO_u8SetPinDirection+0x19c>
    20e2:	88 0f       	add	r24, r24
    20e4:	99 1f       	adc	r25, r25
    20e6:	0a 94       	dec	r0
    20e8:	e2 f7       	brpl	.-8      	; 0x20e2 <DIO_u8SetPinDirection+0x198>
    20ea:	84 2b       	or	r24, r20
    20ec:	8c 93       	st	X, r24
    20ee:	4d c0       	rjmp	.+154    	; 0x218a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    20f0:	a4 e3       	ldi	r26, 0x34	; 52
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e4 e3       	ldi	r30, 0x34	; 52
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	48 2f       	mov	r20, r24
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	02 2e       	mov	r0, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <DIO_u8SetPinDirection+0x1c4>
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	0a 94       	dec	r0
    2110:	e2 f7       	brpl	.-8      	; 0x210a <DIO_u8SetPinDirection+0x1c0>
    2112:	80 95       	com	r24
    2114:	84 23       	and	r24, r20
    2116:	8c 93       	st	X, r24
    2118:	38 c0       	rjmp	.+112    	; 0x218a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    211a:	8c 81       	ldd	r24, Y+4	; 0x04
    211c:	28 2f       	mov	r18, r24
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	3e 83       	std	Y+6, r19	; 0x06
    2122:	2d 83       	std	Y+5, r18	; 0x05
    2124:	8d 81       	ldd	r24, Y+5	; 0x05
    2126:	9e 81       	ldd	r25, Y+6	; 0x06
    2128:	00 97       	sbiw	r24, 0x00	; 0
    212a:	c9 f0       	breq	.+50     	; 0x215e <DIO_u8SetPinDirection+0x214>
    212c:	2d 81       	ldd	r18, Y+5	; 0x05
    212e:	3e 81       	ldd	r19, Y+6	; 0x06
    2130:	21 30       	cpi	r18, 0x01	; 1
    2132:	31 05       	cpc	r19, r1
    2134:	51 f5       	brne	.+84     	; 0x218a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    2136:	a1 e3       	ldi	r26, 0x31	; 49
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e1 e3       	ldi	r30, 0x31	; 49
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	48 2f       	mov	r20, r24
    2142:	8b 81       	ldd	r24, Y+3	; 0x03
    2144:	28 2f       	mov	r18, r24
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	02 2e       	mov	r0, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_u8SetPinDirection+0x20a>
    2150:	88 0f       	add	r24, r24
    2152:	99 1f       	adc	r25, r25
    2154:	0a 94       	dec	r0
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_u8SetPinDirection+0x206>
    2158:	84 2b       	or	r24, r20
    215a:	8c 93       	st	X, r24
    215c:	16 c0       	rjmp	.+44     	; 0x218a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    215e:	a1 e3       	ldi	r26, 0x31	; 49
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e1 e3       	ldi	r30, 0x31	; 49
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	48 2f       	mov	r20, r24
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	28 2f       	mov	r18, r24
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	81 e0       	ldi	r24, 0x01	; 1
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	02 2e       	mov	r0, r18
    2176:	02 c0       	rjmp	.+4      	; 0x217c <DIO_u8SetPinDirection+0x232>
    2178:	88 0f       	add	r24, r24
    217a:	99 1f       	adc	r25, r25
    217c:	0a 94       	dec	r0
    217e:	e2 f7       	brpl	.-8      	; 0x2178 <DIO_u8SetPinDirection+0x22e>
    2180:	80 95       	com	r24
    2182:	84 23       	and	r24, r20
    2184:	8c 93       	st	X, r24
    2186:	01 c0       	rjmp	.+2      	; 0x218a <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2188:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    218a:	89 81       	ldd	r24, Y+1	; 0x01
}
    218c:	2e 96       	adiw	r28, 0x0e	; 14
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	2f 97       	sbiw	r28, 0x0f	; 15
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	8b 83       	std	Y+3, r24	; 0x03
    21b4:	6c 83       	std	Y+4, r22	; 0x04
    21b6:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	84 30       	cpi	r24, 0x04	; 4
    21c0:	08 f0       	brcs	.+2      	; 0x21c4 <DIO_u8SetPinValue+0x26>
    21c2:	13 c1       	rjmp	.+550    	; 0x23ea <DIO_u8SetPinValue+0x24c>
    21c4:	8c 81       	ldd	r24, Y+4	; 0x04
    21c6:	88 30       	cpi	r24, 0x08	; 8
    21c8:	08 f0       	brcs	.+2      	; 0x21cc <DIO_u8SetPinValue+0x2e>
    21ca:	0f c1       	rjmp	.+542    	; 0x23ea <DIO_u8SetPinValue+0x24c>
    21cc:	8d 81       	ldd	r24, Y+5	; 0x05
    21ce:	88 23       	and	r24, r24
    21d0:	21 f0       	breq	.+8      	; 0x21da <DIO_u8SetPinValue+0x3c>
    21d2:	8d 81       	ldd	r24, Y+5	; 0x05
    21d4:	81 30       	cpi	r24, 0x01	; 1
    21d6:	09 f0       	breq	.+2      	; 0x21da <DIO_u8SetPinValue+0x3c>
    21d8:	08 c1       	rjmp	.+528    	; 0x23ea <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	28 2f       	mov	r18, r24
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	3f 87       	std	Y+15, r19	; 0x0f
    21e2:	2e 87       	std	Y+14, r18	; 0x0e
    21e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    21e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	91 05       	cpc	r25, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <DIO_u8SetPinValue+0x52>
    21ee:	50 c0       	rjmp	.+160    	; 0x2290 <DIO_u8SetPinValue+0xf2>
    21f0:	2e 85       	ldd	r18, Y+14	; 0x0e
    21f2:	3f 85       	ldd	r19, Y+15	; 0x0f
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	2c f4       	brge	.+10     	; 0x2204 <DIO_u8SetPinValue+0x66>
    21fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    21fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    21fe:	00 97       	sbiw	r24, 0x00	; 0
    2200:	71 f0       	breq	.+28     	; 0x221e <DIO_u8SetPinValue+0x80>
    2202:	f4 c0       	rjmp	.+488    	; 0x23ec <DIO_u8SetPinValue+0x24e>
    2204:	2e 85       	ldd	r18, Y+14	; 0x0e
    2206:	3f 85       	ldd	r19, Y+15	; 0x0f
    2208:	22 30       	cpi	r18, 0x02	; 2
    220a:	31 05       	cpc	r19, r1
    220c:	09 f4       	brne	.+2      	; 0x2210 <DIO_u8SetPinValue+0x72>
    220e:	79 c0       	rjmp	.+242    	; 0x2302 <DIO_u8SetPinValue+0x164>
    2210:	8e 85       	ldd	r24, Y+14	; 0x0e
    2212:	9f 85       	ldd	r25, Y+15	; 0x0f
    2214:	83 30       	cpi	r24, 0x03	; 3
    2216:	91 05       	cpc	r25, r1
    2218:	09 f4       	brne	.+2      	; 0x221c <DIO_u8SetPinValue+0x7e>
    221a:	ad c0       	rjmp	.+346    	; 0x2376 <DIO_u8SetPinValue+0x1d8>
    221c:	e7 c0       	rjmp	.+462    	; 0x23ec <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    221e:	8d 81       	ldd	r24, Y+5	; 0x05
    2220:	28 2f       	mov	r18, r24
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	3d 87       	std	Y+13, r19	; 0x0d
    2226:	2c 87       	std	Y+12, r18	; 0x0c
    2228:	8c 85       	ldd	r24, Y+12	; 0x0c
    222a:	9d 85       	ldd	r25, Y+13	; 0x0d
    222c:	00 97       	sbiw	r24, 0x00	; 0
    222e:	c9 f0       	breq	.+50     	; 0x2262 <DIO_u8SetPinValue+0xc4>
    2230:	2c 85       	ldd	r18, Y+12	; 0x0c
    2232:	3d 85       	ldd	r19, Y+13	; 0x0d
    2234:	21 30       	cpi	r18, 0x01	; 1
    2236:	31 05       	cpc	r19, r1
    2238:	49 f5       	brne	.+82     	; 0x228c <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    223a:	ab e3       	ldi	r26, 0x3B	; 59
    223c:	b0 e0       	ldi	r27, 0x00	; 0
    223e:	eb e3       	ldi	r30, 0x3B	; 59
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	80 81       	ld	r24, Z
    2244:	48 2f       	mov	r20, r24
    2246:	8c 81       	ldd	r24, Y+4	; 0x04
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	02 2e       	mov	r0, r18
    2252:	02 c0       	rjmp	.+4      	; 0x2258 <DIO_u8SetPinValue+0xba>
    2254:	88 0f       	add	r24, r24
    2256:	99 1f       	adc	r25, r25
    2258:	0a 94       	dec	r0
    225a:	e2 f7       	brpl	.-8      	; 0x2254 <DIO_u8SetPinValue+0xb6>
    225c:	84 2b       	or	r24, r20
    225e:	8c 93       	st	X, r24
    2260:	c5 c0       	rjmp	.+394    	; 0x23ec <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    2262:	ab e3       	ldi	r26, 0x3B	; 59
    2264:	b0 e0       	ldi	r27, 0x00	; 0
    2266:	eb e3       	ldi	r30, 0x3B	; 59
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	80 81       	ld	r24, Z
    226c:	48 2f       	mov	r20, r24
    226e:	8c 81       	ldd	r24, Y+4	; 0x04
    2270:	28 2f       	mov	r18, r24
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	02 2e       	mov	r0, r18
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <DIO_u8SetPinValue+0xe2>
    227c:	88 0f       	add	r24, r24
    227e:	99 1f       	adc	r25, r25
    2280:	0a 94       	dec	r0
    2282:	e2 f7       	brpl	.-8      	; 0x227c <DIO_u8SetPinValue+0xde>
    2284:	80 95       	com	r24
    2286:	84 23       	and	r24, r20
    2288:	8c 93       	st	X, r24
    228a:	b0 c0       	rjmp	.+352    	; 0x23ec <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    228c:	1a 82       	std	Y+2, r1	; 0x02
    228e:	ae c0       	rjmp	.+348    	; 0x23ec <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3b 87       	std	Y+11, r19	; 0x0b
    2298:	2a 87       	std	Y+10, r18	; 0x0a
    229a:	8a 85       	ldd	r24, Y+10	; 0x0a
    229c:	9b 85       	ldd	r25, Y+11	; 0x0b
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	c9 f0       	breq	.+50     	; 0x22d4 <DIO_u8SetPinValue+0x136>
    22a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    22a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    22a6:	21 30       	cpi	r18, 0x01	; 1
    22a8:	31 05       	cpc	r19, r1
    22aa:	49 f5       	brne	.+82     	; 0x22fe <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    22ac:	a8 e3       	ldi	r26, 0x38	; 56
    22ae:	b0 e0       	ldi	r27, 0x00	; 0
    22b0:	e8 e3       	ldi	r30, 0x38	; 56
    22b2:	f0 e0       	ldi	r31, 0x00	; 0
    22b4:	80 81       	ld	r24, Z
    22b6:	48 2f       	mov	r20, r24
    22b8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ba:	28 2f       	mov	r18, r24
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	02 2e       	mov	r0, r18
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <DIO_u8SetPinValue+0x12c>
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	0a 94       	dec	r0
    22cc:	e2 f7       	brpl	.-8      	; 0x22c6 <DIO_u8SetPinValue+0x128>
    22ce:	84 2b       	or	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	8c c0       	rjmp	.+280    	; 0x23ec <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    22d4:	a8 e3       	ldi	r26, 0x38	; 56
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e8 e3       	ldi	r30, 0x38	; 56
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8c 81       	ldd	r24, Y+4	; 0x04
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <DIO_u8SetPinValue+0x154>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <DIO_u8SetPinValue+0x150>
    22f6:	80 95       	com	r24
    22f8:	84 23       	and	r24, r20
    22fa:	8c 93       	st	X, r24
    22fc:	77 c0       	rjmp	.+238    	; 0x23ec <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    22fe:	1a 82       	std	Y+2, r1	; 0x02
    2300:	75 c0       	rjmp	.+234    	; 0x23ec <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    2302:	8d 81       	ldd	r24, Y+5	; 0x05
    2304:	28 2f       	mov	r18, r24
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	39 87       	std	Y+9, r19	; 0x09
    230a:	28 87       	std	Y+8, r18	; 0x08
    230c:	88 85       	ldd	r24, Y+8	; 0x08
    230e:	99 85       	ldd	r25, Y+9	; 0x09
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	31 f0       	breq	.+12     	; 0x2320 <DIO_u8SetPinValue+0x182>
    2314:	28 85       	ldd	r18, Y+8	; 0x08
    2316:	39 85       	ldd	r19, Y+9	; 0x09
    2318:	21 30       	cpi	r18, 0x01	; 1
    231a:	31 05       	cpc	r19, r1
    231c:	b1 f0       	breq	.+44     	; 0x234a <DIO_u8SetPinValue+0x1ac>
    231e:	29 c0       	rjmp	.+82     	; 0x2372 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2320:	a5 e3       	ldi	r26, 0x35	; 53
    2322:	b0 e0       	ldi	r27, 0x00	; 0
    2324:	e5 e3       	ldi	r30, 0x35	; 53
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	80 81       	ld	r24, Z
    232a:	48 2f       	mov	r20, r24
    232c:	8c 81       	ldd	r24, Y+4	; 0x04
    232e:	28 2f       	mov	r18, r24
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	02 2e       	mov	r0, r18
    2338:	02 c0       	rjmp	.+4      	; 0x233e <DIO_u8SetPinValue+0x1a0>
    233a:	88 0f       	add	r24, r24
    233c:	99 1f       	adc	r25, r25
    233e:	0a 94       	dec	r0
    2340:	e2 f7       	brpl	.-8      	; 0x233a <DIO_u8SetPinValue+0x19c>
    2342:	80 95       	com	r24
    2344:	84 23       	and	r24, r20
    2346:	8c 93       	st	X, r24
    2348:	51 c0       	rjmp	.+162    	; 0x23ec <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    234a:	a5 e3       	ldi	r26, 0x35	; 53
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	e5 e3       	ldi	r30, 0x35	; 53
    2350:	f0 e0       	ldi	r31, 0x00	; 0
    2352:	80 81       	ld	r24, Z
    2354:	48 2f       	mov	r20, r24
    2356:	8c 81       	ldd	r24, Y+4	; 0x04
    2358:	28 2f       	mov	r18, r24
    235a:	30 e0       	ldi	r19, 0x00	; 0
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	02 2e       	mov	r0, r18
    2362:	02 c0       	rjmp	.+4      	; 0x2368 <DIO_u8SetPinValue+0x1ca>
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	0a 94       	dec	r0
    236a:	e2 f7       	brpl	.-8      	; 0x2364 <DIO_u8SetPinValue+0x1c6>
    236c:	84 2b       	or	r24, r20
    236e:	8c 93       	st	X, r24
    2370:	3d c0       	rjmp	.+122    	; 0x23ec <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    2372:	1a 82       	std	Y+2, r1	; 0x02
    2374:	3b c0       	rjmp	.+118    	; 0x23ec <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    2376:	8d 81       	ldd	r24, Y+5	; 0x05
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	3f 83       	std	Y+7, r19	; 0x07
    237e:	2e 83       	std	Y+6, r18	; 0x06
    2380:	8e 81       	ldd	r24, Y+6	; 0x06
    2382:	9f 81       	ldd	r25, Y+7	; 0x07
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	31 f0       	breq	.+12     	; 0x2394 <DIO_u8SetPinValue+0x1f6>
    2388:	2e 81       	ldd	r18, Y+6	; 0x06
    238a:	3f 81       	ldd	r19, Y+7	; 0x07
    238c:	21 30       	cpi	r18, 0x01	; 1
    238e:	31 05       	cpc	r19, r1
    2390:	b1 f0       	breq	.+44     	; 0x23be <DIO_u8SetPinValue+0x220>
    2392:	29 c0       	rjmp	.+82     	; 0x23e6 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    2394:	a5 e3       	ldi	r26, 0x35	; 53
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e5 e3       	ldi	r30, 0x35	; 53
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	48 2f       	mov	r20, r24
    23a0:	8c 81       	ldd	r24, Y+4	; 0x04
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	02 2e       	mov	r0, r18
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <DIO_u8SetPinValue+0x214>
    23ae:	88 0f       	add	r24, r24
    23b0:	99 1f       	adc	r25, r25
    23b2:	0a 94       	dec	r0
    23b4:	e2 f7       	brpl	.-8      	; 0x23ae <DIO_u8SetPinValue+0x210>
    23b6:	80 95       	com	r24
    23b8:	84 23       	and	r24, r20
    23ba:	8c 93       	st	X, r24
    23bc:	17 c0       	rjmp	.+46     	; 0x23ec <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    23be:	a2 e3       	ldi	r26, 0x32	; 50
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e2 e3       	ldi	r30, 0x32	; 50
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	48 2f       	mov	r20, r24
    23ca:	8c 81       	ldd	r24, Y+4	; 0x04
    23cc:	28 2f       	mov	r18, r24
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	02 2e       	mov	r0, r18
    23d6:	02 c0       	rjmp	.+4      	; 0x23dc <DIO_u8SetPinValue+0x23e>
    23d8:	88 0f       	add	r24, r24
    23da:	99 1f       	adc	r25, r25
    23dc:	0a 94       	dec	r0
    23de:	e2 f7       	brpl	.-8      	; 0x23d8 <DIO_u8SetPinValue+0x23a>
    23e0:	84 2b       	or	r24, r20
    23e2:	8c 93       	st	X, r24
    23e4:	03 c0       	rjmp	.+6      	; 0x23ec <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    23e6:	1a 82       	std	Y+2, r1	; 0x02
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    23ea:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    23ec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    23ee:	2f 96       	adiw	r28, 0x0f	; 15
    23f0:	0f b6       	in	r0, 0x3f	; 63
    23f2:	f8 94       	cli
    23f4:	de bf       	out	0x3e, r29	; 62
    23f6:	0f be       	out	0x3f, r0	; 63
    23f8:	cd bf       	out	0x3d, r28	; 61
    23fa:	cf 91       	pop	r28
    23fc:	df 91       	pop	r29
    23fe:	08 95       	ret

00002400 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    2400:	df 93       	push	r29
    2402:	cf 93       	push	r28
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	28 97       	sbiw	r28, 0x08	; 8
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	f8 94       	cli
    240e:	de bf       	out	0x3e, r29	; 62
    2410:	0f be       	out	0x3f, r0	; 63
    2412:	cd bf       	out	0x3d, r28	; 61
    2414:	8b 83       	std	Y+3, r24	; 0x03
    2416:	6c 83       	std	Y+4, r22	; 0x04
    2418:	5e 83       	std	Y+6, r21	; 0x06
    241a:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	84 30       	cpi	r24, 0x04	; 4
    2424:	08 f0       	brcs	.+2      	; 0x2428 <DIO_u8GetPinValue+0x28>
    2426:	9f c0       	rjmp	.+318    	; 0x2566 <DIO_u8GetPinValue+0x166>
    2428:	8c 81       	ldd	r24, Y+4	; 0x04
    242a:	88 30       	cpi	r24, 0x08	; 8
    242c:	08 f0       	brcs	.+2      	; 0x2430 <DIO_u8GetPinValue+0x30>
    242e:	9b c0       	rjmp	.+310    	; 0x2566 <DIO_u8GetPinValue+0x166>
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	09 f4       	brne	.+2      	; 0x243a <DIO_u8GetPinValue+0x3a>
    2438:	96 c0       	rjmp	.+300    	; 0x2566 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	28 2f       	mov	r18, r24
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	38 87       	std	Y+8, r19	; 0x08
    2442:	2f 83       	std	Y+7, r18	; 0x07
    2444:	4f 81       	ldd	r20, Y+7	; 0x07
    2446:	58 85       	ldd	r21, Y+8	; 0x08
    2448:	41 30       	cpi	r20, 0x01	; 1
    244a:	51 05       	cpc	r21, r1
    244c:	a9 f1       	breq	.+106    	; 0x24b8 <DIO_u8GetPinValue+0xb8>
    244e:	8f 81       	ldd	r24, Y+7	; 0x07
    2450:	98 85       	ldd	r25, Y+8	; 0x08
    2452:	82 30       	cpi	r24, 0x02	; 2
    2454:	91 05       	cpc	r25, r1
    2456:	34 f4       	brge	.+12     	; 0x2464 <DIO_u8GetPinValue+0x64>
    2458:	2f 81       	ldd	r18, Y+7	; 0x07
    245a:	38 85       	ldd	r19, Y+8	; 0x08
    245c:	21 15       	cp	r18, r1
    245e:	31 05       	cpc	r19, r1
    2460:	71 f0       	breq	.+28     	; 0x247e <DIO_u8GetPinValue+0x7e>
    2462:	82 c0       	rjmp	.+260    	; 0x2568 <DIO_u8GetPinValue+0x168>
    2464:	4f 81       	ldd	r20, Y+7	; 0x07
    2466:	58 85       	ldd	r21, Y+8	; 0x08
    2468:	42 30       	cpi	r20, 0x02	; 2
    246a:	51 05       	cpc	r21, r1
    246c:	09 f4       	brne	.+2      	; 0x2470 <DIO_u8GetPinValue+0x70>
    246e:	41 c0       	rjmp	.+130    	; 0x24f2 <DIO_u8GetPinValue+0xf2>
    2470:	8f 81       	ldd	r24, Y+7	; 0x07
    2472:	98 85       	ldd	r25, Y+8	; 0x08
    2474:	83 30       	cpi	r24, 0x03	; 3
    2476:	91 05       	cpc	r25, r1
    2478:	09 f4       	brne	.+2      	; 0x247c <DIO_u8GetPinValue+0x7c>
    247a:	58 c0       	rjmp	.+176    	; 0x252c <DIO_u8GetPinValue+0x12c>
    247c:	75 c0       	rjmp	.+234    	; 0x2568 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    247e:	e9 e3       	ldi	r30, 0x39	; 57
    2480:	f0 e0       	ldi	r31, 0x00	; 0
    2482:	80 81       	ld	r24, Z
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	8c 81       	ldd	r24, Y+4	; 0x04
    248a:	88 2f       	mov	r24, r24
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	a9 01       	movw	r20, r18
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <DIO_u8GetPinValue+0x96>
    2492:	55 95       	asr	r21
    2494:	47 95       	ror	r20
    2496:	8a 95       	dec	r24
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <DIO_u8GetPinValue+0x92>
    249a:	ca 01       	movw	r24, r20
    249c:	81 70       	andi	r24, 0x01	; 1
    249e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	88 23       	and	r24, r24
    24a4:	21 f4       	brne	.+8      	; 0x24ae <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    24a6:	ed 81       	ldd	r30, Y+5	; 0x05
    24a8:	fe 81       	ldd	r31, Y+6	; 0x06
    24aa:	10 82       	st	Z, r1
    24ac:	5d c0       	rjmp	.+186    	; 0x2568 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    24ae:	ed 81       	ldd	r30, Y+5	; 0x05
    24b0:	fe 81       	ldd	r31, Y+6	; 0x06
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	80 83       	st	Z, r24
    24b6:	58 c0       	rjmp	.+176    	; 0x2568 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    24b8:	e6 e3       	ldi	r30, 0x36	; 54
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	80 81       	ld	r24, Z
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	8c 81       	ldd	r24, Y+4	; 0x04
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	a9 01       	movw	r20, r18
    24ca:	02 c0       	rjmp	.+4      	; 0x24d0 <DIO_u8GetPinValue+0xd0>
    24cc:	55 95       	asr	r21
    24ce:	47 95       	ror	r20
    24d0:	8a 95       	dec	r24
    24d2:	e2 f7       	brpl	.-8      	; 0x24cc <DIO_u8GetPinValue+0xcc>
    24d4:	ca 01       	movw	r24, r20
    24d6:	81 70       	andi	r24, 0x01	; 1
    24d8:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	88 23       	and	r24, r24
    24de:	21 f4       	brne	.+8      	; 0x24e8 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    24e0:	ed 81       	ldd	r30, Y+5	; 0x05
    24e2:	fe 81       	ldd	r31, Y+6	; 0x06
    24e4:	10 82       	st	Z, r1
    24e6:	40 c0       	rjmp	.+128    	; 0x2568 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    24e8:	ed 81       	ldd	r30, Y+5	; 0x05
    24ea:	fe 81       	ldd	r31, Y+6	; 0x06
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	80 83       	st	Z, r24
    24f0:	3b c0       	rjmp	.+118    	; 0x2568 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    24f2:	e3 e3       	ldi	r30, 0x33	; 51
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	28 2f       	mov	r18, r24
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	8c 81       	ldd	r24, Y+4	; 0x04
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	a9 01       	movw	r20, r18
    2504:	02 c0       	rjmp	.+4      	; 0x250a <DIO_u8GetPinValue+0x10a>
    2506:	55 95       	asr	r21
    2508:	47 95       	ror	r20
    250a:	8a 95       	dec	r24
    250c:	e2 f7       	brpl	.-8      	; 0x2506 <DIO_u8GetPinValue+0x106>
    250e:	ca 01       	movw	r24, r20
    2510:	81 70       	andi	r24, 0x01	; 1
    2512:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	88 23       	and	r24, r24
    2518:	21 f4       	brne	.+8      	; 0x2522 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    251a:	ed 81       	ldd	r30, Y+5	; 0x05
    251c:	fe 81       	ldd	r31, Y+6	; 0x06
    251e:	10 82       	st	Z, r1
    2520:	23 c0       	rjmp	.+70     	; 0x2568 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    2522:	ed 81       	ldd	r30, Y+5	; 0x05
    2524:	fe 81       	ldd	r31, Y+6	; 0x06
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	80 83       	st	Z, r24
    252a:	1e c0       	rjmp	.+60     	; 0x2568 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    252c:	e0 e3       	ldi	r30, 0x30	; 48
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	28 2f       	mov	r18, r24
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	88 2f       	mov	r24, r24
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	a9 01       	movw	r20, r18
    253e:	02 c0       	rjmp	.+4      	; 0x2544 <DIO_u8GetPinValue+0x144>
    2540:	55 95       	asr	r21
    2542:	47 95       	ror	r20
    2544:	8a 95       	dec	r24
    2546:	e2 f7       	brpl	.-8      	; 0x2540 <DIO_u8GetPinValue+0x140>
    2548:	ca 01       	movw	r24, r20
    254a:	81 70       	andi	r24, 0x01	; 1
    254c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	88 23       	and	r24, r24
    2552:	21 f4       	brne	.+8      	; 0x255c <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2554:	ed 81       	ldd	r30, Y+5	; 0x05
    2556:	fe 81       	ldd	r31, Y+6	; 0x06
    2558:	10 82       	st	Z, r1
    255a:	06 c0       	rjmp	.+12     	; 0x2568 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    255c:	ed 81       	ldd	r30, Y+5	; 0x05
    255e:	fe 81       	ldd	r31, Y+6	; 0x06
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	80 83       	st	Z, r24
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2566:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    2568:	8a 81       	ldd	r24, Y+2	; 0x02
}
    256a:	28 96       	adiw	r28, 0x08	; 8
    256c:	0f b6       	in	r0, 0x3f	; 63
    256e:	f8 94       	cli
    2570:	de bf       	out	0x3e, r29	; 62
    2572:	0f be       	out	0x3f, r0	; 63
    2574:	cd bf       	out	0x3d, r28	; 61
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	08 95       	ret

0000257c <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	00 d0       	rcall	.+0      	; 0x2582 <DIO_getPinValueWithoutPointer+0x6>
    2582:	00 d0       	rcall	.+0      	; 0x2584 <DIO_getPinValueWithoutPointer+0x8>
    2584:	0f 92       	push	r0
    2586:	cd b7       	in	r28, 0x3d	; 61
    2588:	de b7       	in	r29, 0x3e	; 62
    258a:	8a 83       	std	Y+2, r24	; 0x02
    258c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    258e:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2590:	8b 81       	ldd	r24, Y+3	; 0x03
    2592:	88 30       	cpi	r24, 0x08	; 8
    2594:	08 f0       	brcs	.+2      	; 0x2598 <DIO_getPinValueWithoutPointer+0x1c>
    2596:	6b c0       	rjmp	.+214    	; 0x266e <DIO_getPinValueWithoutPointer+0xf2>
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	84 30       	cpi	r24, 0x04	; 4
    259c:	08 f0       	brcs	.+2      	; 0x25a0 <DIO_getPinValueWithoutPointer+0x24>
    259e:	67 c0       	rjmp	.+206    	; 0x266e <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    25a0:	8a 81       	ldd	r24, Y+2	; 0x02
    25a2:	28 2f       	mov	r18, r24
    25a4:	30 e0       	ldi	r19, 0x00	; 0
    25a6:	3d 83       	std	Y+5, r19	; 0x05
    25a8:	2c 83       	std	Y+4, r18	; 0x04
    25aa:	4c 81       	ldd	r20, Y+4	; 0x04
    25ac:	5d 81       	ldd	r21, Y+5	; 0x05
    25ae:	41 30       	cpi	r20, 0x01	; 1
    25b0:	51 05       	cpc	r21, r1
    25b2:	41 f1       	breq	.+80     	; 0x2604 <DIO_getPinValueWithoutPointer+0x88>
    25b4:	8c 81       	ldd	r24, Y+4	; 0x04
    25b6:	9d 81       	ldd	r25, Y+5	; 0x05
    25b8:	82 30       	cpi	r24, 0x02	; 2
    25ba:	91 05       	cpc	r25, r1
    25bc:	34 f4       	brge	.+12     	; 0x25ca <DIO_getPinValueWithoutPointer+0x4e>
    25be:	2c 81       	ldd	r18, Y+4	; 0x04
    25c0:	3d 81       	ldd	r19, Y+5	; 0x05
    25c2:	21 15       	cp	r18, r1
    25c4:	31 05       	cpc	r19, r1
    25c6:	61 f0       	breq	.+24     	; 0x25e0 <DIO_getPinValueWithoutPointer+0x64>
    25c8:	52 c0       	rjmp	.+164    	; 0x266e <DIO_getPinValueWithoutPointer+0xf2>
    25ca:	4c 81       	ldd	r20, Y+4	; 0x04
    25cc:	5d 81       	ldd	r21, Y+5	; 0x05
    25ce:	42 30       	cpi	r20, 0x02	; 2
    25d0:	51 05       	cpc	r21, r1
    25d2:	51 f1       	breq	.+84     	; 0x2628 <DIO_getPinValueWithoutPointer+0xac>
    25d4:	8c 81       	ldd	r24, Y+4	; 0x04
    25d6:	9d 81       	ldd	r25, Y+5	; 0x05
    25d8:	83 30       	cpi	r24, 0x03	; 3
    25da:	91 05       	cpc	r25, r1
    25dc:	b9 f1       	breq	.+110    	; 0x264c <DIO_getPinValueWithoutPointer+0xd0>
    25de:	47 c0       	rjmp	.+142    	; 0x266e <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    25e0:	e9 e3       	ldi	r30, 0x39	; 57
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	88 2f       	mov	r24, r24
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	a9 01       	movw	r20, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <DIO_getPinValueWithoutPointer+0x7c>
    25f4:	55 95       	asr	r21
    25f6:	47 95       	ror	r20
    25f8:	8a 95       	dec	r24
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <DIO_getPinValueWithoutPointer+0x78>
    25fc:	ca 01       	movw	r24, r20
    25fe:	81 70       	andi	r24, 0x01	; 1
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	35 c0       	rjmp	.+106    	; 0x266e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    2604:	e6 e3       	ldi	r30, 0x36	; 54
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	28 2f       	mov	r18, r24
    260c:	30 e0       	ldi	r19, 0x00	; 0
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	88 2f       	mov	r24, r24
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	a9 01       	movw	r20, r18
    2616:	02 c0       	rjmp	.+4      	; 0x261c <DIO_getPinValueWithoutPointer+0xa0>
    2618:	55 95       	asr	r21
    261a:	47 95       	ror	r20
    261c:	8a 95       	dec	r24
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <DIO_getPinValueWithoutPointer+0x9c>
    2620:	ca 01       	movw	r24, r20
    2622:	81 70       	andi	r24, 0x01	; 1
    2624:	89 83       	std	Y+1, r24	; 0x01
    2626:	23 c0       	rjmp	.+70     	; 0x266e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    2628:	e3 e3       	ldi	r30, 0x33	; 51
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	28 2f       	mov	r18, r24
    2630:	30 e0       	ldi	r19, 0x00	; 0
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a9 01       	movw	r20, r18
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <DIO_getPinValueWithoutPointer+0xc4>
    263c:	55 95       	asr	r21
    263e:	47 95       	ror	r20
    2640:	8a 95       	dec	r24
    2642:	e2 f7       	brpl	.-8      	; 0x263c <DIO_getPinValueWithoutPointer+0xc0>
    2644:	ca 01       	movw	r24, r20
    2646:	81 70       	andi	r24, 0x01	; 1
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	11 c0       	rjmp	.+34     	; 0x266e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    264c:	e0 e3       	ldi	r30, 0x30	; 48
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	80 81       	ld	r24, Z
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8b 81       	ldd	r24, Y+3	; 0x03
    2658:	88 2f       	mov	r24, r24
    265a:	90 e0       	ldi	r25, 0x00	; 0
    265c:	a9 01       	movw	r20, r18
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <DIO_getPinValueWithoutPointer+0xe8>
    2660:	55 95       	asr	r21
    2662:	47 95       	ror	r20
    2664:	8a 95       	dec	r24
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <DIO_getPinValueWithoutPointer+0xe4>
    2668:	ca 01       	movw	r24, r20
    266a:	81 70       	andi	r24, 0x01	; 1
    266c:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    266e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    2688:	2d 97       	sbiw	r28, 0x0d	; 13
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	de bf       	out	0x3e, r29	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	cd bf       	out	0x3d, r28	; 61
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    2698:	89 81       	ldd	r24, Y+1	; 0x01
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	3c 87       	std	Y+12, r19	; 0x0c
    26a0:	2b 87       	std	Y+11, r18	; 0x0b
    26a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    26a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    26a6:	81 30       	cpi	r24, 0x01	; 1
    26a8:	91 05       	cpc	r25, r1
    26aa:	71 f1       	breq	.+92     	; 0x2708 <DIO_u8SetPortDirection+0x88>
    26ac:	2b 85       	ldd	r18, Y+11	; 0x0b
    26ae:	3c 85       	ldd	r19, Y+12	; 0x0c
    26b0:	22 30       	cpi	r18, 0x02	; 2
    26b2:	31 05       	cpc	r19, r1
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <DIO_u8SetPortDirection+0x40>
    26b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f0       	breq	.+26     	; 0x26d8 <DIO_u8SetPortDirection+0x58>
    26be:	6b c0       	rjmp	.+214    	; 0x2796 <DIO_u8SetPortDirection+0x116>
    26c0:	2b 85       	ldd	r18, Y+11	; 0x0b
    26c2:	3c 85       	ldd	r19, Y+12	; 0x0c
    26c4:	22 30       	cpi	r18, 0x02	; 2
    26c6:	31 05       	cpc	r19, r1
    26c8:	b9 f1       	breq	.+110    	; 0x2738 <DIO_u8SetPortDirection+0xb8>
    26ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    26cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	91 05       	cpc	r25, r1
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <DIO_u8SetPortDirection+0x56>
    26d4:	49 c0       	rjmp	.+146    	; 0x2768 <DIO_u8SetPortDirection+0xe8>
    26d6:	5f c0       	rjmp	.+190    	; 0x2796 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    26d8:	8a 81       	ldd	r24, Y+2	; 0x02
    26da:	28 2f       	mov	r18, r24
    26dc:	30 e0       	ldi	r19, 0x00	; 0
    26de:	3a 87       	std	Y+10, r19	; 0x0a
    26e0:	29 87       	std	Y+9, r18	; 0x09
    26e2:	89 85       	ldd	r24, Y+9	; 0x09
    26e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    26e6:	00 97       	sbiw	r24, 0x00	; 0
    26e8:	31 f0       	breq	.+12     	; 0x26f6 <DIO_u8SetPortDirection+0x76>
    26ea:	29 85       	ldd	r18, Y+9	; 0x09
    26ec:	3a 85       	ldd	r19, Y+10	; 0x0a
    26ee:	21 30       	cpi	r18, 0x01	; 1
    26f0:	31 05       	cpc	r19, r1
    26f2:	29 f0       	breq	.+10     	; 0x26fe <DIO_u8SetPortDirection+0x7e>
    26f4:	50 c0       	rjmp	.+160    	; 0x2796 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    26f6:	ea e3       	ldi	r30, 0x3A	; 58
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	10 82       	st	Z, r1
    26fc:	4c c0       	rjmp	.+152    	; 0x2796 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    26fe:	ea e3       	ldi	r30, 0x3A	; 58
    2700:	f0 e0       	ldi	r31, 0x00	; 0
    2702:	8f ef       	ldi	r24, 0xFF	; 255
    2704:	80 83       	st	Z, r24
    2706:	47 c0       	rjmp	.+142    	; 0x2796 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	28 2f       	mov	r18, r24
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	38 87       	std	Y+8, r19	; 0x08
    2710:	2f 83       	std	Y+7, r18	; 0x07
    2712:	8f 81       	ldd	r24, Y+7	; 0x07
    2714:	98 85       	ldd	r25, Y+8	; 0x08
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	31 f0       	breq	.+12     	; 0x2726 <DIO_u8SetPortDirection+0xa6>
    271a:	2f 81       	ldd	r18, Y+7	; 0x07
    271c:	38 85       	ldd	r19, Y+8	; 0x08
    271e:	21 30       	cpi	r18, 0x01	; 1
    2720:	31 05       	cpc	r19, r1
    2722:	29 f0       	breq	.+10     	; 0x272e <DIO_u8SetPortDirection+0xae>
    2724:	38 c0       	rjmp	.+112    	; 0x2796 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    2726:	e7 e3       	ldi	r30, 0x37	; 55
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	10 82       	st	Z, r1
    272c:	34 c0       	rjmp	.+104    	; 0x2796 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    272e:	e7 e3       	ldi	r30, 0x37	; 55
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	8f ef       	ldi	r24, 0xFF	; 255
    2734:	80 83       	st	Z, r24
    2736:	2f c0       	rjmp	.+94     	; 0x2796 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    2738:	8a 81       	ldd	r24, Y+2	; 0x02
    273a:	28 2f       	mov	r18, r24
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	3e 83       	std	Y+6, r19	; 0x06
    2740:	2d 83       	std	Y+5, r18	; 0x05
    2742:	8d 81       	ldd	r24, Y+5	; 0x05
    2744:	9e 81       	ldd	r25, Y+6	; 0x06
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	31 f0       	breq	.+12     	; 0x2756 <DIO_u8SetPortDirection+0xd6>
    274a:	2d 81       	ldd	r18, Y+5	; 0x05
    274c:	3e 81       	ldd	r19, Y+6	; 0x06
    274e:	21 30       	cpi	r18, 0x01	; 1
    2750:	31 05       	cpc	r19, r1
    2752:	29 f0       	breq	.+10     	; 0x275e <DIO_u8SetPortDirection+0xde>
    2754:	20 c0       	rjmp	.+64     	; 0x2796 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    2756:	e4 e3       	ldi	r30, 0x34	; 52
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	10 82       	st	Z, r1
    275c:	1c c0       	rjmp	.+56     	; 0x2796 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    275e:	e4 e3       	ldi	r30, 0x34	; 52
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	8f ef       	ldi	r24, 0xFF	; 255
    2764:	80 83       	st	Z, r24
    2766:	17 c0       	rjmp	.+46     	; 0x2796 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	3c 83       	std	Y+4, r19	; 0x04
    2770:	2b 83       	std	Y+3, r18	; 0x03
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	31 f0       	breq	.+12     	; 0x2786 <DIO_u8SetPortDirection+0x106>
    277a:	2b 81       	ldd	r18, Y+3	; 0x03
    277c:	3c 81       	ldd	r19, Y+4	; 0x04
    277e:	21 30       	cpi	r18, 0x01	; 1
    2780:	31 05       	cpc	r19, r1
    2782:	29 f0       	breq	.+10     	; 0x278e <DIO_u8SetPortDirection+0x10e>
    2784:	08 c0       	rjmp	.+16     	; 0x2796 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2786:	e1 e3       	ldi	r30, 0x31	; 49
    2788:	f0 e0       	ldi	r31, 0x00	; 0
    278a:	10 82       	st	Z, r1
    278c:	04 c0       	rjmp	.+8      	; 0x2796 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    278e:	e1 e3       	ldi	r30, 0x31	; 49
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	8f ef       	ldi	r24, 0xFF	; 255
    2794:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    2796:	2d 96       	adiw	r28, 0x0d	; 13
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	f8 94       	cli
    279c:	de bf       	out	0x3e, r29	; 62
    279e:	0f be       	out	0x3f, r0	; 63
    27a0:	cd bf       	out	0x3d, r28	; 61
    27a2:	cf 91       	pop	r28
    27a4:	df 91       	pop	r29
    27a6:	08 95       	ret

000027a8 <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    27a8:	df 93       	push	r29
    27aa:	cf 93       	push	r28
    27ac:	cd b7       	in	r28, 0x3d	; 61
    27ae:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    27b0:	a7 e2       	ldi	r26, 0x27	; 39
    27b2:	b0 e0       	ldi	r27, 0x00	; 0
    27b4:	e7 e2       	ldi	r30, 0x27	; 39
    27b6:	f0 e0       	ldi	r31, 0x00	; 0
    27b8:	80 81       	ld	r24, Z
    27ba:	8f 77       	andi	r24, 0x7F	; 127
    27bc:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    27be:	a7 e2       	ldi	r26, 0x27	; 39
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e7 e2       	ldi	r30, 0x27	; 39
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	80 64       	ori	r24, 0x40	; 64
    27ca:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    27cc:	a7 e2       	ldi	r26, 0x27	; 39
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e7 e2       	ldi	r30, 0x27	; 39
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	8f 7d       	andi	r24, 0xDF	; 223
    27d8:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    27da:	a6 e2       	ldi	r26, 0x26	; 38
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e6 e2       	ldi	r30, 0x26	; 38
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	8f 7d       	andi	r24, 0xDF	; 223
    27e6:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    27e8:	a6 e2       	ldi	r26, 0x26	; 38
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e6 e2       	ldi	r30, 0x26	; 38
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	84 60       	ori	r24, 0x04	; 4
    27f4:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    27f6:	a6 e2       	ldi	r26, 0x26	; 38
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	e6 e2       	ldi	r30, 0x26	; 38
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	82 60       	ori	r24, 0x02	; 2
    2802:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2804:	a6 e2       	ldi	r26, 0x26	; 38
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e6 e2       	ldi	r30, 0x26	; 38
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	8e 7f       	andi	r24, 0xFE	; 254
    2810:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2812:	a6 e2       	ldi	r26, 0x26	; 38
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e6 e2       	ldi	r30, 0x26	; 38
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	80 68       	ori	r24, 0x80	; 128
    281e:	8c 93       	st	X, r24

}
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	28 97       	sbiw	r28, 0x08	; 8
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
    283a:	8e 83       	std	Y+6, r24	; 0x06
    283c:	78 87       	std	Y+8, r23	; 0x08
    283e:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2844:	19 82       	std	Y+1, r1	; 0x01
    2846:	1a 82       	std	Y+2, r1	; 0x02
    2848:	1b 82       	std	Y+3, r1	; 0x03
    284a:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	80 32       	cpi	r24, 0x20	; 32
    2850:	08 f0       	brcs	.+2      	; 0x2854 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2852:	5b c0       	rjmp	.+182    	; 0x290a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2854:	8f 81       	ldd	r24, Y+7	; 0x07
    2856:	98 85       	ldd	r25, Y+8	; 0x08
    2858:	00 97       	sbiw	r24, 0x00	; 0
    285a:	09 f4       	brne	.+2      	; 0x285e <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    285c:	56 c0       	rjmp	.+172    	; 0x290a <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    285e:	a7 e2       	ldi	r26, 0x27	; 39
    2860:	b0 e0       	ldi	r27, 0x00	; 0
    2862:	e7 e2       	ldi	r30, 0x27	; 39
    2864:	f0 e0       	ldi	r31, 0x00	; 0
    2866:	80 81       	ld	r24, Z
    2868:	80 7e       	andi	r24, 0xE0	; 224
    286a:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    286c:	a7 e2       	ldi	r26, 0x27	; 39
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e7 e2       	ldi	r30, 0x27	; 39
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	90 81       	ld	r25, Z
    2876:	8e 81       	ldd	r24, Y+6	; 0x06
    2878:	89 2b       	or	r24, r25
    287a:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    287c:	a6 e2       	ldi	r26, 0x26	; 38
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e6 e2       	ldi	r30, 0x26	; 38
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	80 64       	ori	r24, 0x40	; 64
    2888:	8c 93       	st	X, r24
    288a:	0b c0       	rjmp	.+22     	; 0x28a2 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    288c:	89 81       	ldd	r24, Y+1	; 0x01
    288e:	9a 81       	ldd	r25, Y+2	; 0x02
    2890:	ab 81       	ldd	r26, Y+3	; 0x03
    2892:	bc 81       	ldd	r27, Y+4	; 0x04
    2894:	01 96       	adiw	r24, 0x01	; 1
    2896:	a1 1d       	adc	r26, r1
    2898:	b1 1d       	adc	r27, r1
    289a:	89 83       	std	Y+1, r24	; 0x01
    289c:	9a 83       	std	Y+2, r25	; 0x02
    289e:	ab 83       	std	Y+3, r26	; 0x03
    28a0:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    28a2:	e6 e2       	ldi	r30, 0x26	; 38
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	82 95       	swap	r24
    28aa:	8f 70       	andi	r24, 0x0F	; 15
    28ac:	88 2f       	mov	r24, r24
    28ae:	90 e0       	ldi	r25, 0x00	; 0
    28b0:	81 70       	andi	r24, 0x01	; 1
    28b2:	90 70       	andi	r25, 0x00	; 0
    28b4:	00 97       	sbiw	r24, 0x00	; 0
    28b6:	61 f4       	brne	.+24     	; 0x28d0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	ab 81       	ldd	r26, Y+3	; 0x03
    28be:	bc 81       	ldd	r27, Y+4	; 0x04
    28c0:	80 35       	cpi	r24, 0x50	; 80
    28c2:	23 ec       	ldi	r18, 0xC3	; 195
    28c4:	92 07       	cpc	r25, r18
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	a2 07       	cpc	r26, r18
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	b2 07       	cpc	r27, r18
    28ce:	f0 f2       	brcs	.-68     	; 0x288c <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    28d0:	e6 e2       	ldi	r30, 0x26	; 38
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	80 81       	ld	r24, Z
    28d6:	82 95       	swap	r24
    28d8:	8f 70       	andi	r24, 0x0F	; 15
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	81 70       	andi	r24, 0x01	; 1
    28e0:	90 70       	andi	r25, 0x00	; 0
    28e2:	88 23       	and	r24, r24
    28e4:	81 f0       	breq	.+32     	; 0x2906 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    28e6:	a6 e2       	ldi	r26, 0x26	; 38
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e6 e2       	ldi	r30, 0x26	; 38
    28ec:	f0 e0       	ldi	r31, 0x00	; 0
    28ee:	80 81       	ld	r24, Z
    28f0:	80 61       	ori	r24, 0x10	; 16
    28f2:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    28f4:	e4 e2       	ldi	r30, 0x24	; 36
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	ef 81       	ldd	r30, Y+7	; 0x07
    28fe:	f8 85       	ldd	r31, Y+8	; 0x08
    2900:	91 83       	std	Z+1, r25	; 0x01
    2902:	80 83       	st	Z, r24
    2904:	03 c0       	rjmp	.+6      	; 0x290c <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2906:	1d 82       	std	Y+5, r1	; 0x05
    2908:	01 c0       	rjmp	.+2      	; 0x290c <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    290a:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    290c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    290e:	28 96       	adiw	r28, 0x08	; 8
    2910:	0f b6       	in	r0, 0x3f	; 63
    2912:	f8 94       	cli
    2914:	de bf       	out	0x3e, r29	; 62
    2916:	0f be       	out	0x3f, r0	; 63
    2918:	cd bf       	out	0x3d, r28	; 61
    291a:	cf 91       	pop	r28
    291c:	df 91       	pop	r29
    291e:	08 95       	ret

00002920 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	00 d0       	rcall	.+0      	; 0x2926 <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2926:	00 d0       	rcall	.+0      	; 0x2928 <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	8a 83       	std	Y+2, r24	; 0x02
    292e:	7c 83       	std	Y+4, r23	; 0x04
    2930:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2936:	8a 81       	ldd	r24, Y+2	; 0x02
    2938:	80 32       	cpi	r24, 0x20	; 32
    293a:	78 f5       	brcc	.+94     	; 0x299a <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    293c:	8b 81       	ldd	r24, Y+3	; 0x03
    293e:	9c 81       	ldd	r25, Y+4	; 0x04
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	59 f1       	breq	.+86     	; 0x299a <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2944:	80 91 b4 01 	lds	r24, 0x01B4
    2948:	88 23       	and	r24, r24
    294a:	39 f5       	brne	.+78     	; 0x299a <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	80 93 b4 01 	sts	0x01B4, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	90 93 b3 01 	sts	0x01B3, r25
    295a:	80 93 b2 01 	sts	0x01B2, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    295e:	a6 e2       	ldi	r26, 0x26	; 38
    2960:	b0 e0       	ldi	r27, 0x00	; 0
    2962:	e6 e2       	ldi	r30, 0x26	; 38
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	80 81       	ld	r24, Z
    2968:	88 60       	ori	r24, 0x08	; 8
    296a:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    296c:	a7 e2       	ldi	r26, 0x27	; 39
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	e7 e2       	ldi	r30, 0x27	; 39
    2972:	f0 e0       	ldi	r31, 0x00	; 0
    2974:	80 81       	ld	r24, Z
    2976:	80 7e       	andi	r24, 0xE0	; 224
    2978:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    297a:	a7 e2       	ldi	r26, 0x27	; 39
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e7 e2       	ldi	r30, 0x27	; 39
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	90 81       	ld	r25, Z
    2984:	8a 81       	ldd	r24, Y+2	; 0x02
    2986:	89 2b       	or	r24, r25
    2988:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    298a:	a6 e2       	ldi	r26, 0x26	; 38
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	e6 e2       	ldi	r30, 0x26	; 38
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	80 64       	ori	r24, 0x40	; 64
    2996:	8c 93       	st	X, r24
    2998:	01 c0       	rjmp	.+2      	; 0x299c <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    299a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    299c:	89 81       	ldd	r24, Y+1	; 0x01
}
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <ADC_u8GetADCRegValue+0x6>
    29b2:	0f 92       	push	r0
    29b4:	cd b7       	in	r28, 0x3d	; 61
    29b6:	de b7       	in	r29, 0x3e	; 62
    29b8:	9b 83       	std	Y+3, r25	; 0x03
    29ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    29bc:	81 e0       	ldi	r24, 0x01	; 1
    29be:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    29c0:	8a 81       	ldd	r24, Y+2	; 0x02
    29c2:	9b 81       	ldd	r25, Y+3	; 0x03
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	39 f0       	breq	.+14     	; 0x29d6 <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    29c8:	e4 e2       	ldi	r30, 0x24	; 36
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	80 81       	ld	r24, Z
    29ce:	91 81       	ldd	r25, Z+1	; 0x01
    29d0:	9b 83       	std	Y+3, r25	; 0x03
    29d2:	8a 83       	std	Y+2, r24	; 0x02
    29d4:	01 c0       	rjmp	.+2      	; 0x29d8 <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    29d6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    29d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    29e6:	1f 92       	push	r1
    29e8:	0f 92       	push	r0
    29ea:	0f b6       	in	r0, 0x3f	; 63
    29ec:	0f 92       	push	r0
    29ee:	11 24       	eor	r1, r1
    29f0:	2f 93       	push	r18
    29f2:	3f 93       	push	r19
    29f4:	4f 93       	push	r20
    29f6:	5f 93       	push	r21
    29f8:	6f 93       	push	r22
    29fa:	7f 93       	push	r23
    29fc:	8f 93       	push	r24
    29fe:	9f 93       	push	r25
    2a00:	af 93       	push	r26
    2a02:	bf 93       	push	r27
    2a04:	ef 93       	push	r30
    2a06:	ff 93       	push	r31
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2a10:	80 91 b2 01 	lds	r24, 0x01B2
    2a14:	90 91 b3 01 	lds	r25, 0x01B3
    2a18:	00 97       	sbiw	r24, 0x00	; 0
    2a1a:	99 f0       	breq	.+38     	; 0x2a42 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2a1c:	10 92 b4 01 	sts	0x01B4, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2a20:	a6 e2       	ldi	r26, 0x26	; 38
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	e6 e2       	ldi	r30, 0x26	; 38
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	87 7f       	andi	r24, 0xF7	; 247
    2a2c:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2a2e:	20 91 b2 01 	lds	r18, 0x01B2
    2a32:	30 91 b3 01 	lds	r19, 0x01B3
    2a36:	e4 e2       	ldi	r30, 0x24	; 36
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	80 81       	ld	r24, Z
    2a3c:	91 81       	ldd	r25, Z+1	; 0x01
    2a3e:	f9 01       	movw	r30, r18
    2a40:	09 95       	icall
	}
}
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	ff 91       	pop	r31
    2a48:	ef 91       	pop	r30
    2a4a:	bf 91       	pop	r27
    2a4c:	af 91       	pop	r26
    2a4e:	9f 91       	pop	r25
    2a50:	8f 91       	pop	r24
    2a52:	7f 91       	pop	r23
    2a54:	6f 91       	pop	r22
    2a56:	5f 91       	pop	r21
    2a58:	4f 91       	pop	r20
    2a5a:	3f 91       	pop	r19
    2a5c:	2f 91       	pop	r18
    2a5e:	0f 90       	pop	r0
    2a60:	0f be       	out	0x3f, r0	; 63
    2a62:	0f 90       	pop	r0
    2a64:	1f 90       	pop	r1
    2a66:	18 95       	reti

00002a68 <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2a70:	83 e0       	ldi	r24, 0x03	; 3
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2a7a:	83 e0       	ldi	r24, 0x03	; 3
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	41 e0       	ldi	r20, 0x01	; 1
    2a80:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2a84:	83 e0       	ldi	r24, 0x03	; 3
    2a86:	62 e0       	ldi	r22, 0x02	; 2
    2a88:	41 e0       	ldi	r20, 0x01	; 1
    2a8a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2a8e:	83 e0       	ldi	r24, 0x03	; 3
    2a90:	63 e0       	ldi	r22, 0x03	; 3
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
}
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	00 d0       	rcall	.+0      	; 0x2aa4 <ActivatePins1+0x6>
    2aa4:	00 d0       	rcall	.+0      	; 0x2aa6 <ActivatePins1+0x8>
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	89 83       	std	Y+1, r24	; 0x01
    2aac:	6a 83       	std	Y+2, r22	; 0x02
    2aae:	4b 83       	std	Y+3, r20	; 0x03
    2ab0:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2ab2:	83 e0       	ldi	r24, 0x03	; 3
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	49 81       	ldd	r20, Y+1	; 0x01
    2ab8:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2abc:	83 e0       	ldi	r24, 0x03	; 3
    2abe:	61 e0       	ldi	r22, 0x01	; 1
    2ac0:	4a 81       	ldd	r20, Y+2	; 0x02
    2ac2:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2ac6:	83 e0       	ldi	r24, 0x03	; 3
    2ac8:	62 e0       	ldi	r22, 0x02	; 2
    2aca:	4b 81       	ldd	r20, Y+3	; 0x03
    2acc:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2ad0:	83 e0       	ldi	r24, 0x03	; 3
    2ad2:	63 e0       	ldi	r22, 0x03	; 3
    2ad4:	4c 81       	ldd	r20, Y+4	; 0x04
    2ad6:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
}
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	cf 91       	pop	r28
    2ae4:	df 91       	pop	r29
    2ae6:	08 95       	ret

00002ae8 <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <ActivatePins2+0x6>
    2aee:	00 d0       	rcall	.+0      	; 0x2af0 <ActivatePins2+0x8>
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	89 83       	std	Y+1, r24	; 0x01
    2af6:	6a 83       	std	Y+2, r22	; 0x02
    2af8:	4b 83       	std	Y+3, r20	; 0x03
    2afa:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2afc:	83 e0       	ldi	r24, 0x03	; 3
    2afe:	63 e0       	ldi	r22, 0x03	; 3
    2b00:	4c 81       	ldd	r20, Y+4	; 0x04
    2b02:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2b06:	83 e0       	ldi	r24, 0x03	; 3
    2b08:	62 e0       	ldi	r22, 0x02	; 2
    2b0a:	4b 81       	ldd	r20, Y+3	; 0x03
    2b0c:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2b10:	83 e0       	ldi	r24, 0x03	; 3
    2b12:	61 e0       	ldi	r22, 0x01	; 1
    2b14:	4a 81       	ldd	r20, Y+2	; 0x02
    2b16:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2b1a:	83 e0       	ldi	r24, 0x03	; 3
    2b1c:	60 e0       	ldi	r22, 0x00	; 0
    2b1e:	49 81       	ldd	r20, Y+1	; 0x01
    2b20:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
}
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
    2b3a:	29 97       	sbiw	r28, 0x09	; 9
    2b3c:	0f b6       	in	r0, 0x3f	; 63
    2b3e:	f8 94       	cli
    2b40:	de bf       	out	0x3e, r29	; 62
    2b42:	0f be       	out	0x3f, r0	; 63
    2b44:	cd bf       	out	0x3d, r28	; 61
    2b46:	9a 83       	std	Y+2, r25	; 0x02
    2b48:	89 83       	std	Y+1, r24	; 0x01
    2b4a:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2b4c:	29 81       	ldd	r18, Y+1	; 0x01
    2b4e:	3a 81       	ldd	r19, Y+2	; 0x02
    2b50:	39 87       	std	Y+9, r19	; 0x09
    2b52:	28 87       	std	Y+8, r18	; 0x08
    2b54:	88 85       	ldd	r24, Y+8	; 0x08
    2b56:	99 85       	ldd	r25, Y+9	; 0x09
    2b58:	8a 35       	cpi	r24, 0x5A	; 90
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	31 f0       	breq	.+12     	; 0x2b6a <SelectStepAngle+0x38>
    2b5e:	28 85       	ldd	r18, Y+8	; 0x08
    2b60:	39 85       	ldd	r19, Y+9	; 0x09
    2b62:	24 3b       	cpi	r18, 0xB4	; 180
    2b64:	31 05       	cpc	r19, r1
    2b66:	f1 f0       	breq	.+60     	; 0x2ba4 <SelectStepAngle+0x72>
    2b68:	39 c0       	rjmp	.+114    	; 0x2bdc <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	3f 83       	std	Y+7, r19	; 0x07
    2b72:	2e 83       	std	Y+6, r18	; 0x06
    2b74:	8e 81       	ldd	r24, Y+6	; 0x06
    2b76:	9f 81       	ldd	r25, Y+7	; 0x07
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	31 f0       	breq	.+12     	; 0x2b88 <SelectStepAngle+0x56>
    2b7c:	2e 81       	ldd	r18, Y+6	; 0x06
    2b7e:	3f 81       	ldd	r19, Y+7	; 0x07
    2b80:	21 30       	cpi	r18, 0x01	; 1
    2b82:	31 05       	cpc	r19, r1
    2b84:	41 f0       	breq	.+16     	; 0x2b96 <SelectStepAngle+0x64>
    2b86:	2a c0       	rjmp	.+84     	; 0x2bdc <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	60 e0       	ldi	r22, 0x00	; 0
    2b8c:	41 e0       	ldi	r20, 0x01	; 1
    2b8e:	21 e0       	ldi	r18, 0x01	; 1
    2b90:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <ActivatePins1>
    2b94:	23 c0       	rjmp	.+70     	; 0x2bdc <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    2b96:	81 e0       	ldi	r24, 0x01	; 1
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	40 e0       	ldi	r20, 0x00	; 0
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <ActivatePins2>
    2ba2:	1c c0       	rjmp	.+56     	; 0x2bdc <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    2ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	3d 83       	std	Y+5, r19	; 0x05
    2bac:	2c 83       	std	Y+4, r18	; 0x04
    2bae:	8c 81       	ldd	r24, Y+4	; 0x04
    2bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb2:	00 97       	sbiw	r24, 0x00	; 0
    2bb4:	31 f0       	breq	.+12     	; 0x2bc2 <SelectStepAngle+0x90>
    2bb6:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb8:	3d 81       	ldd	r19, Y+5	; 0x05
    2bba:	21 30       	cpi	r18, 0x01	; 1
    2bbc:	31 05       	cpc	r19, r1
    2bbe:	41 f0       	breq	.+16     	; 0x2bd0 <SelectStepAngle+0x9e>
    2bc0:	0d c0       	rjmp	.+26     	; 0x2bdc <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	61 e0       	ldi	r22, 0x01	; 1
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <ActivatePins2>
    2bce:	06 c0       	rjmp	.+12     	; 0x2bdc <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2bd0:	80 e0       	ldi	r24, 0x00	; 0
    2bd2:	61 e0       	ldi	r22, 0x01	; 1
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <ActivatePins1>
						break;
				}
				break;
	}
}
    2bdc:	29 96       	adiw	r28, 0x09	; 9
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	08 95       	ret

00002bee <Servo_Init>:
#include "../../MCAL/Timer/Timer_Interface.h"

#define TIMERS_u16_OCR1A_REG			*((volatile u16 *)0x4A)

void Servo_Init(){
    2bee:	df 93       	push	r29
    2bf0:	cf 93       	push	r28
    2bf2:	cd b7       	in	r28, 0x3d	; 61
    2bf4:	de b7       	in	r29, 0x3e	; 62
	TIMERS_voidTimer1Init();
    2bf6:	0e 94 bc 07 	call	0xf78	; 0xf78 <TIMERS_voidTimer1Init>
}
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	08 95       	ret

00002c00 <Servo_SetAngle>:

void Servo_SetAngle(u16 Servo_Angle){
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	00 d0       	rcall	.+0      	; 0x2c06 <Servo_SetAngle+0x6>
    2c06:	00 d0       	rcall	.+0      	; 0x2c08 <Servo_SetAngle+0x8>
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16OCR1AValue = (Servo_Angle * 11) + 3005;
    2c10:	4b 81       	ldd	r20, Y+3	; 0x03
    2c12:	5c 81       	ldd	r21, Y+4	; 0x04
    2c14:	ca 01       	movw	r24, r20
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	9c 01       	movw	r18, r24
    2c1c:	22 0f       	add	r18, r18
    2c1e:	33 1f       	adc	r19, r19
    2c20:	22 0f       	add	r18, r18
    2c22:	33 1f       	adc	r19, r19
    2c24:	82 0f       	add	r24, r18
    2c26:	93 1f       	adc	r25, r19
    2c28:	84 0f       	add	r24, r20
    2c2a:	95 1f       	adc	r25, r21
    2c2c:	83 54       	subi	r24, 0x43	; 67
    2c2e:	94 4f       	sbci	r25, 0xF4	; 244
    2c30:	9a 83       	std	Y+2, r25	; 0x02
    2c32:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_voidTIMER1SetCompareMatchValueA(Local_u16OCR1AValue);
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	9a 81       	ldd	r25, Y+2	; 0x02
    2c38:	0e 94 64 08 	call	0x10c8	; 0x10c8 <TIMERS_voidTIMER1SetCompareMatchValueA>
}
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	08 95       	ret

00002c4a <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	e9 97       	sbiw	r28, 0x39	; 57
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
    2c5e:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2c60:	83 e0       	ldi	r24, 0x03	; 3
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	64 e0       	ldi	r22, 0x04	; 4
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	40 e0       	ldi	r20, 0x00	; 0
    2c6a:	50 e0       	ldi	r21, 0x00	; 0
    2c6c:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_setPinValue>
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	a0 e8       	ldi	r26, 0x80	; 128
    2c76:	bf e3       	ldi	r27, 0x3F	; 63
    2c78:	8d ab       	std	Y+53, r24	; 0x35
    2c7a:	9e ab       	std	Y+54, r25	; 0x36
    2c7c:	af ab       	std	Y+55, r26	; 0x37
    2c7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c80:	6d a9       	ldd	r22, Y+53	; 0x35
    2c82:	7e a9       	ldd	r23, Y+54	; 0x36
    2c84:	8f a9       	ldd	r24, Y+55	; 0x37
    2c86:	98 ad       	ldd	r25, Y+56	; 0x38
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4a e7       	ldi	r20, 0x7A	; 122
    2c8e:	55 e4       	ldi	r21, 0x45	; 69
    2c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	89 ab       	std	Y+49, r24	; 0x31
    2c9a:	9a ab       	std	Y+50, r25	; 0x32
    2c9c:	ab ab       	std	Y+51, r26	; 0x33
    2c9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ca0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ca2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ca4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ca6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	5f e3       	ldi	r21, 0x3F	; 63
    2cb0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cb4:	88 23       	and	r24, r24
    2cb6:	2c f4       	brge	.+10     	; 0x2cc2 <LCD_sendCommand+0x78>
		__ticks = 1;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	98 ab       	std	Y+48, r25	; 0x30
    2cbe:	8f a7       	std	Y+47, r24	; 0x2f
    2cc0:	3f c0       	rjmp	.+126    	; 0x2d40 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    2cc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2cc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2cc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2cc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	57 e4       	ldi	r21, 0x47	; 71
    2cd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	4c f5       	brge	.+82     	; 0x2d2c <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cda:	6d a9       	ldd	r22, Y+53	; 0x35
    2cdc:	7e a9       	ldd	r23, Y+54	; 0x36
    2cde:	8f a9       	ldd	r24, Y+55	; 0x37
    2ce0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e2       	ldi	r20, 0x20	; 32
    2ce8:	51 e4       	ldi	r21, 0x41	; 65
    2cea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	98 ab       	std	Y+48, r25	; 0x30
    2d00:	8f a7       	std	Y+47, r24	; 0x2f
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <LCD_sendCommand+0xd8>
    2d04:	80 e9       	ldi	r24, 0x90	; 144
    2d06:	91 e0       	ldi	r25, 0x01	; 1
    2d08:	9e a7       	std	Y+46, r25	; 0x2e
    2d0a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    2d0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <LCD_sendCommand+0xc6>
    2d14:	9e a7       	std	Y+46, r25	; 0x2e
    2d16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d18:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d1a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	98 ab       	std	Y+48, r25	; 0x30
    2d20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d22:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d24:	98 a9       	ldd	r25, Y+48	; 0x30
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	69 f7       	brne	.-38     	; 0x2d04 <LCD_sendCommand+0xba>
    2d2a:	14 c0       	rjmp	.+40     	; 0x2d54 <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2d2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2d30:	8b a9       	ldd	r24, Y+51	; 0x33
    2d32:	9c a9       	ldd	r25, Y+52	; 0x34
    2d34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	98 ab       	std	Y+48, r25	; 0x30
    2d3e:	8f a7       	std	Y+47, r24	; 0x2f
    2d40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d42:	98 a9       	ldd	r25, Y+48	; 0x30
    2d44:	9c a7       	std	Y+44, r25	; 0x2c
    2d46:	8b a7       	std	Y+43, r24	; 0x2b
    2d48:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <LCD_sendCommand+0x102>
    2d50:	9c a7       	std	Y+44, r25	; 0x2c
    2d52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2d54:	83 e0       	ldi	r24, 0x03	; 3
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	65 e0       	ldi	r22, 0x05	; 5
    2d5a:	70 e0       	ldi	r23, 0x00	; 0
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	50 e0       	ldi	r21, 0x00	; 0
    2d60:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_setPinValue>
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	a0 e8       	ldi	r26, 0x80	; 128
    2d6a:	bf e3       	ldi	r27, 0x3F	; 63
    2d6c:	8f a3       	std	Y+39, r24	; 0x27
    2d6e:	98 a7       	std	Y+40, r25	; 0x28
    2d70:	a9 a7       	std	Y+41, r26	; 0x29
    2d72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d74:	6f a1       	ldd	r22, Y+39	; 0x27
    2d76:	78 a5       	ldd	r23, Y+40	; 0x28
    2d78:	89 a5       	ldd	r24, Y+41	; 0x29
    2d7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4a e7       	ldi	r20, 0x7A	; 122
    2d82:	55 e4       	ldi	r21, 0x45	; 69
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	8b a3       	std	Y+35, r24	; 0x23
    2d8e:	9c a3       	std	Y+36, r25	; 0x24
    2d90:	ad a3       	std	Y+37, r26	; 0x25
    2d92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d94:	6b a1       	ldd	r22, Y+35	; 0x23
    2d96:	7c a1       	ldd	r23, Y+36	; 0x24
    2d98:	8d a1       	ldd	r24, Y+37	; 0x25
    2d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da8:	88 23       	and	r24, r24
    2daa:	2c f4       	brge	.+10     	; 0x2db6 <LCD_sendCommand+0x16c>
		__ticks = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	9a a3       	std	Y+34, r25	; 0x22
    2db2:	89 a3       	std	Y+33, r24	; 0x21
    2db4:	3f c0       	rjmp	.+126    	; 0x2e34 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2db6:	6b a1       	ldd	r22, Y+35	; 0x23
    2db8:	7c a1       	ldd	r23, Y+36	; 0x24
    2dba:	8d a1       	ldd	r24, Y+37	; 0x25
    2dbc:	9e a1       	ldd	r25, Y+38	; 0x26
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	4f e7       	ldi	r20, 0x7F	; 127
    2dc4:	57 e4       	ldi	r21, 0x47	; 71
    2dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dca:	18 16       	cp	r1, r24
    2dcc:	4c f5       	brge	.+82     	; 0x2e20 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dce:	6f a1       	ldd	r22, Y+39	; 0x27
    2dd0:	78 a5       	ldd	r23, Y+40	; 0x28
    2dd2:	89 a5       	ldd	r24, Y+41	; 0x29
    2dd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e2       	ldi	r20, 0x20	; 32
    2ddc:	51 e4       	ldi	r21, 0x41	; 65
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9a a3       	std	Y+34, r25	; 0x22
    2df4:	89 a3       	std	Y+33, r24	; 0x21
    2df6:	0f c0       	rjmp	.+30     	; 0x2e16 <LCD_sendCommand+0x1cc>
    2df8:	80 e9       	ldi	r24, 0x90	; 144
    2dfa:	91 e0       	ldi	r25, 0x01	; 1
    2dfc:	98 a3       	std	Y+32, r25	; 0x20
    2dfe:	8f 8f       	std	Y+31, r24	; 0x1f
    2e00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e02:	98 a1       	ldd	r25, Y+32	; 0x20
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <LCD_sendCommand+0x1ba>
    2e08:	98 a3       	std	Y+32, r25	; 0x20
    2e0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    2e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	9a a3       	std	Y+34, r25	; 0x22
    2e14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e16:	89 a1       	ldd	r24, Y+33	; 0x21
    2e18:	9a a1       	ldd	r25, Y+34	; 0x22
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	69 f7       	brne	.-38     	; 0x2df8 <LCD_sendCommand+0x1ae>
    2e1e:	14 c0       	rjmp	.+40     	; 0x2e48 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e20:	6b a1       	ldd	r22, Y+35	; 0x23
    2e22:	7c a1       	ldd	r23, Y+36	; 0x24
    2e24:	8d a1       	ldd	r24, Y+37	; 0x25
    2e26:	9e a1       	ldd	r25, Y+38	; 0x26
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9a a3       	std	Y+34, r25	; 0x22
    2e32:	89 a3       	std	Y+33, r24	; 0x21
    2e34:	89 a1       	ldd	r24, Y+33	; 0x21
    2e36:	9a a1       	ldd	r25, Y+34	; 0x22
    2e38:	9e 8f       	std	Y+30, r25	; 0x1e
    2e3a:	8d 8f       	std	Y+29, r24	; 0x1d
    2e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e40:	01 97       	sbiw	r24, 0x01	; 1
    2e42:	f1 f7       	brne	.-4      	; 0x2e40 <LCD_sendCommand+0x1f6>
    2e44:	9e 8f       	std	Y+30, r25	; 0x1e
    2e46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    2e48:	89 ad       	ldd	r24, Y+57	; 0x39
    2e4a:	28 2f       	mov	r18, r24
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	82 e0       	ldi	r24, 0x02	; 2
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	b9 01       	movw	r22, r18
    2e54:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_setPortValue>
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	a0 e8       	ldi	r26, 0x80	; 128
    2e5e:	bf e3       	ldi	r27, 0x3F	; 63
    2e60:	89 8f       	std	Y+25, r24	; 0x19
    2e62:	9a 8f       	std	Y+26, r25	; 0x1a
    2e64:	ab 8f       	std	Y+27, r26	; 0x1b
    2e66:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e68:	69 8d       	ldd	r22, Y+25	; 0x19
    2e6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	4a e7       	ldi	r20, 0x7A	; 122
    2e76:	55 e4       	ldi	r21, 0x45	; 69
    2e78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e7c:	dc 01       	movw	r26, r24
    2e7e:	cb 01       	movw	r24, r22
    2e80:	8d 8b       	std	Y+21, r24	; 0x15
    2e82:	9e 8b       	std	Y+22, r25	; 0x16
    2e84:	af 8b       	std	Y+23, r26	; 0x17
    2e86:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e88:	6d 89       	ldd	r22, Y+21	; 0x15
    2e8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e8       	ldi	r20, 0x80	; 128
    2e96:	5f e3       	ldi	r21, 0x3F	; 63
    2e98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9c:	88 23       	and	r24, r24
    2e9e:	2c f4       	brge	.+10     	; 0x2eaa <LCD_sendCommand+0x260>
		__ticks = 1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	9c 8b       	std	Y+20, r25	; 0x14
    2ea6:	8b 8b       	std	Y+19, r24	; 0x13
    2ea8:	3f c0       	rjmp	.+126    	; 0x2f28 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    2eaa:	6d 89       	ldd	r22, Y+21	; 0x15
    2eac:	7e 89       	ldd	r23, Y+22	; 0x16
    2eae:	8f 89       	ldd	r24, Y+23	; 0x17
    2eb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2eb2:	20 e0       	ldi	r18, 0x00	; 0
    2eb4:	3f ef       	ldi	r19, 0xFF	; 255
    2eb6:	4f e7       	ldi	r20, 0x7F	; 127
    2eb8:	57 e4       	ldi	r21, 0x47	; 71
    2eba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ebe:	18 16       	cp	r1, r24
    2ec0:	4c f5       	brge	.+82     	; 0x2f14 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ec4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eca:	20 e0       	ldi	r18, 0x00	; 0
    2ecc:	30 e0       	ldi	r19, 0x00	; 0
    2ece:	40 e2       	ldi	r20, 0x20	; 32
    2ed0:	51 e4       	ldi	r21, 0x41	; 65
    2ed2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	9c 8b       	std	Y+20, r25	; 0x14
    2ee8:	8b 8b       	std	Y+19, r24	; 0x13
    2eea:	0f c0       	rjmp	.+30     	; 0x2f0a <LCD_sendCommand+0x2c0>
    2eec:	80 e9       	ldi	r24, 0x90	; 144
    2eee:	91 e0       	ldi	r25, 0x01	; 1
    2ef0:	9a 8b       	std	Y+18, r25	; 0x12
    2ef2:	89 8b       	std	Y+17, r24	; 0x11
    2ef4:	89 89       	ldd	r24, Y+17	; 0x11
    2ef6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ef8:	01 97       	sbiw	r24, 0x01	; 1
    2efa:	f1 f7       	brne	.-4      	; 0x2ef8 <LCD_sendCommand+0x2ae>
    2efc:	9a 8b       	std	Y+18, r25	; 0x12
    2efe:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f00:	8b 89       	ldd	r24, Y+19	; 0x13
    2f02:	9c 89       	ldd	r25, Y+20	; 0x14
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	9c 8b       	std	Y+20, r25	; 0x14
    2f08:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f0e:	00 97       	sbiw	r24, 0x00	; 0
    2f10:	69 f7       	brne	.-38     	; 0x2eec <LCD_sendCommand+0x2a2>
    2f12:	14 c0       	rjmp	.+40     	; 0x2f3c <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f14:	6d 89       	ldd	r22, Y+21	; 0x15
    2f16:	7e 89       	ldd	r23, Y+22	; 0x16
    2f18:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	9c 8b       	std	Y+20, r25	; 0x14
    2f26:	8b 8b       	std	Y+19, r24	; 0x13
    2f28:	8b 89       	ldd	r24, Y+19	; 0x13
    2f2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f2c:	98 8b       	std	Y+16, r25	; 0x10
    2f2e:	8f 87       	std	Y+15, r24	; 0x0f
    2f30:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f32:	98 89       	ldd	r25, Y+16	; 0x10
    2f34:	01 97       	sbiw	r24, 0x01	; 1
    2f36:	f1 f7       	brne	.-4      	; 0x2f34 <LCD_sendCommand+0x2ea>
    2f38:	98 8b       	std	Y+16, r25	; 0x10
    2f3a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    2f3c:	83 e0       	ldi	r24, 0x03	; 3
    2f3e:	90 e0       	ldi	r25, 0x00	; 0
    2f40:	65 e0       	ldi	r22, 0x05	; 5
    2f42:	70 e0       	ldi	r23, 0x00	; 0
    2f44:	40 e0       	ldi	r20, 0x00	; 0
    2f46:	50 e0       	ldi	r21, 0x00	; 0
    2f48:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_setPinValue>
    2f4c:	80 e0       	ldi	r24, 0x00	; 0
    2f4e:	90 e0       	ldi	r25, 0x00	; 0
    2f50:	a0 e8       	ldi	r26, 0x80	; 128
    2f52:	bf e3       	ldi	r27, 0x3F	; 63
    2f54:	8b 87       	std	Y+11, r24	; 0x0b
    2f56:	9c 87       	std	Y+12, r25	; 0x0c
    2f58:	ad 87       	std	Y+13, r26	; 0x0d
    2f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	4a e7       	ldi	r20, 0x7A	; 122
    2f6a:	55 e4       	ldi	r21, 0x45	; 69
    2f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	8f 83       	std	Y+7, r24	; 0x07
    2f76:	98 87       	std	Y+8, r25	; 0x08
    2f78:	a9 87       	std	Y+9, r26	; 0x09
    2f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7e:	78 85       	ldd	r23, Y+8	; 0x08
    2f80:	89 85       	ldd	r24, Y+9	; 0x09
    2f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 e8       	ldi	r20, 0x80	; 128
    2f8a:	5f e3       	ldi	r21, 0x3F	; 63
    2f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f90:	88 23       	and	r24, r24
    2f92:	2c f4       	brge	.+10     	; 0x2f9e <LCD_sendCommand+0x354>
		__ticks = 1;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	9e 83       	std	Y+6, r25	; 0x06
    2f9a:	8d 83       	std	Y+5, r24	; 0x05
    2f9c:	3f c0       	rjmp	.+126    	; 0x301c <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    2f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2fa0:	78 85       	ldd	r23, Y+8	; 0x08
    2fa2:	89 85       	ldd	r24, Y+9	; 0x09
    2fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	3f ef       	ldi	r19, 0xFF	; 255
    2faa:	4f e7       	ldi	r20, 0x7F	; 127
    2fac:	57 e4       	ldi	r21, 0x47	; 71
    2fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fb2:	18 16       	cp	r1, r24
    2fb4:	4c f5       	brge	.+82     	; 0x3008 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fbe:	20 e0       	ldi	r18, 0x00	; 0
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e2       	ldi	r20, 0x20	; 32
    2fc4:	51 e4       	ldi	r21, 0x41	; 65
    2fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fca:	dc 01       	movw	r26, r24
    2fcc:	cb 01       	movw	r24, r22
    2fce:	bc 01       	movw	r22, r24
    2fd0:	cd 01       	movw	r24, r26
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	0f c0       	rjmp	.+30     	; 0x2ffe <LCD_sendCommand+0x3b4>
    2fe0:	80 e9       	ldi	r24, 0x90	; 144
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	9c 83       	std	Y+4, r25	; 0x04
    2fe6:	8b 83       	std	Y+3, r24	; 0x03
    2fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    2fea:	9c 81       	ldd	r25, Y+4	; 0x04
    2fec:	01 97       	sbiw	r24, 0x01	; 1
    2fee:	f1 f7       	brne	.-4      	; 0x2fec <LCD_sendCommand+0x3a2>
    2ff0:	9c 83       	std	Y+4, r25	; 0x04
    2ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	9e 83       	std	Y+6, r25	; 0x06
    2ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    3000:	9e 81       	ldd	r25, Y+6	; 0x06
    3002:	00 97       	sbiw	r24, 0x00	; 0
    3004:	69 f7       	brne	.-38     	; 0x2fe0 <LCD_sendCommand+0x396>
    3006:	14 c0       	rjmp	.+40     	; 0x3030 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3008:	6f 81       	ldd	r22, Y+7	; 0x07
    300a:	78 85       	ldd	r23, Y+8	; 0x08
    300c:	89 85       	ldd	r24, Y+9	; 0x09
    300e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	9e 83       	std	Y+6, r25	; 0x06
    301a:	8d 83       	std	Y+5, r24	; 0x05
    301c:	8d 81       	ldd	r24, Y+5	; 0x05
    301e:	9e 81       	ldd	r25, Y+6	; 0x06
    3020:	9a 83       	std	Y+2, r25	; 0x02
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	01 97       	sbiw	r24, 0x01	; 1
    302a:	f1 f7       	brne	.-4      	; 0x3028 <LCD_sendCommand+0x3de>
    302c:	9a 83       	std	Y+2, r25	; 0x02
    302e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3030:	e9 96       	adiw	r28, 0x39	; 57
    3032:	0f b6       	in	r0, 0x3f	; 63
    3034:	f8 94       	cli
    3036:	de bf       	out	0x3e, r29	; 62
    3038:	0f be       	out	0x3f, r0	; 63
    303a:	cd bf       	out	0x3d, r28	; 61
    303c:	cf 91       	pop	r28
    303e:	df 91       	pop	r29
    3040:	08 95       	ret

00003042 <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    3042:	df 93       	push	r29
    3044:	cf 93       	push	r28
    3046:	cd b7       	in	r28, 0x3d	; 61
    3048:	de b7       	in	r29, 0x3e	; 62
    304a:	e9 97       	sbiw	r28, 0x39	; 57
    304c:	0f b6       	in	r0, 0x3f	; 63
    304e:	f8 94       	cli
    3050:	de bf       	out	0x3e, r29	; 62
    3052:	0f be       	out	0x3f, r0	; 63
    3054:	cd bf       	out	0x3d, r28	; 61
    3056:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    3058:	83 e0       	ldi	r24, 0x03	; 3
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	64 e0       	ldi	r22, 0x04	; 4
    305e:	70 e0       	ldi	r23, 0x00	; 0
    3060:	41 e0       	ldi	r20, 0x01	; 1
    3062:	50 e0       	ldi	r21, 0x00	; 0
    3064:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_setPinValue>
    3068:	80 e0       	ldi	r24, 0x00	; 0
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	a0 e8       	ldi	r26, 0x80	; 128
    306e:	bf e3       	ldi	r27, 0x3F	; 63
    3070:	8d ab       	std	Y+53, r24	; 0x35
    3072:	9e ab       	std	Y+54, r25	; 0x36
    3074:	af ab       	std	Y+55, r26	; 0x37
    3076:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3078:	6d a9       	ldd	r22, Y+53	; 0x35
    307a:	7e a9       	ldd	r23, Y+54	; 0x36
    307c:	8f a9       	ldd	r24, Y+55	; 0x37
    307e:	98 ad       	ldd	r25, Y+56	; 0x38
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	4a e7       	ldi	r20, 0x7A	; 122
    3086:	55 e4       	ldi	r21, 0x45	; 69
    3088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	89 ab       	std	Y+49, r24	; 0x31
    3092:	9a ab       	std	Y+50, r25	; 0x32
    3094:	ab ab       	std	Y+51, r26	; 0x33
    3096:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3098:	69 a9       	ldd	r22, Y+49	; 0x31
    309a:	7a a9       	ldd	r23, Y+50	; 0x32
    309c:	8b a9       	ldd	r24, Y+51	; 0x33
    309e:	9c a9       	ldd	r25, Y+52	; 0x34
    30a0:	20 e0       	ldi	r18, 0x00	; 0
    30a2:	30 e0       	ldi	r19, 0x00	; 0
    30a4:	40 e8       	ldi	r20, 0x80	; 128
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30ac:	88 23       	and	r24, r24
    30ae:	2c f4       	brge	.+10     	; 0x30ba <LCD_displayCharacter+0x78>
		__ticks = 1;
    30b0:	81 e0       	ldi	r24, 0x01	; 1
    30b2:	90 e0       	ldi	r25, 0x00	; 0
    30b4:	98 ab       	std	Y+48, r25	; 0x30
    30b6:	8f a7       	std	Y+47, r24	; 0x2f
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    30ba:	69 a9       	ldd	r22, Y+49	; 0x31
    30bc:	7a a9       	ldd	r23, Y+50	; 0x32
    30be:	8b a9       	ldd	r24, Y+51	; 0x33
    30c0:	9c a9       	ldd	r25, Y+52	; 0x34
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	3f ef       	ldi	r19, 0xFF	; 255
    30c6:	4f e7       	ldi	r20, 0x7F	; 127
    30c8:	57 e4       	ldi	r21, 0x47	; 71
    30ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ce:	18 16       	cp	r1, r24
    30d0:	4c f5       	brge	.+82     	; 0x3124 <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30d2:	6d a9       	ldd	r22, Y+53	; 0x35
    30d4:	7e a9       	ldd	r23, Y+54	; 0x36
    30d6:	8f a9       	ldd	r24, Y+55	; 0x37
    30d8:	98 ad       	ldd	r25, Y+56	; 0x38
    30da:	20 e0       	ldi	r18, 0x00	; 0
    30dc:	30 e0       	ldi	r19, 0x00	; 0
    30de:	40 e2       	ldi	r20, 0x20	; 32
    30e0:	51 e4       	ldi	r21, 0x41	; 65
    30e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	bc 01       	movw	r22, r24
    30ec:	cd 01       	movw	r24, r26
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	98 ab       	std	Y+48, r25	; 0x30
    30f8:	8f a7       	std	Y+47, r24	; 0x2f
    30fa:	0f c0       	rjmp	.+30     	; 0x311a <LCD_displayCharacter+0xd8>
    30fc:	80 e9       	ldi	r24, 0x90	; 144
    30fe:	91 e0       	ldi	r25, 0x01	; 1
    3100:	9e a7       	std	Y+46, r25	; 0x2e
    3102:	8d a7       	std	Y+45, r24	; 0x2d
    3104:	8d a5       	ldd	r24, Y+45	; 0x2d
    3106:	9e a5       	ldd	r25, Y+46	; 0x2e
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	f1 f7       	brne	.-4      	; 0x3108 <LCD_displayCharacter+0xc6>
    310c:	9e a7       	std	Y+46, r25	; 0x2e
    310e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3110:	8f a5       	ldd	r24, Y+47	; 0x2f
    3112:	98 a9       	ldd	r25, Y+48	; 0x30
    3114:	01 97       	sbiw	r24, 0x01	; 1
    3116:	98 ab       	std	Y+48, r25	; 0x30
    3118:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    311a:	8f a5       	ldd	r24, Y+47	; 0x2f
    311c:	98 a9       	ldd	r25, Y+48	; 0x30
    311e:	00 97       	sbiw	r24, 0x00	; 0
    3120:	69 f7       	brne	.-38     	; 0x30fc <LCD_displayCharacter+0xba>
    3122:	14 c0       	rjmp	.+40     	; 0x314c <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3124:	69 a9       	ldd	r22, Y+49	; 0x31
    3126:	7a a9       	ldd	r23, Y+50	; 0x32
    3128:	8b a9       	ldd	r24, Y+51	; 0x33
    312a:	9c a9       	ldd	r25, Y+52	; 0x34
    312c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3130:	dc 01       	movw	r26, r24
    3132:	cb 01       	movw	r24, r22
    3134:	98 ab       	std	Y+48, r25	; 0x30
    3136:	8f a7       	std	Y+47, r24	; 0x2f
    3138:	8f a5       	ldd	r24, Y+47	; 0x2f
    313a:	98 a9       	ldd	r25, Y+48	; 0x30
    313c:	9c a7       	std	Y+44, r25	; 0x2c
    313e:	8b a7       	std	Y+43, r24	; 0x2b
    3140:	8b a5       	ldd	r24, Y+43	; 0x2b
    3142:	9c a5       	ldd	r25, Y+44	; 0x2c
    3144:	01 97       	sbiw	r24, 0x01	; 1
    3146:	f1 f7       	brne	.-4      	; 0x3144 <LCD_displayCharacter+0x102>
    3148:	9c a7       	std	Y+44, r25	; 0x2c
    314a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    314c:	83 e0       	ldi	r24, 0x03	; 3
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	65 e0       	ldi	r22, 0x05	; 5
    3152:	70 e0       	ldi	r23, 0x00	; 0
    3154:	41 e0       	ldi	r20, 0x01	; 1
    3156:	50 e0       	ldi	r21, 0x00	; 0
    3158:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_setPinValue>
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	a0 e8       	ldi	r26, 0x80	; 128
    3162:	bf e3       	ldi	r27, 0x3F	; 63
    3164:	8f a3       	std	Y+39, r24	; 0x27
    3166:	98 a7       	std	Y+40, r25	; 0x28
    3168:	a9 a7       	std	Y+41, r26	; 0x29
    316a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    316c:	6f a1       	ldd	r22, Y+39	; 0x27
    316e:	78 a5       	ldd	r23, Y+40	; 0x28
    3170:	89 a5       	ldd	r24, Y+41	; 0x29
    3172:	9a a5       	ldd	r25, Y+42	; 0x2a
    3174:	20 e0       	ldi	r18, 0x00	; 0
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	4a e7       	ldi	r20, 0x7A	; 122
    317a:	55 e4       	ldi	r21, 0x45	; 69
    317c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3180:	dc 01       	movw	r26, r24
    3182:	cb 01       	movw	r24, r22
    3184:	8b a3       	std	Y+35, r24	; 0x23
    3186:	9c a3       	std	Y+36, r25	; 0x24
    3188:	ad a3       	std	Y+37, r26	; 0x25
    318a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    318c:	6b a1       	ldd	r22, Y+35	; 0x23
    318e:	7c a1       	ldd	r23, Y+36	; 0x24
    3190:	8d a1       	ldd	r24, Y+37	; 0x25
    3192:	9e a1       	ldd	r25, Y+38	; 0x26
    3194:	20 e0       	ldi	r18, 0x00	; 0
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	40 e8       	ldi	r20, 0x80	; 128
    319a:	5f e3       	ldi	r21, 0x3F	; 63
    319c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31a0:	88 23       	and	r24, r24
    31a2:	2c f4       	brge	.+10     	; 0x31ae <LCD_displayCharacter+0x16c>
		__ticks = 1;
    31a4:	81 e0       	ldi	r24, 0x01	; 1
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	9a a3       	std	Y+34, r25	; 0x22
    31aa:	89 a3       	std	Y+33, r24	; 0x21
    31ac:	3f c0       	rjmp	.+126    	; 0x322c <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    31ae:	6b a1       	ldd	r22, Y+35	; 0x23
    31b0:	7c a1       	ldd	r23, Y+36	; 0x24
    31b2:	8d a1       	ldd	r24, Y+37	; 0x25
    31b4:	9e a1       	ldd	r25, Y+38	; 0x26
    31b6:	20 e0       	ldi	r18, 0x00	; 0
    31b8:	3f ef       	ldi	r19, 0xFF	; 255
    31ba:	4f e7       	ldi	r20, 0x7F	; 127
    31bc:	57 e4       	ldi	r21, 0x47	; 71
    31be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31c2:	18 16       	cp	r1, r24
    31c4:	4c f5       	brge	.+82     	; 0x3218 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31c6:	6f a1       	ldd	r22, Y+39	; 0x27
    31c8:	78 a5       	ldd	r23, Y+40	; 0x28
    31ca:	89 a5       	ldd	r24, Y+41	; 0x29
    31cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	40 e2       	ldi	r20, 0x20	; 32
    31d4:	51 e4       	ldi	r21, 0x41	; 65
    31d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	bc 01       	movw	r22, r24
    31e0:	cd 01       	movw	r24, r26
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	9a a3       	std	Y+34, r25	; 0x22
    31ec:	89 a3       	std	Y+33, r24	; 0x21
    31ee:	0f c0       	rjmp	.+30     	; 0x320e <LCD_displayCharacter+0x1cc>
    31f0:	80 e9       	ldi	r24, 0x90	; 144
    31f2:	91 e0       	ldi	r25, 0x01	; 1
    31f4:	98 a3       	std	Y+32, r25	; 0x20
    31f6:	8f 8f       	std	Y+31, r24	; 0x1f
    31f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31fa:	98 a1       	ldd	r25, Y+32	; 0x20
    31fc:	01 97       	sbiw	r24, 0x01	; 1
    31fe:	f1 f7       	brne	.-4      	; 0x31fc <LCD_displayCharacter+0x1ba>
    3200:	98 a3       	std	Y+32, r25	; 0x20
    3202:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3204:	89 a1       	ldd	r24, Y+33	; 0x21
    3206:	9a a1       	ldd	r25, Y+34	; 0x22
    3208:	01 97       	sbiw	r24, 0x01	; 1
    320a:	9a a3       	std	Y+34, r25	; 0x22
    320c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    320e:	89 a1       	ldd	r24, Y+33	; 0x21
    3210:	9a a1       	ldd	r25, Y+34	; 0x22
    3212:	00 97       	sbiw	r24, 0x00	; 0
    3214:	69 f7       	brne	.-38     	; 0x31f0 <LCD_displayCharacter+0x1ae>
    3216:	14 c0       	rjmp	.+40     	; 0x3240 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3218:	6b a1       	ldd	r22, Y+35	; 0x23
    321a:	7c a1       	ldd	r23, Y+36	; 0x24
    321c:	8d a1       	ldd	r24, Y+37	; 0x25
    321e:	9e a1       	ldd	r25, Y+38	; 0x26
    3220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3224:	dc 01       	movw	r26, r24
    3226:	cb 01       	movw	r24, r22
    3228:	9a a3       	std	Y+34, r25	; 0x22
    322a:	89 a3       	std	Y+33, r24	; 0x21
    322c:	89 a1       	ldd	r24, Y+33	; 0x21
    322e:	9a a1       	ldd	r25, Y+34	; 0x22
    3230:	9e 8f       	std	Y+30, r25	; 0x1e
    3232:	8d 8f       	std	Y+29, r24	; 0x1d
    3234:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3236:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3238:	01 97       	sbiw	r24, 0x01	; 1
    323a:	f1 f7       	brne	.-4      	; 0x3238 <LCD_displayCharacter+0x1f6>
    323c:	9e 8f       	std	Y+30, r25	; 0x1e
    323e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    3240:	89 ad       	ldd	r24, Y+57	; 0x39
    3242:	28 2f       	mov	r18, r24
    3244:	30 e0       	ldi	r19, 0x00	; 0
    3246:	82 e0       	ldi	r24, 0x02	; 2
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	b9 01       	movw	r22, r18
    324c:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_setPortValue>
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	90 e0       	ldi	r25, 0x00	; 0
    3254:	a0 e8       	ldi	r26, 0x80	; 128
    3256:	bf e3       	ldi	r27, 0x3F	; 63
    3258:	89 8f       	std	Y+25, r24	; 0x19
    325a:	9a 8f       	std	Y+26, r25	; 0x1a
    325c:	ab 8f       	std	Y+27, r26	; 0x1b
    325e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3260:	69 8d       	ldd	r22, Y+25	; 0x19
    3262:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3264:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3266:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	4a e7       	ldi	r20, 0x7A	; 122
    326e:	55 e4       	ldi	r21, 0x45	; 69
    3270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3274:	dc 01       	movw	r26, r24
    3276:	cb 01       	movw	r24, r22
    3278:	8d 8b       	std	Y+21, r24	; 0x15
    327a:	9e 8b       	std	Y+22, r25	; 0x16
    327c:	af 8b       	std	Y+23, r26	; 0x17
    327e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3280:	6d 89       	ldd	r22, Y+21	; 0x15
    3282:	7e 89       	ldd	r23, Y+22	; 0x16
    3284:	8f 89       	ldd	r24, Y+23	; 0x17
    3286:	98 8d       	ldd	r25, Y+24	; 0x18
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e8       	ldi	r20, 0x80	; 128
    328e:	5f e3       	ldi	r21, 0x3F	; 63
    3290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3294:	88 23       	and	r24, r24
    3296:	2c f4       	brge	.+10     	; 0x32a2 <LCD_displayCharacter+0x260>
		__ticks = 1;
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	9c 8b       	std	Y+20, r25	; 0x14
    329e:	8b 8b       	std	Y+19, r24	; 0x13
    32a0:	3f c0       	rjmp	.+126    	; 0x3320 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    32a2:	6d 89       	ldd	r22, Y+21	; 0x15
    32a4:	7e 89       	ldd	r23, Y+22	; 0x16
    32a6:	8f 89       	ldd	r24, Y+23	; 0x17
    32a8:	98 8d       	ldd	r25, Y+24	; 0x18
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	3f ef       	ldi	r19, 0xFF	; 255
    32ae:	4f e7       	ldi	r20, 0x7F	; 127
    32b0:	57 e4       	ldi	r21, 0x47	; 71
    32b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32b6:	18 16       	cp	r1, r24
    32b8:	4c f5       	brge	.+82     	; 0x330c <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32ba:	69 8d       	ldd	r22, Y+25	; 0x19
    32bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32c2:	20 e0       	ldi	r18, 0x00	; 0
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	40 e2       	ldi	r20, 0x20	; 32
    32c8:	51 e4       	ldi	r21, 0x41	; 65
    32ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9c 8b       	std	Y+20, r25	; 0x14
    32e0:	8b 8b       	std	Y+19, r24	; 0x13
    32e2:	0f c0       	rjmp	.+30     	; 0x3302 <LCD_displayCharacter+0x2c0>
    32e4:	80 e9       	ldi	r24, 0x90	; 144
    32e6:	91 e0       	ldi	r25, 0x01	; 1
    32e8:	9a 8b       	std	Y+18, r25	; 0x12
    32ea:	89 8b       	std	Y+17, r24	; 0x11
    32ec:	89 89       	ldd	r24, Y+17	; 0x11
    32ee:	9a 89       	ldd	r25, Y+18	; 0x12
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <LCD_displayCharacter+0x2ae>
    32f4:	9a 8b       	std	Y+18, r25	; 0x12
    32f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32f8:	8b 89       	ldd	r24, Y+19	; 0x13
    32fa:	9c 89       	ldd	r25, Y+20	; 0x14
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	9c 8b       	std	Y+20, r25	; 0x14
    3300:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3302:	8b 89       	ldd	r24, Y+19	; 0x13
    3304:	9c 89       	ldd	r25, Y+20	; 0x14
    3306:	00 97       	sbiw	r24, 0x00	; 0
    3308:	69 f7       	brne	.-38     	; 0x32e4 <LCD_displayCharacter+0x2a2>
    330a:	14 c0       	rjmp	.+40     	; 0x3334 <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    330c:	6d 89       	ldd	r22, Y+21	; 0x15
    330e:	7e 89       	ldd	r23, Y+22	; 0x16
    3310:	8f 89       	ldd	r24, Y+23	; 0x17
    3312:	98 8d       	ldd	r25, Y+24	; 0x18
    3314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	9c 8b       	std	Y+20, r25	; 0x14
    331e:	8b 8b       	std	Y+19, r24	; 0x13
    3320:	8b 89       	ldd	r24, Y+19	; 0x13
    3322:	9c 89       	ldd	r25, Y+20	; 0x14
    3324:	98 8b       	std	Y+16, r25	; 0x10
    3326:	8f 87       	std	Y+15, r24	; 0x0f
    3328:	8f 85       	ldd	r24, Y+15	; 0x0f
    332a:	98 89       	ldd	r25, Y+16	; 0x10
    332c:	01 97       	sbiw	r24, 0x01	; 1
    332e:	f1 f7       	brne	.-4      	; 0x332c <LCD_displayCharacter+0x2ea>
    3330:	98 8b       	std	Y+16, r25	; 0x10
    3332:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3334:	83 e0       	ldi	r24, 0x03	; 3
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	65 e0       	ldi	r22, 0x05	; 5
    333a:	70 e0       	ldi	r23, 0x00	; 0
    333c:	40 e0       	ldi	r20, 0x00	; 0
    333e:	50 e0       	ldi	r21, 0x00	; 0
    3340:	0e 94 9d 0a 	call	0x153a	; 0x153a <LCD_setPinValue>
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	90 e0       	ldi	r25, 0x00	; 0
    3348:	a0 e8       	ldi	r26, 0x80	; 128
    334a:	bf e3       	ldi	r27, 0x3F	; 63
    334c:	8b 87       	std	Y+11, r24	; 0x0b
    334e:	9c 87       	std	Y+12, r25	; 0x0c
    3350:	ad 87       	std	Y+13, r26	; 0x0d
    3352:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3354:	6b 85       	ldd	r22, Y+11	; 0x0b
    3356:	7c 85       	ldd	r23, Y+12	; 0x0c
    3358:	8d 85       	ldd	r24, Y+13	; 0x0d
    335a:	9e 85       	ldd	r25, Y+14	; 0x0e
    335c:	20 e0       	ldi	r18, 0x00	; 0
    335e:	30 e0       	ldi	r19, 0x00	; 0
    3360:	4a e7       	ldi	r20, 0x7A	; 122
    3362:	55 e4       	ldi	r21, 0x45	; 69
    3364:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	8f 83       	std	Y+7, r24	; 0x07
    336e:	98 87       	std	Y+8, r25	; 0x08
    3370:	a9 87       	std	Y+9, r26	; 0x09
    3372:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3374:	6f 81       	ldd	r22, Y+7	; 0x07
    3376:	78 85       	ldd	r23, Y+8	; 0x08
    3378:	89 85       	ldd	r24, Y+9	; 0x09
    337a:	9a 85       	ldd	r25, Y+10	; 0x0a
    337c:	20 e0       	ldi	r18, 0x00	; 0
    337e:	30 e0       	ldi	r19, 0x00	; 0
    3380:	40 e8       	ldi	r20, 0x80	; 128
    3382:	5f e3       	ldi	r21, 0x3F	; 63
    3384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3388:	88 23       	and	r24, r24
    338a:	2c f4       	brge	.+10     	; 0x3396 <LCD_displayCharacter+0x354>
		__ticks = 1;
    338c:	81 e0       	ldi	r24, 0x01	; 1
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	9e 83       	std	Y+6, r25	; 0x06
    3392:	8d 83       	std	Y+5, r24	; 0x05
    3394:	3f c0       	rjmp	.+126    	; 0x3414 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    3396:	6f 81       	ldd	r22, Y+7	; 0x07
    3398:	78 85       	ldd	r23, Y+8	; 0x08
    339a:	89 85       	ldd	r24, Y+9	; 0x09
    339c:	9a 85       	ldd	r25, Y+10	; 0x0a
    339e:	20 e0       	ldi	r18, 0x00	; 0
    33a0:	3f ef       	ldi	r19, 0xFF	; 255
    33a2:	4f e7       	ldi	r20, 0x7F	; 127
    33a4:	57 e4       	ldi	r21, 0x47	; 71
    33a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33aa:	18 16       	cp	r1, r24
    33ac:	4c f5       	brge	.+82     	; 0x3400 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    33b6:	20 e0       	ldi	r18, 0x00	; 0
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	40 e2       	ldi	r20, 0x20	; 32
    33bc:	51 e4       	ldi	r21, 0x41	; 65
    33be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33c2:	dc 01       	movw	r26, r24
    33c4:	cb 01       	movw	r24, r22
    33c6:	bc 01       	movw	r22, r24
    33c8:	cd 01       	movw	r24, r26
    33ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33ce:	dc 01       	movw	r26, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	9e 83       	std	Y+6, r25	; 0x06
    33d4:	8d 83       	std	Y+5, r24	; 0x05
    33d6:	0f c0       	rjmp	.+30     	; 0x33f6 <LCD_displayCharacter+0x3b4>
    33d8:	80 e9       	ldi	r24, 0x90	; 144
    33da:	91 e0       	ldi	r25, 0x01	; 1
    33dc:	9c 83       	std	Y+4, r25	; 0x04
    33de:	8b 83       	std	Y+3, r24	; 0x03
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	9c 81       	ldd	r25, Y+4	; 0x04
    33e4:	01 97       	sbiw	r24, 0x01	; 1
    33e6:	f1 f7       	brne	.-4      	; 0x33e4 <LCD_displayCharacter+0x3a2>
    33e8:	9c 83       	std	Y+4, r25	; 0x04
    33ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ec:	8d 81       	ldd	r24, Y+5	; 0x05
    33ee:	9e 81       	ldd	r25, Y+6	; 0x06
    33f0:	01 97       	sbiw	r24, 0x01	; 1
    33f2:	9e 83       	std	Y+6, r25	; 0x06
    33f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33f6:	8d 81       	ldd	r24, Y+5	; 0x05
    33f8:	9e 81       	ldd	r25, Y+6	; 0x06
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	69 f7       	brne	.-38     	; 0x33d8 <LCD_displayCharacter+0x396>
    33fe:	14 c0       	rjmp	.+40     	; 0x3428 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3400:	6f 81       	ldd	r22, Y+7	; 0x07
    3402:	78 85       	ldd	r23, Y+8	; 0x08
    3404:	89 85       	ldd	r24, Y+9	; 0x09
    3406:	9a 85       	ldd	r25, Y+10	; 0x0a
    3408:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    340c:	dc 01       	movw	r26, r24
    340e:	cb 01       	movw	r24, r22
    3410:	9e 83       	std	Y+6, r25	; 0x06
    3412:	8d 83       	std	Y+5, r24	; 0x05
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	9a 83       	std	Y+2, r25	; 0x02
    341a:	89 83       	std	Y+1, r24	; 0x01
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	9a 81       	ldd	r25, Y+2	; 0x02
    3420:	01 97       	sbiw	r24, 0x01	; 1
    3422:	f1 f7       	brne	.-4      	; 0x3420 <LCD_displayCharacter+0x3de>
    3424:	9a 83       	std	Y+2, r25	; 0x02
    3426:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    3428:	e9 96       	adiw	r28, 0x39	; 57
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	cf 91       	pop	r28
    3436:	df 91       	pop	r29
    3438:	08 95       	ret

0000343a <LCD_DisplayInteger>:

void LCD_DisplayInteger(u32 num) {
    343a:	0f 93       	push	r16
    343c:	1f 93       	push	r17
    343e:	df 93       	push	r29
    3440:	cf 93       	push	r28
    3442:	cd b7       	in	r28, 0x3d	; 61
    3444:	de b7       	in	r29, 0x3e	; 62
    3446:	68 97       	sbiw	r28, 0x18	; 24
    3448:	0f b6       	in	r0, 0x3f	; 63
    344a:	f8 94       	cli
    344c:	de bf       	out	0x3e, r29	; 62
    344e:	0f be       	out	0x3f, r0	; 63
    3450:	cd bf       	out	0x3d, r28	; 61
    3452:	6d 8b       	std	Y+21, r22	; 0x15
    3454:	7e 8b       	std	Y+22, r23	; 0x16
    3456:	8f 8b       	std	Y+23, r24	; 0x17
    3458:	98 8f       	std	Y+24, r25	; 0x18

    // Convert the number to a string
    u8 buffer[16];
    u8 i = 0;
    345a:	1c 82       	std	Y+4, r1	; 0x04
    u8 isNegative = 0;
    345c:	1b 82       	std	Y+3, r1	; 0x03
        isNegative = 1;
        num = -num;
    }

    do {
        buffer[i++] = (char)(num % 10) + '0';
    345e:	8c 81       	ldd	r24, Y+4	; 0x04
    3460:	08 2f       	mov	r16, r24
    3462:	10 e0       	ldi	r17, 0x00	; 0
    3464:	8d 89       	ldd	r24, Y+21	; 0x15
    3466:	9e 89       	ldd	r25, Y+22	; 0x16
    3468:	af 89       	ldd	r26, Y+23	; 0x17
    346a:	b8 8d       	ldd	r27, Y+24	; 0x18
    346c:	2a e0       	ldi	r18, 0x0A	; 10
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	50 e0       	ldi	r21, 0x00	; 0
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <__udivmodsi4>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	28 2f       	mov	r18, r24
    3482:	20 5d       	subi	r18, 0xD0	; 208
    3484:	ce 01       	movw	r24, r28
    3486:	05 96       	adiw	r24, 0x05	; 5
    3488:	fc 01       	movw	r30, r24
    348a:	e0 0f       	add	r30, r16
    348c:	f1 1f       	adc	r31, r17
    348e:	20 83       	st	Z, r18
    3490:	8c 81       	ldd	r24, Y+4	; 0x04
    3492:	8f 5f       	subi	r24, 0xFF	; 255
    3494:	8c 83       	std	Y+4, r24	; 0x04
        num /= 10;
    3496:	8d 89       	ldd	r24, Y+21	; 0x15
    3498:	9e 89       	ldd	r25, Y+22	; 0x16
    349a:	af 89       	ldd	r26, Y+23	; 0x17
    349c:	b8 8d       	ldd	r27, Y+24	; 0x18
    349e:	2a e0       	ldi	r18, 0x0A	; 10
    34a0:	30 e0       	ldi	r19, 0x00	; 0
    34a2:	40 e0       	ldi	r20, 0x00	; 0
    34a4:	50 e0       	ldi	r21, 0x00	; 0
    34a6:	bc 01       	movw	r22, r24
    34a8:	cd 01       	movw	r24, r26
    34aa:	0e 94 ec 2e 	call	0x5dd8	; 0x5dd8 <__udivmodsi4>
    34ae:	da 01       	movw	r26, r20
    34b0:	c9 01       	movw	r24, r18
    34b2:	8d 8b       	std	Y+21, r24	; 0x15
    34b4:	9e 8b       	std	Y+22, r25	; 0x16
    34b6:	af 8b       	std	Y+23, r26	; 0x17
    34b8:	b8 8f       	std	Y+24, r27	; 0x18
    } while (num > 0);
    34ba:	8d 89       	ldd	r24, Y+21	; 0x15
    34bc:	9e 89       	ldd	r25, Y+22	; 0x16
    34be:	af 89       	ldd	r26, Y+23	; 0x17
    34c0:	b8 8d       	ldd	r27, Y+24	; 0x18
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	a1 05       	cpc	r26, r1
    34c6:	b1 05       	cpc	r27, r1
    34c8:	51 f6       	brne	.-108    	; 0x345e <LCD_DisplayInteger+0x24>

    if (isNegative) {
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	88 23       	and	r24, r24
    34ce:	69 f0       	breq	.+26     	; 0x34ea <LCD_DisplayInteger+0xb0>
        buffer[i++] = '-';
    34d0:	8c 81       	ldd	r24, Y+4	; 0x04
    34d2:	28 2f       	mov	r18, r24
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	ce 01       	movw	r24, r28
    34d8:	05 96       	adiw	r24, 0x05	; 5
    34da:	fc 01       	movw	r30, r24
    34dc:	e2 0f       	add	r30, r18
    34de:	f3 1f       	adc	r31, r19
    34e0:	8d e2       	ldi	r24, 0x2D	; 45
    34e2:	80 83       	st	Z, r24
    34e4:	8c 81       	ldd	r24, Y+4	; 0x04
    34e6:	8f 5f       	subi	r24, 0xFF	; 255
    34e8:	8c 83       	std	Y+4, r24	; 0x04
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    34ea:	1a 82       	std	Y+2, r1	; 0x02
    34ec:	3d c0       	rjmp	.+122    	; 0x3568 <LCD_DisplayInteger+0x12e>
        char temp = buffer[j];
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	28 2f       	mov	r18, r24
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	ce 01       	movw	r24, r28
    34f6:	05 96       	adiw	r24, 0x05	; 5
    34f8:	fc 01       	movw	r30, r24
    34fa:	e2 0f       	add	r30, r18
    34fc:	f3 1f       	adc	r31, r19
    34fe:	80 81       	ld	r24, Z
    3500:	89 83       	std	Y+1, r24	; 0x01
        buffer[j] = buffer[i - j - 1];
    3502:	8a 81       	ldd	r24, Y+2	; 0x02
    3504:	48 2f       	mov	r20, r24
    3506:	50 e0       	ldi	r21, 0x00	; 0
    3508:	8c 81       	ldd	r24, Y+4	; 0x04
    350a:	28 2f       	mov	r18, r24
    350c:	30 e0       	ldi	r19, 0x00	; 0
    350e:	8a 81       	ldd	r24, Y+2	; 0x02
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	b9 01       	movw	r22, r18
    3516:	68 1b       	sub	r22, r24
    3518:	79 0b       	sbc	r23, r25
    351a:	cb 01       	movw	r24, r22
    351c:	9c 01       	movw	r18, r24
    351e:	21 50       	subi	r18, 0x01	; 1
    3520:	30 40       	sbci	r19, 0x00	; 0
    3522:	ce 01       	movw	r24, r28
    3524:	05 96       	adiw	r24, 0x05	; 5
    3526:	fc 01       	movw	r30, r24
    3528:	e2 0f       	add	r30, r18
    352a:	f3 1f       	adc	r31, r19
    352c:	20 81       	ld	r18, Z
    352e:	ce 01       	movw	r24, r28
    3530:	05 96       	adiw	r24, 0x05	; 5
    3532:	fc 01       	movw	r30, r24
    3534:	e4 0f       	add	r30, r20
    3536:	f5 1f       	adc	r31, r21
    3538:	20 83       	st	Z, r18
        buffer[i - j - 1] = temp;
    353a:	8c 81       	ldd	r24, Y+4	; 0x04
    353c:	28 2f       	mov	r18, r24
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	8a 81       	ldd	r24, Y+2	; 0x02
    3542:	88 2f       	mov	r24, r24
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	a9 01       	movw	r20, r18
    3548:	48 1b       	sub	r20, r24
    354a:	59 0b       	sbc	r21, r25
    354c:	ca 01       	movw	r24, r20
    354e:	9c 01       	movw	r18, r24
    3550:	21 50       	subi	r18, 0x01	; 1
    3552:	30 40       	sbci	r19, 0x00	; 0
    3554:	ce 01       	movw	r24, r28
    3556:	05 96       	adiw	r24, 0x05	; 5
    3558:	fc 01       	movw	r30, r24
    355a:	e2 0f       	add	r30, r18
    355c:	f3 1f       	adc	r31, r19
    355e:	89 81       	ldd	r24, Y+1	; 0x01
    3560:	80 83       	st	Z, r24
        buffer[i++] = '-';
    }

    // Reverse the string
    u8 j;
    for (j = 0; j < i / 2; j++) {
    3562:	8a 81       	ldd	r24, Y+2	; 0x02
    3564:	8f 5f       	subi	r24, 0xFF	; 255
    3566:	8a 83       	std	Y+2, r24	; 0x02
    3568:	8c 81       	ldd	r24, Y+4	; 0x04
    356a:	98 2f       	mov	r25, r24
    356c:	96 95       	lsr	r25
    356e:	8a 81       	ldd	r24, Y+2	; 0x02
    3570:	89 17       	cp	r24, r25
    3572:	08 f4       	brcc	.+2      	; 0x3576 <LCD_DisplayInteger+0x13c>
    3574:	bc cf       	rjmp	.-136    	; 0x34ee <LCD_DisplayInteger+0xb4>
        buffer[j] = buffer[i - j - 1];
        buffer[i - j - 1] = temp;
    }

    // Null-terminate the string
    buffer[i] = '\0';
    3576:	8c 81       	ldd	r24, Y+4	; 0x04
    3578:	28 2f       	mov	r18, r24
    357a:	30 e0       	ldi	r19, 0x00	; 0
    357c:	ce 01       	movw	r24, r28
    357e:	05 96       	adiw	r24, 0x05	; 5
    3580:	fc 01       	movw	r30, r24
    3582:	e2 0f       	add	r30, r18
    3584:	f3 1f       	adc	r31, r19
    3586:	10 82       	st	Z, r1

    // Write the string to LCD
    LCD_displayString(buffer);
    3588:	ce 01       	movw	r24, r28
    358a:	05 96       	adiw	r24, 0x05	; 5
    358c:	0e 94 a1 1b 	call	0x3742	; 0x3742 <LCD_displayString>
}
    3590:	68 96       	adiw	r28, 0x18	; 24
    3592:	0f b6       	in	r0, 0x3f	; 63
    3594:	f8 94       	cli
    3596:	de bf       	out	0x3e, r29	; 62
    3598:	0f be       	out	0x3f, r0	; 63
    359a:	cd bf       	out	0x3d, r28	; 61
    359c:	cf 91       	pop	r28
    359e:	df 91       	pop	r29
    35a0:	1f 91       	pop	r17
    35a2:	0f 91       	pop	r16
    35a4:	08 95       	ret

000035a6 <LCD_init>:


void LCD_init(void)
{
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	cd b7       	in	r28, 0x3d	; 61
    35ac:	de b7       	in	r29, 0x3e	; 62
    35ae:	2e 97       	sbiw	r28, 0x0e	; 14
    35b0:	0f b6       	in	r0, 0x3f	; 63
    35b2:	f8 94       	cli
    35b4:	de bf       	out	0x3e, r29	; 62
    35b6:	0f be       	out	0x3f, r0	; 63
    35b8:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    35ba:	83 e0       	ldi	r24, 0x03	; 3
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	64 e0       	ldi	r22, 0x04	; 4
    35c0:	70 e0       	ldi	r23, 0x00	; 0
    35c2:	41 e0       	ldi	r20, 0x01	; 1
    35c4:	50 e0       	ldi	r21, 0x00	; 0
    35c6:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    35ca:	83 e0       	ldi	r24, 0x03	; 3
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	65 e0       	ldi	r22, 0x05	; 5
    35d0:	70 e0       	ldi	r23, 0x00	; 0
    35d2:	41 e0       	ldi	r20, 0x01	; 1
    35d4:	50 e0       	ldi	r21, 0x00	; 0
    35d6:	0e 94 b2 09 	call	0x1364	; 0x1364 <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    35da:	82 e0       	ldi	r24, 0x02	; 2
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	6f ef       	ldi	r22, 0xFF	; 255
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	0e 94 23 0c 	call	0x1846	; 0x1846 <LCD_setPortDirection>
    35e6:	80 e0       	ldi	r24, 0x00	; 0
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	a0 ea       	ldi	r26, 0xA0	; 160
    35ec:	b1 e4       	ldi	r27, 0x41	; 65
    35ee:	8b 87       	std	Y+11, r24	; 0x0b
    35f0:	9c 87       	std	Y+12, r25	; 0x0c
    35f2:	ad 87       	std	Y+13, r26	; 0x0d
    35f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    35f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    35fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    35fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    35fe:	20 e0       	ldi	r18, 0x00	; 0
    3600:	30 e0       	ldi	r19, 0x00	; 0
    3602:	4a e7       	ldi	r20, 0x7A	; 122
    3604:	55 e4       	ldi	r21, 0x45	; 69
    3606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    360a:	dc 01       	movw	r26, r24
    360c:	cb 01       	movw	r24, r22
    360e:	8f 83       	std	Y+7, r24	; 0x07
    3610:	98 87       	std	Y+8, r25	; 0x08
    3612:	a9 87       	std	Y+9, r26	; 0x09
    3614:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3616:	6f 81       	ldd	r22, Y+7	; 0x07
    3618:	78 85       	ldd	r23, Y+8	; 0x08
    361a:	89 85       	ldd	r24, Y+9	; 0x09
    361c:	9a 85       	ldd	r25, Y+10	; 0x0a
    361e:	20 e0       	ldi	r18, 0x00	; 0
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	40 e8       	ldi	r20, 0x80	; 128
    3624:	5f e3       	ldi	r21, 0x3F	; 63
    3626:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    362a:	88 23       	and	r24, r24
    362c:	2c f4       	brge	.+10     	; 0x3638 <LCD_init+0x92>
		__ticks = 1;
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	9e 83       	std	Y+6, r25	; 0x06
    3634:	8d 83       	std	Y+5, r24	; 0x05
    3636:	3f c0       	rjmp	.+126    	; 0x36b6 <LCD_init+0x110>
	else if (__tmp > 65535)
    3638:	6f 81       	ldd	r22, Y+7	; 0x07
    363a:	78 85       	ldd	r23, Y+8	; 0x08
    363c:	89 85       	ldd	r24, Y+9	; 0x09
    363e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3640:	20 e0       	ldi	r18, 0x00	; 0
    3642:	3f ef       	ldi	r19, 0xFF	; 255
    3644:	4f e7       	ldi	r20, 0x7F	; 127
    3646:	57 e4       	ldi	r21, 0x47	; 71
    3648:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    364c:	18 16       	cp	r1, r24
    364e:	4c f5       	brge	.+82     	; 0x36a2 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3650:	6b 85       	ldd	r22, Y+11	; 0x0b
    3652:	7c 85       	ldd	r23, Y+12	; 0x0c
    3654:	8d 85       	ldd	r24, Y+13	; 0x0d
    3656:	9e 85       	ldd	r25, Y+14	; 0x0e
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9e 83       	std	Y+6, r25	; 0x06
    3676:	8d 83       	std	Y+5, r24	; 0x05
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <LCD_init+0xf2>
    367a:	80 e9       	ldi	r24, 0x90	; 144
    367c:	91 e0       	ldi	r25, 0x01	; 1
    367e:	9c 83       	std	Y+4, r25	; 0x04
    3680:	8b 83       	std	Y+3, r24	; 0x03
    3682:	8b 81       	ldd	r24, Y+3	; 0x03
    3684:	9c 81       	ldd	r25, Y+4	; 0x04
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <LCD_init+0xe0>
    368a:	9c 83       	std	Y+4, r25	; 0x04
    368c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	8d 81       	ldd	r24, Y+5	; 0x05
    3690:	9e 81       	ldd	r25, Y+6	; 0x06
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	9e 83       	std	Y+6, r25	; 0x06
    3696:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	8d 81       	ldd	r24, Y+5	; 0x05
    369a:	9e 81       	ldd	r25, Y+6	; 0x06
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <LCD_init+0xd4>
    36a0:	14 c0       	rjmp	.+40     	; 0x36ca <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	6f 81       	ldd	r22, Y+7	; 0x07
    36a4:	78 85       	ldd	r23, Y+8	; 0x08
    36a6:	89 85       	ldd	r24, Y+9	; 0x09
    36a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    36aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36ae:	dc 01       	movw	r26, r24
    36b0:	cb 01       	movw	r24, r22
    36b2:	9e 83       	std	Y+6, r25	; 0x06
    36b4:	8d 83       	std	Y+5, r24	; 0x05
    36b6:	8d 81       	ldd	r24, Y+5	; 0x05
    36b8:	9e 81       	ldd	r25, Y+6	; 0x06
    36ba:	9a 83       	std	Y+2, r25	; 0x02
    36bc:	89 83       	std	Y+1, r24	; 0x01
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	01 97       	sbiw	r24, 0x01	; 1
    36c4:	f1 f7       	brne	.-4      	; 0x36c2 <LCD_init+0x11c>
    36c6:	9a 83       	std	Y+2, r25	; 0x02
    36c8:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    36ca:	88 e3       	ldi	r24, 0x38	; 56
    36cc:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    36d0:	8c e0       	ldi	r24, 0x0C	; 12
    36d2:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
}
    36dc:	2e 96       	adiw	r28, 0x0e	; 14
    36de:	0f b6       	in	r0, 0x3f	; 63
    36e0:	f8 94       	cli
    36e2:	de bf       	out	0x3e, r29	; 62
    36e4:	0f be       	out	0x3f, r0	; 63
    36e6:	cd bf       	out	0x3d, r28	; 61
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	08 95       	ret

000036ee <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    36ee:	df 93       	push	r29
    36f0:	cf 93       	push	r28
    36f2:	00 d0       	rcall	.+0      	; 0x36f4 <LCD_GoToXY+0x6>
    36f4:	00 d0       	rcall	.+0      	; 0x36f6 <LCD_GoToXY+0x8>
    36f6:	cd b7       	in	r28, 0x3d	; 61
    36f8:	de b7       	in	r29, 0x3e	; 62
    36fa:	89 83       	std	Y+1, r24	; 0x01
    36fc:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    36fe:	89 81       	ldd	r24, Y+1	; 0x01
    3700:	88 32       	cpi	r24, 0x28	; 40
    3702:	c0 f4       	brcc	.+48     	; 0x3734 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    3704:	89 81       	ldd	r24, Y+1	; 0x01
    3706:	28 2f       	mov	r18, r24
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	3c 83       	std	Y+4, r19	; 0x04
    370c:	2b 83       	std	Y+3, r18	; 0x03
    370e:	8b 81       	ldd	r24, Y+3	; 0x03
    3710:	9c 81       	ldd	r25, Y+4	; 0x04
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	31 f0       	breq	.+12     	; 0x3722 <LCD_GoToXY+0x34>
    3716:	2b 81       	ldd	r18, Y+3	; 0x03
    3718:	3c 81       	ldd	r19, Y+4	; 0x04
    371a:	21 30       	cpi	r18, 0x01	; 1
    371c:	31 05       	cpc	r19, r1
    371e:	31 f0       	breq	.+12     	; 0x372c <LCD_GoToXY+0x3e>
    3720:	09 c0       	rjmp	.+18     	; 0x3734 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	80 58       	subi	r24, 0x80	; 128
    3726:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
    372a:	04 c0       	rjmp	.+8      	; 0x3734 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	80 54       	subi	r24, 0x40	; 64
    3730:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
			break;
		}
	}
}
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	0f 90       	pop	r0
    373c:	cf 91       	pop	r28
    373e:	df 91       	pop	r29
    3740:	08 95       	ret

00003742 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3742:	df 93       	push	r29
    3744:	cf 93       	push	r28
    3746:	00 d0       	rcall	.+0      	; 0x3748 <LCD_displayString+0x6>
    3748:	0f 92       	push	r0
    374a:	cd b7       	in	r28, 0x3d	; 61
    374c:	de b7       	in	r29, 0x3e	; 62
    374e:	9b 83       	std	Y+3, r25	; 0x03
    3750:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3752:	19 82       	std	Y+1, r1	; 0x01
    3754:	0e c0       	rjmp	.+28     	; 0x3772 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3756:	89 81       	ldd	r24, Y+1	; 0x01
    3758:	28 2f       	mov	r18, r24
    375a:	30 e0       	ldi	r19, 0x00	; 0
    375c:	8a 81       	ldd	r24, Y+2	; 0x02
    375e:	9b 81       	ldd	r25, Y+3	; 0x03
    3760:	fc 01       	movw	r30, r24
    3762:	e2 0f       	add	r30, r18
    3764:	f3 1f       	adc	r31, r19
    3766:	80 81       	ld	r24, Z
    3768:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_displayCharacter>
		i++;
    376c:	89 81       	ldd	r24, Y+1	; 0x01
    376e:	8f 5f       	subi	r24, 0xFF	; 255
    3770:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3772:	89 81       	ldd	r24, Y+1	; 0x01
    3774:	28 2f       	mov	r18, r24
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	8a 81       	ldd	r24, Y+2	; 0x02
    377a:	9b 81       	ldd	r25, Y+3	; 0x03
    377c:	fc 01       	movw	r30, r24
    377e:	e2 0f       	add	r30, r18
    3780:	f3 1f       	adc	r31, r19
    3782:	80 81       	ld	r24, Z
    3784:	88 23       	and	r24, r24
    3786:	39 f7       	brne	.-50     	; 0x3756 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	cd b7       	in	r28, 0x3d	; 61
    379a:	de b7       	in	r29, 0x3e	; 62
    379c:	28 97       	sbiw	r28, 0x08	; 8
    379e:	0f b6       	in	r0, 0x3f	; 63
    37a0:	f8 94       	cli
    37a2:	de bf       	out	0x3e, r29	; 62
    37a4:	0f be       	out	0x3f, r0	; 63
    37a6:	cd bf       	out	0x3d, r28	; 61
    37a8:	8b 83       	std	Y+3, r24	; 0x03
    37aa:	6c 83       	std	Y+4, r22	; 0x04
    37ac:	5e 83       	std	Y+6, r21	; 0x06
    37ae:	4d 83       	std	Y+5, r20	; 0x05
    37b0:	38 87       	std	Y+8, r19	; 0x08
    37b2:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    37b4:	1a 82       	std	Y+2, r1	; 0x02
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    37ba:	8b 81       	ldd	r24, Y+3	; 0x03
    37bc:	88 23       	and	r24, r24
    37be:	49 f4       	brne	.+18     	; 0x37d2 <LCD_String_xy+0x3e>
    37c0:	8c 81       	ldd	r24, Y+4	; 0x04
    37c2:	80 31       	cpi	r24, 0x10	; 16
    37c4:	30 f4       	brcc	.+12     	; 0x37d2 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    37c6:	8c 81       	ldd	r24, Y+4	; 0x04
    37c8:	8f 70       	andi	r24, 0x0F	; 15
    37ca:	80 68       	ori	r24, 0x80	; 128
    37cc:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
    37d0:	3a c0       	rjmp	.+116    	; 0x3846 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    37d2:	8b 81       	ldd	r24, Y+3	; 0x03
    37d4:	81 30       	cpi	r24, 0x01	; 1
    37d6:	b9 f5       	brne	.+110    	; 0x3846 <LCD_String_xy+0xb2>
    37d8:	8c 81       	ldd	r24, Y+4	; 0x04
    37da:	80 31       	cpi	r24, 0x10	; 16
    37dc:	a0 f5       	brcc	.+104    	; 0x3846 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    37de:	8c 81       	ldd	r24, Y+4	; 0x04
    37e0:	8f 70       	andi	r24, 0x0F	; 15
    37e2:	80 6c       	ori	r24, 0xC0	; 192
    37e4:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
    37e8:	2e c0       	rjmp	.+92     	; 0x3846 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	28 2f       	mov	r18, r24
    37ee:	30 e0       	ldi	r19, 0x00	; 0
    37f0:	8d 81       	ldd	r24, Y+5	; 0x05
    37f2:	9e 81       	ldd	r25, Y+6	; 0x06
    37f4:	fc 01       	movw	r30, r24
    37f6:	e2 0f       	add	r30, r18
    37f8:	f3 1f       	adc	r31, r19
    37fa:	80 81       	ld	r24, Z
    37fc:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_displayCharacter>
		i++;
    3800:	8a 81       	ldd	r24, Y+2	; 0x02
    3802:	8f 5f       	subi	r24, 0xFF	; 255
    3804:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    3806:	8b 81       	ldd	r24, Y+3	; 0x03
    3808:	88 23       	and	r24, r24
    380a:	71 f4       	brne	.+28     	; 0x3828 <LCD_String_xy+0x94>
    380c:	8c 81       	ldd	r24, Y+4	; 0x04
    380e:	83 30       	cpi	r24, 0x03	; 3
    3810:	58 f0       	brcs	.+22     	; 0x3828 <LCD_String_xy+0x94>
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
    3814:	8b 30       	cpi	r24, 0x0B	; 11
    3816:	41 f4       	brne	.+16     	; 0x3828 <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	60 e0       	ldi	r22, 0x00	; 0
    381c:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_GoToXY>
			c++;
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	8f 5f       	subi	r24, 0xFF	; 255
    3824:	89 83       	std	Y+1, r24	; 0x01
    3826:	0b c0       	rjmp	.+22     	; 0x383e <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    3828:	8b 81       	ldd	r24, Y+3	; 0x03
    382a:	81 30       	cpi	r24, 0x01	; 1
    382c:	41 f4       	brne	.+16     	; 0x383e <LCD_String_xy+0xaa>
    382e:	8c 81       	ldd	r24, Y+4	; 0x04
    3830:	83 30       	cpi	r24, 0x03	; 3
    3832:	28 f0       	brcs	.+10     	; 0x383e <LCD_String_xy+0xaa>
    3834:	8a 81       	ldd	r24, Y+2	; 0x02
    3836:	8b 30       	cpi	r24, 0x0B	; 11
    3838:	11 f4       	brne	.+4      	; 0x383e <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    383a:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_ClearScreen>
		}

		*count = c;
    383e:	ef 81       	ldd	r30, Y+7	; 0x07
    3840:	f8 85       	ldd	r31, Y+8	; 0x08
    3842:	89 81       	ldd	r24, Y+1	; 0x01
    3844:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3846:	8a 81       	ldd	r24, Y+2	; 0x02
    3848:	28 2f       	mov	r18, r24
    384a:	30 e0       	ldi	r19, 0x00	; 0
    384c:	8d 81       	ldd	r24, Y+5	; 0x05
    384e:	9e 81       	ldd	r25, Y+6	; 0x06
    3850:	fc 01       	movw	r30, r24
    3852:	e2 0f       	add	r30, r18
    3854:	f3 1f       	adc	r31, r19
    3856:	80 81       	ld	r24, Z
    3858:	88 23       	and	r24, r24
    385a:	39 f6       	brne	.-114    	; 0x37ea <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    385c:	28 96       	adiw	r28, 0x08	; 8
    385e:	0f b6       	in	r0, 0x3f	; 63
    3860:	f8 94       	cli
    3862:	de bf       	out	0x3e, r29	; 62
    3864:	0f be       	out	0x3f, r0	; 63
    3866:	cd bf       	out	0x3d, r28	; 61
    3868:	cf 91       	pop	r28
    386a:	df 91       	pop	r29
    386c:	08 95       	ret

0000386e <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    386e:	df 93       	push	r29
    3870:	cf 93       	push	r28
    3872:	cd b7       	in	r28, 0x3d	; 61
    3874:	de b7       	in	r29, 0x3e	; 62
    3876:	2e 97       	sbiw	r28, 0x0e	; 14
    3878:	0f b6       	in	r0, 0x3f	; 63
    387a:	f8 94       	cli
    387c:	de bf       	out	0x3e, r29	; 62
    387e:	0f be       	out	0x3f, r0	; 63
    3880:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	a0 e0       	ldi	r26, 0x00	; 0
    388e:	b0 e4       	ldi	r27, 0x40	; 64
    3890:	8b 87       	std	Y+11, r24	; 0x0b
    3892:	9c 87       	std	Y+12, r25	; 0x0c
    3894:	ad 87       	std	Y+13, r26	; 0x0d
    3896:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3898:	6b 85       	ldd	r22, Y+11	; 0x0b
    389a:	7c 85       	ldd	r23, Y+12	; 0x0c
    389c:	8d 85       	ldd	r24, Y+13	; 0x0d
    389e:	9e 85       	ldd	r25, Y+14	; 0x0e
    38a0:	20 e0       	ldi	r18, 0x00	; 0
    38a2:	30 e0       	ldi	r19, 0x00	; 0
    38a4:	4a e7       	ldi	r20, 0x7A	; 122
    38a6:	55 e4       	ldi	r21, 0x45	; 69
    38a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ac:	dc 01       	movw	r26, r24
    38ae:	cb 01       	movw	r24, r22
    38b0:	8f 83       	std	Y+7, r24	; 0x07
    38b2:	98 87       	std	Y+8, r25	; 0x08
    38b4:	a9 87       	std	Y+9, r26	; 0x09
    38b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38b8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ba:	78 85       	ldd	r23, Y+8	; 0x08
    38bc:	89 85       	ldd	r24, Y+9	; 0x09
    38be:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c0:	20 e0       	ldi	r18, 0x00	; 0
    38c2:	30 e0       	ldi	r19, 0x00	; 0
    38c4:	40 e8       	ldi	r20, 0x80	; 128
    38c6:	5f e3       	ldi	r21, 0x3F	; 63
    38c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    38cc:	88 23       	and	r24, r24
    38ce:	2c f4       	brge	.+10     	; 0x38da <LCD_ClearScreen+0x6c>
		__ticks = 1;
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	9e 83       	std	Y+6, r25	; 0x06
    38d6:	8d 83       	std	Y+5, r24	; 0x05
    38d8:	3f c0       	rjmp	.+126    	; 0x3958 <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    38da:	6f 81       	ldd	r22, Y+7	; 0x07
    38dc:	78 85       	ldd	r23, Y+8	; 0x08
    38de:	89 85       	ldd	r24, Y+9	; 0x09
    38e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	3f ef       	ldi	r19, 0xFF	; 255
    38e6:	4f e7       	ldi	r20, 0x7F	; 127
    38e8:	57 e4       	ldi	r21, 0x47	; 71
    38ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38ee:	18 16       	cp	r1, r24
    38f0:	4c f5       	brge	.+82     	; 0x3944 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    38f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    38f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    38f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    38fa:	20 e0       	ldi	r18, 0x00	; 0
    38fc:	30 e0       	ldi	r19, 0x00	; 0
    38fe:	40 e2       	ldi	r20, 0x20	; 32
    3900:	51 e4       	ldi	r21, 0x41	; 65
    3902:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3906:	dc 01       	movw	r26, r24
    3908:	cb 01       	movw	r24, r22
    390a:	bc 01       	movw	r22, r24
    390c:	cd 01       	movw	r24, r26
    390e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3912:	dc 01       	movw	r26, r24
    3914:	cb 01       	movw	r24, r22
    3916:	9e 83       	std	Y+6, r25	; 0x06
    3918:	8d 83       	std	Y+5, r24	; 0x05
    391a:	0f c0       	rjmp	.+30     	; 0x393a <LCD_ClearScreen+0xcc>
    391c:	80 e9       	ldi	r24, 0x90	; 144
    391e:	91 e0       	ldi	r25, 0x01	; 1
    3920:	9c 83       	std	Y+4, r25	; 0x04
    3922:	8b 83       	std	Y+3, r24	; 0x03
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	9c 81       	ldd	r25, Y+4	; 0x04
    3928:	01 97       	sbiw	r24, 0x01	; 1
    392a:	f1 f7       	brne	.-4      	; 0x3928 <LCD_ClearScreen+0xba>
    392c:	9c 83       	std	Y+4, r25	; 0x04
    392e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3930:	8d 81       	ldd	r24, Y+5	; 0x05
    3932:	9e 81       	ldd	r25, Y+6	; 0x06
    3934:	01 97       	sbiw	r24, 0x01	; 1
    3936:	9e 83       	std	Y+6, r25	; 0x06
    3938:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393a:	8d 81       	ldd	r24, Y+5	; 0x05
    393c:	9e 81       	ldd	r25, Y+6	; 0x06
    393e:	00 97       	sbiw	r24, 0x00	; 0
    3940:	69 f7       	brne	.-38     	; 0x391c <LCD_ClearScreen+0xae>
    3942:	14 c0       	rjmp	.+40     	; 0x396c <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3944:	6f 81       	ldd	r22, Y+7	; 0x07
    3946:	78 85       	ldd	r23, Y+8	; 0x08
    3948:	89 85       	ldd	r24, Y+9	; 0x09
    394a:	9a 85       	ldd	r25, Y+10	; 0x0a
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	9e 83       	std	Y+6, r25	; 0x06
    3956:	8d 83       	std	Y+5, r24	; 0x05
    3958:	8d 81       	ldd	r24, Y+5	; 0x05
    395a:	9e 81       	ldd	r25, Y+6	; 0x06
    395c:	9a 83       	std	Y+2, r25	; 0x02
    395e:	89 83       	std	Y+1, r24	; 0x01
    3960:	89 81       	ldd	r24, Y+1	; 0x01
    3962:	9a 81       	ldd	r25, Y+2	; 0x02
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	f1 f7       	brne	.-4      	; 0x3964 <LCD_ClearScreen+0xf6>
    3968:	9a 83       	std	Y+2, r25	; 0x02
    396a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    396c:	2e 96       	adiw	r28, 0x0e	; 14
    396e:	0f b6       	in	r0, 0x3f	; 63
    3970:	f8 94       	cli
    3972:	de bf       	out	0x3e, r29	; 62
    3974:	0f be       	out	0x3f, r0	; 63
    3976:	cd bf       	out	0x3d, r28	; 61
    3978:	cf 91       	pop	r28
    397a:	df 91       	pop	r29
    397c:	08 95       	ret

0000397e <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    397e:	df 93       	push	r29
    3980:	cf 93       	push	r28
    3982:	cd b7       	in	r28, 0x3d	; 61
    3984:	de b7       	in	r29, 0x3e	; 62
    3986:	2e 97       	sbiw	r28, 0x0e	; 14
    3988:	0f b6       	in	r0, 0x3f	; 63
    398a:	f8 94       	cli
    398c:	de bf       	out	0x3e, r29	; 62
    398e:	0f be       	out	0x3f, r0	; 63
    3990:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3992:	88 e1       	ldi	r24, 0x18	; 24
    3994:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
    3998:	80 e0       	ldi	r24, 0x00	; 0
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	a0 ea       	ldi	r26, 0xA0	; 160
    399e:	b1 e4       	ldi	r27, 0x41	; 65
    39a0:	8b 87       	std	Y+11, r24	; 0x0b
    39a2:	9c 87       	std	Y+12, r25	; 0x0c
    39a4:	ad 87       	std	Y+13, r26	; 0x0d
    39a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    39aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    39ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    39ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	4a e7       	ldi	r20, 0x7A	; 122
    39b6:	55 e4       	ldi	r21, 0x45	; 69
    39b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39bc:	dc 01       	movw	r26, r24
    39be:	cb 01       	movw	r24, r22
    39c0:	8f 83       	std	Y+7, r24	; 0x07
    39c2:	98 87       	std	Y+8, r25	; 0x08
    39c4:	a9 87       	std	Y+9, r26	; 0x09
    39c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39c8:	6f 81       	ldd	r22, Y+7	; 0x07
    39ca:	78 85       	ldd	r23, Y+8	; 0x08
    39cc:	89 85       	ldd	r24, Y+9	; 0x09
    39ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d0:	20 e0       	ldi	r18, 0x00	; 0
    39d2:	30 e0       	ldi	r19, 0x00	; 0
    39d4:	40 e8       	ldi	r20, 0x80	; 128
    39d6:	5f e3       	ldi	r21, 0x3F	; 63
    39d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39dc:	88 23       	and	r24, r24
    39de:	2c f4       	brge	.+10     	; 0x39ea <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    39e0:	81 e0       	ldi	r24, 0x01	; 1
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	9e 83       	std	Y+6, r25	; 0x06
    39e6:	8d 83       	std	Y+5, r24	; 0x05
    39e8:	3f c0       	rjmp	.+126    	; 0x3a68 <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    39ea:	6f 81       	ldd	r22, Y+7	; 0x07
    39ec:	78 85       	ldd	r23, Y+8	; 0x08
    39ee:	89 85       	ldd	r24, Y+9	; 0x09
    39f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39f2:	20 e0       	ldi	r18, 0x00	; 0
    39f4:	3f ef       	ldi	r19, 0xFF	; 255
    39f6:	4f e7       	ldi	r20, 0x7F	; 127
    39f8:	57 e4       	ldi	r21, 0x47	; 71
    39fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39fe:	18 16       	cp	r1, r24
    3a00:	4c f5       	brge	.+82     	; 0x3a54 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a02:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a04:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a06:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a08:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a0a:	20 e0       	ldi	r18, 0x00	; 0
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	40 e2       	ldi	r20, 0x20	; 32
    3a10:	51 e4       	ldi	r21, 0x41	; 65
    3a12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a16:	dc 01       	movw	r26, r24
    3a18:	cb 01       	movw	r24, r22
    3a1a:	bc 01       	movw	r22, r24
    3a1c:	cd 01       	movw	r24, r26
    3a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a22:	dc 01       	movw	r26, r24
    3a24:	cb 01       	movw	r24, r22
    3a26:	9e 83       	std	Y+6, r25	; 0x06
    3a28:	8d 83       	std	Y+5, r24	; 0x05
    3a2a:	0f c0       	rjmp	.+30     	; 0x3a4a <LCD_ShiftingLeft+0xcc>
    3a2c:	80 e9       	ldi	r24, 0x90	; 144
    3a2e:	91 e0       	ldi	r25, 0x01	; 1
    3a30:	9c 83       	std	Y+4, r25	; 0x04
    3a32:	8b 83       	std	Y+3, r24	; 0x03
    3a34:	8b 81       	ldd	r24, Y+3	; 0x03
    3a36:	9c 81       	ldd	r25, Y+4	; 0x04
    3a38:	01 97       	sbiw	r24, 0x01	; 1
    3a3a:	f1 f7       	brne	.-4      	; 0x3a38 <LCD_ShiftingLeft+0xba>
    3a3c:	9c 83       	std	Y+4, r25	; 0x04
    3a3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a40:	8d 81       	ldd	r24, Y+5	; 0x05
    3a42:	9e 81       	ldd	r25, Y+6	; 0x06
    3a44:	01 97       	sbiw	r24, 0x01	; 1
    3a46:	9e 83       	std	Y+6, r25	; 0x06
    3a48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	69 f7       	brne	.-38     	; 0x3a2c <LCD_ShiftingLeft+0xae>
    3a52:	14 c0       	rjmp	.+40     	; 0x3a7c <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a54:	6f 81       	ldd	r22, Y+7	; 0x07
    3a56:	78 85       	ldd	r23, Y+8	; 0x08
    3a58:	89 85       	ldd	r24, Y+9	; 0x09
    3a5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a60:	dc 01       	movw	r26, r24
    3a62:	cb 01       	movw	r24, r22
    3a64:	9e 83       	std	Y+6, r25	; 0x06
    3a66:	8d 83       	std	Y+5, r24	; 0x05
    3a68:	8d 81       	ldd	r24, Y+5	; 0x05
    3a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6c:	9a 83       	std	Y+2, r25	; 0x02
    3a6e:	89 83       	std	Y+1, r24	; 0x01
    3a70:	89 81       	ldd	r24, Y+1	; 0x01
    3a72:	9a 81       	ldd	r25, Y+2	; 0x02
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <LCD_ShiftingLeft+0xf6>
    3a78:	9a 83       	std	Y+2, r25	; 0x02
    3a7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3a7c:	2e 96       	adiw	r28, 0x0e	; 14
    3a7e:	0f b6       	in	r0, 0x3f	; 63
    3a80:	f8 94       	cli
    3a82:	de bf       	out	0x3e, r29	; 62
    3a84:	0f be       	out	0x3f, r0	; 63
    3a86:	cd bf       	out	0x3d, r28	; 61
    3a88:	cf 91       	pop	r28
    3a8a:	df 91       	pop	r29
    3a8c:	08 95       	ret

00003a8e <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3a8e:	df 93       	push	r29
    3a90:	cf 93       	push	r28
    3a92:	cd b7       	in	r28, 0x3d	; 61
    3a94:	de b7       	in	r29, 0x3e	; 62
    3a96:	2e 97       	sbiw	r28, 0x0e	; 14
    3a98:	0f b6       	in	r0, 0x3f	; 63
    3a9a:	f8 94       	cli
    3a9c:	de bf       	out	0x3e, r29	; 62
    3a9e:	0f be       	out	0x3f, r0	; 63
    3aa0:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3aa2:	8c e1       	ldi	r24, 0x1C	; 28
    3aa4:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
    3aa8:	80 e0       	ldi	r24, 0x00	; 0
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	a0 ea       	ldi	r26, 0xA0	; 160
    3aae:	b1 e4       	ldi	r27, 0x41	; 65
    3ab0:	8b 87       	std	Y+11, r24	; 0x0b
    3ab2:	9c 87       	std	Y+12, r25	; 0x0c
    3ab4:	ad 87       	std	Y+13, r26	; 0x0d
    3ab6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ab8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3aba:	7c 85       	ldd	r23, Y+12	; 0x0c
    3abc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3abe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ac0:	20 e0       	ldi	r18, 0x00	; 0
    3ac2:	30 e0       	ldi	r19, 0x00	; 0
    3ac4:	4a e7       	ldi	r20, 0x7A	; 122
    3ac6:	55 e4       	ldi	r21, 0x45	; 69
    3ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3acc:	dc 01       	movw	r26, r24
    3ace:	cb 01       	movw	r24, r22
    3ad0:	8f 83       	std	Y+7, r24	; 0x07
    3ad2:	98 87       	std	Y+8, r25	; 0x08
    3ad4:	a9 87       	std	Y+9, r26	; 0x09
    3ad6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3ad8:	6f 81       	ldd	r22, Y+7	; 0x07
    3ada:	78 85       	ldd	r23, Y+8	; 0x08
    3adc:	89 85       	ldd	r24, Y+9	; 0x09
    3ade:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	40 e8       	ldi	r20, 0x80	; 128
    3ae6:	5f e3       	ldi	r21, 0x3F	; 63
    3ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3aec:	88 23       	and	r24, r24
    3aee:	2c f4       	brge	.+10     	; 0x3afa <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    3af0:	81 e0       	ldi	r24, 0x01	; 1
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	9e 83       	std	Y+6, r25	; 0x06
    3af6:	8d 83       	std	Y+5, r24	; 0x05
    3af8:	3f c0       	rjmp	.+126    	; 0x3b78 <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3afa:	6f 81       	ldd	r22, Y+7	; 0x07
    3afc:	78 85       	ldd	r23, Y+8	; 0x08
    3afe:	89 85       	ldd	r24, Y+9	; 0x09
    3b00:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	3f ef       	ldi	r19, 0xFF	; 255
    3b06:	4f e7       	ldi	r20, 0x7F	; 127
    3b08:	57 e4       	ldi	r21, 0x47	; 71
    3b0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b0e:	18 16       	cp	r1, r24
    3b10:	4c f5       	brge	.+82     	; 0x3b64 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b12:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b14:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b16:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b18:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	40 e2       	ldi	r20, 0x20	; 32
    3b20:	51 e4       	ldi	r21, 0x41	; 65
    3b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b26:	dc 01       	movw	r26, r24
    3b28:	cb 01       	movw	r24, r22
    3b2a:	bc 01       	movw	r22, r24
    3b2c:	cd 01       	movw	r24, r26
    3b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b32:	dc 01       	movw	r26, r24
    3b34:	cb 01       	movw	r24, r22
    3b36:	9e 83       	std	Y+6, r25	; 0x06
    3b38:	8d 83       	std	Y+5, r24	; 0x05
    3b3a:	0f c0       	rjmp	.+30     	; 0x3b5a <LCD_ShiftingRight+0xcc>
    3b3c:	80 e9       	ldi	r24, 0x90	; 144
    3b3e:	91 e0       	ldi	r25, 0x01	; 1
    3b40:	9c 83       	std	Y+4, r25	; 0x04
    3b42:	8b 83       	std	Y+3, r24	; 0x03
    3b44:	8b 81       	ldd	r24, Y+3	; 0x03
    3b46:	9c 81       	ldd	r25, Y+4	; 0x04
    3b48:	01 97       	sbiw	r24, 0x01	; 1
    3b4a:	f1 f7       	brne	.-4      	; 0x3b48 <LCD_ShiftingRight+0xba>
    3b4c:	9c 83       	std	Y+4, r25	; 0x04
    3b4e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b50:	8d 81       	ldd	r24, Y+5	; 0x05
    3b52:	9e 81       	ldd	r25, Y+6	; 0x06
    3b54:	01 97       	sbiw	r24, 0x01	; 1
    3b56:	9e 83       	std	Y+6, r25	; 0x06
    3b58:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5e:	00 97       	sbiw	r24, 0x00	; 0
    3b60:	69 f7       	brne	.-38     	; 0x3b3c <LCD_ShiftingRight+0xae>
    3b62:	14 c0       	rjmp	.+40     	; 0x3b8c <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b64:	6f 81       	ldd	r22, Y+7	; 0x07
    3b66:	78 85       	ldd	r23, Y+8	; 0x08
    3b68:	89 85       	ldd	r24, Y+9	; 0x09
    3b6a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b70:	dc 01       	movw	r26, r24
    3b72:	cb 01       	movw	r24, r22
    3b74:	9e 83       	std	Y+6, r25	; 0x06
    3b76:	8d 83       	std	Y+5, r24	; 0x05
    3b78:	8d 81       	ldd	r24, Y+5	; 0x05
    3b7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7c:	9a 83       	std	Y+2, r25	; 0x02
    3b7e:	89 83       	std	Y+1, r24	; 0x01
    3b80:	89 81       	ldd	r24, Y+1	; 0x01
    3b82:	9a 81       	ldd	r25, Y+2	; 0x02
    3b84:	01 97       	sbiw	r24, 0x01	; 1
    3b86:	f1 f7       	brne	.-4      	; 0x3b84 <LCD_ShiftingRight+0xf6>
    3b88:	9a 83       	std	Y+2, r25	; 0x02
    3b8a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3b8c:	2e 96       	adiw	r28, 0x0e	; 14
    3b8e:	0f b6       	in	r0, 0x3f	; 63
    3b90:	f8 94       	cli
    3b92:	de bf       	out	0x3e, r29	; 62
    3b94:	0f be       	out	0x3f, r0	; 63
    3b96:	cd bf       	out	0x3d, r28	; 61
    3b98:	cf 91       	pop	r28
    3b9a:	df 91       	pop	r29
    3b9c:	08 95       	ret

00003b9e <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3b9e:	0f 93       	push	r16
    3ba0:	df 93       	push	r29
    3ba2:	cf 93       	push	r28
    3ba4:	cd b7       	in	r28, 0x3d	; 61
    3ba6:	de b7       	in	r29, 0x3e	; 62
    3ba8:	28 97       	sbiw	r28, 0x08	; 8
    3baa:	0f b6       	in	r0, 0x3f	; 63
    3bac:	f8 94       	cli
    3bae:	de bf       	out	0x3e, r29	; 62
    3bb0:	0f be       	out	0x3f, r0	; 63
    3bb2:	cd bf       	out	0x3d, r28	; 61
    3bb4:	8b 83       	std	Y+3, r24	; 0x03
    3bb6:	7d 83       	std	Y+5, r23	; 0x05
    3bb8:	6c 83       	std	Y+4, r22	; 0x04
    3bba:	4e 83       	std	Y+6, r20	; 0x06
    3bbc:	2f 83       	std	Y+7, r18	; 0x07
    3bbe:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3bc0:	88 85       	ldd	r24, Y+8	; 0x08
    3bc2:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3bc6:	1a 82       	std	Y+2, r1	; 0x02
    3bc8:	19 82       	std	Y+1, r1	; 0x01
    3bca:	0f c0       	rjmp	.+30     	; 0x3bea <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3bcc:	29 81       	ldd	r18, Y+1	; 0x01
    3bce:	3a 81       	ldd	r19, Y+2	; 0x02
    3bd0:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd2:	9d 81       	ldd	r25, Y+5	; 0x05
    3bd4:	fc 01       	movw	r30, r24
    3bd6:	e2 0f       	add	r30, r18
    3bd8:	f3 1f       	adc	r31, r19
    3bda:	80 81       	ld	r24, Z
    3bdc:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    3be0:	89 81       	ldd	r24, Y+1	; 0x01
    3be2:	9a 81       	ldd	r25, Y+2	; 0x02
    3be4:	01 96       	adiw	r24, 0x01	; 1
    3be6:	9a 83       	std	Y+2, r25	; 0x02
    3be8:	89 83       	std	Y+1, r24	; 0x01
    3bea:	89 81       	ldd	r24, Y+1	; 0x01
    3bec:	9a 81       	ldd	r25, Y+2	; 0x02
    3bee:	88 30       	cpi	r24, 0x08	; 8
    3bf0:	91 05       	cpc	r25, r1
    3bf2:	64 f3       	brlt	.-40     	; 0x3bcc <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3bf4:	8e 81       	ldd	r24, Y+6	; 0x06
    3bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf8:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    3bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    3bfe:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    3c02:	8f 81       	ldd	r24, Y+7	; 0x07
    3c04:	80 31       	cpi	r24, 0x10	; 16
    3c06:	48 f0       	brcs	.+18     	; 0x3c1a <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3c08:	0e 94 37 1c 	call	0x386e	; 0x386e <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    3c0c:	80 e0       	ldi	r24, 0x00	; 0
    3c0e:	60 e0       	ldi	r22, 0x00	; 0
    3c10:	0e 94 77 1b 	call	0x36ee	; 0x36ee <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3c14:	8b 81       	ldd	r24, Y+3	; 0x03
    3c16:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_displayCharacter>
	}
}
    3c1a:	28 96       	adiw	r28, 0x08	; 8
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	f8 94       	cli
    3c20:	de bf       	out	0x3e, r29	; 62
    3c22:	0f be       	out	0x3f, r0	; 63
    3c24:	cd bf       	out	0x3d, r28	; 61
    3c26:	cf 91       	pop	r28
    3c28:	df 91       	pop	r29
    3c2a:	0f 91       	pop	r16
    3c2c:	08 95       	ret

00003c2e <displayFloatOnLCD>:



void displayFloatOnLCD(f32 number) {
    3c2e:	df 93       	push	r29
    3c30:	cf 93       	push	r28
    3c32:	cd b7       	in	r28, 0x3d	; 61
    3c34:	de b7       	in	r29, 0x3e	; 62
    3c36:	28 97       	sbiw	r28, 0x08	; 8
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	6d 83       	std	Y+5, r22	; 0x05
    3c44:	7e 83       	std	Y+6, r23	; 0x06
    3c46:	8f 83       	std	Y+7, r24	; 0x07
    3c48:	98 87       	std	Y+8, r25	; 0x08
    int integerPart = (int)number;
    3c4a:	6d 81       	ldd	r22, Y+5	; 0x05
    3c4c:	7e 81       	ldd	r23, Y+6	; 0x06
    3c4e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c50:	98 85       	ldd	r25, Y+8	; 0x08
    3c52:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    3c56:	dc 01       	movw	r26, r24
    3c58:	cb 01       	movw	r24, r22
    3c5a:	9c 83       	std	Y+4, r25	; 0x04
    3c5c:	8b 83       	std	Y+3, r24	; 0x03
    int decimalPart = (number - integerPart) * 1000;
    3c5e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c60:	9c 81       	ldd	r25, Y+4	; 0x04
    3c62:	aa 27       	eor	r26, r26
    3c64:	97 fd       	sbrc	r25, 7
    3c66:	a0 95       	com	r26
    3c68:	ba 2f       	mov	r27, r26
    3c6a:	bc 01       	movw	r22, r24
    3c6c:	cd 01       	movw	r24, r26
    3c6e:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    3c72:	9b 01       	movw	r18, r22
    3c74:	ac 01       	movw	r20, r24
    3c76:	6d 81       	ldd	r22, Y+5	; 0x05
    3c78:	7e 81       	ldd	r23, Y+6	; 0x06
    3c7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c7c:	98 85       	ldd	r25, Y+8	; 0x08
    3c7e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	bc 01       	movw	r22, r24
    3c88:	cd 01       	movw	r24, r26
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	30 e0       	ldi	r19, 0x00	; 0
    3c8e:	4a e7       	ldi	r20, 0x7A	; 122
    3c90:	54 e4       	ldi	r21, 0x44	; 68
    3c92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c96:	dc 01       	movw	r26, r24
    3c98:	cb 01       	movw	r24, r22
    3c9a:	bc 01       	movw	r22, r24
    3c9c:	cd 01       	movw	r24, r26
    3c9e:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
    3ca2:	dc 01       	movw	r26, r24
    3ca4:	cb 01       	movw	r24, r22
    3ca6:	9a 83       	std	Y+2, r25	; 0x02
    3ca8:	89 83       	std	Y+1, r24	; 0x01
    if(integerPart >= 100){
    3caa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cac:	9c 81       	ldd	r25, Y+4	; 0x04
    3cae:	84 36       	cpi	r24, 0x64	; 100
    3cb0:	91 05       	cpc	r25, r1
    3cb2:	54 f0       	brlt	.+20     	; 0x3cc8 <displayFloatOnLCD+0x9a>
    	integerPart /= 10;
    3cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cb8:	2a e0       	ldi	r18, 0x0A	; 10
    3cba:	30 e0       	ldi	r19, 0x00	; 0
    3cbc:	b9 01       	movw	r22, r18
    3cbe:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <__divmodhi4>
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	9c 83       	std	Y+4, r25	; 0x04
    3cc6:	8b 83       	std	Y+3, r24	; 0x03
    }
    LCD_DisplayInteger(integerPart);
    3cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cca:	9c 81       	ldd	r25, Y+4	; 0x04
    3ccc:	aa 27       	eor	r26, r26
    3cce:	97 fd       	sbrc	r25, 7
    3cd0:	a0 95       	com	r26
    3cd2:	ba 2f       	mov	r27, r26
    3cd4:	bc 01       	movw	r22, r24
    3cd6:	cd 01       	movw	r24, r26
    3cd8:	0e 94 1d 1a 	call	0x343a	; 0x343a <LCD_DisplayInteger>
    LCD_displayCharacter('.');
    3cdc:	8e e2       	ldi	r24, 0x2E	; 46
    3cde:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_displayCharacter>
    LCD_DisplayInteger(decimalPart);
    3ce2:	89 81       	ldd	r24, Y+1	; 0x01
    3ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    3ce6:	aa 27       	eor	r26, r26
    3ce8:	97 fd       	sbrc	r25, 7
    3cea:	a0 95       	com	r26
    3cec:	ba 2f       	mov	r27, r26
    3cee:	bc 01       	movw	r22, r24
    3cf0:	cd 01       	movw	r24, r26
    3cf2:	0e 94 1d 1a 	call	0x343a	; 0x343a <LCD_DisplayInteger>
    
}
    3cf6:	28 96       	adiw	r28, 0x08	; 8
    3cf8:	0f b6       	in	r0, 0x3f	; 63
    3cfa:	f8 94       	cli
    3cfc:	de bf       	out	0x3e, r29	; 62
    3cfe:	0f be       	out	0x3f, r0	; 63
    3d00:	cd bf       	out	0x3d, r28	; 61
    3d02:	cf 91       	pop	r28
    3d04:	df 91       	pop	r29
    3d06:	08 95       	ret

00003d08 <displayMinusNumbers>:

void displayMinusNumbers(f32 number) {
    3d08:	df 93       	push	r29
    3d0a:	cf 93       	push	r28
    3d0c:	00 d0       	rcall	.+0      	; 0x3d0e <displayMinusNumbers+0x6>
    3d0e:	00 d0       	rcall	.+0      	; 0x3d10 <displayMinusNumbers+0x8>
    3d10:	cd b7       	in	r28, 0x3d	; 61
    3d12:	de b7       	in	r29, 0x3e	; 62
    3d14:	69 83       	std	Y+1, r22	; 0x01
    3d16:	7a 83       	std	Y+2, r23	; 0x02
    3d18:	8b 83       	std	Y+3, r24	; 0x03
    3d1a:	9c 83       	std	Y+4, r25	; 0x04
	
	LCD_displayCharacter('-');
    3d1c:	8d e2       	ldi	r24, 0x2D	; 45
    3d1e:	0e 94 21 18 	call	0x3042	; 0x3042 <LCD_displayCharacter>
	number = -number;
    3d22:	89 81       	ldd	r24, Y+1	; 0x01
    3d24:	9a 81       	ldd	r25, Y+2	; 0x02
    3d26:	ab 81       	ldd	r26, Y+3	; 0x03
    3d28:	bc 81       	ldd	r27, Y+4	; 0x04
    3d2a:	b0 58       	subi	r27, 0x80	; 128
    3d2c:	89 83       	std	Y+1, r24	; 0x01
    3d2e:	9a 83       	std	Y+2, r25	; 0x02
    3d30:	ab 83       	std	Y+3, r26	; 0x03
    3d32:	bc 83       	std	Y+4, r27	; 0x04
	LCD_DisplayInteger(number);   
    3d34:	69 81       	ldd	r22, Y+1	; 0x01
    3d36:	7a 81       	ldd	r23, Y+2	; 0x02
    3d38:	8b 81       	ldd	r24, Y+3	; 0x03
    3d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	bc 01       	movw	r22, r24
    3d46:	cd 01       	movw	r24, r26
    3d48:	0e 94 1d 1a 	call	0x343a	; 0x343a <LCD_DisplayInteger>
}
    3d4c:	0f 90       	pop	r0
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	cf 91       	pop	r28
    3d56:	df 91       	pop	r29
    3d58:	08 95       	ret

00003d5a <KPD_u8GetKeyState>:
const u8 KPD_Au8RowsPins[4] = {KPD_R1_PIN, KPD_R2_PIN, KPD_R3_PIN, KPD_R4_PIN};
const u8 KPD_Au8ColsPins[4] = {KPD_C1_PIN, KPD_C2_PIN, KPD_C3_PIN, KPD_C4_PIN};

/******************************************************************************************/

u8 KPD_u8GetKeyState(u8 *Copy_pu8ReturnedKey){
    3d5a:	df 93       	push	r29
    3d5c:	cf 93       	push	r28
    3d5e:	cd b7       	in	r28, 0x3d	; 61
    3d60:	de b7       	in	r29, 0x3e	; 62
    3d62:	65 97       	sbiw	r28, 0x15	; 21
    3d64:	0f b6       	in	r0, 0x3f	; 63
    3d66:	f8 94       	cli
    3d68:	de bf       	out	0x3e, r29	; 62
    3d6a:	0f be       	out	0x3f, r0	; 63
    3d6c:	cd bf       	out	0x3d, r28	; 61
    3d6e:	9d 8b       	std	Y+21, r25	; 0x15
    3d70:	8c 8b       	std	Y+20, r24	; 0x14
	
	u8 Local_u8ErrorState = STD_TYPES_OK;
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
    3d76:	1f 86       	std	Y+15, r1	; 0x0f
	
	if(Copy_pu8ReturnedKey != NULL){
    3d78:	8c 89       	ldd	r24, Y+20	; 0x14
    3d7a:	9d 89       	ldd	r25, Y+21	; 0x15
    3d7c:	00 97       	sbiw	r24, 0x00	; 0
    3d7e:	09 f4       	brne	.+2      	; 0x3d82 <KPD_u8GetKeyState+0x28>
    3d80:	f0 c0       	rjmp	.+480    	; 0x3f62 <KPD_u8GetKeyState+0x208>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
    3d82:	ec 89       	ldd	r30, Y+20	; 0x14
    3d84:	fd 89       	ldd	r31, Y+21	; 0x15
    3d86:	8f ef       	ldi	r24, 0xFF	; 255
    3d88:	80 83       	st	Z, r24
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    3d8a:	19 8a       	std	Y+17, r1	; 0x11
    3d8c:	e5 c0       	rjmp	.+458    	; 0x3f58 <KPD_u8GetKeyState+0x1fe>
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
    3d8e:	89 89       	ldd	r24, Y+17	; 0x11
    3d90:	88 2f       	mov	r24, r24
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	fc 01       	movw	r30, r24
    3d96:	e4 56       	subi	r30, 0x64	; 100
    3d98:	fe 4f       	sbci	r31, 0xFE	; 254
    3d9a:	90 81       	ld	r25, Z
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	69 2f       	mov	r22, r25
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    3da6:	18 8a       	std	Y+16, r1	; 0x10
    3da8:	c1 c0       	rjmp	.+386    	; 0x3f2c <KPD_u8GetKeyState+0x1d2>
				DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3daa:	88 89       	ldd	r24, Y+16	; 0x10
    3dac:	88 2f       	mov	r24, r24
    3dae:	90 e0       	ldi	r25, 0x00	; 0
    3db0:	fc 01       	movw	r30, r24
    3db2:	e0 56       	subi	r30, 0x60	; 96
    3db4:	fe 4f       	sbci	r31, 0xFE	; 254
    3db6:	90 81       	ld	r25, Z
    3db8:	9e 01       	movw	r18, r28
    3dba:	2d 5e       	subi	r18, 0xED	; 237
    3dbc:	3f 4f       	sbci	r19, 0xFF	; 255
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	69 2f       	mov	r22, r25
    3dc2:	a9 01       	movw	r20, r18
    3dc4:	0e 94 00 12 	call	0x2400	; 0x2400 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
    3dc8:	8b 89       	ldd	r24, Y+19	; 0x13
    3dca:	88 23       	and	r24, r24
    3dcc:	09 f0       	breq	.+2      	; 0x3dd0 <KPD_u8GetKeyState+0x76>
    3dce:	ab c0       	rjmp	.+342    	; 0x3f26 <KPD_u8GetKeyState+0x1cc>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	a0 ea       	ldi	r26, 0xA0	; 160
    3dd6:	b1 e4       	ldi	r27, 0x41	; 65
    3dd8:	8b 87       	std	Y+11, r24	; 0x0b
    3dda:	9c 87       	std	Y+12, r25	; 0x0c
    3ddc:	ad 87       	std	Y+13, r26	; 0x0d
    3dde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	4a e7       	ldi	r20, 0x7A	; 122
    3dee:	55 e4       	ldi	r21, 0x45	; 69
    3df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	8f 83       	std	Y+7, r24	; 0x07
    3dfa:	98 87       	std	Y+8, r25	; 0x08
    3dfc:	a9 87       	std	Y+9, r26	; 0x09
    3dfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e00:	6f 81       	ldd	r22, Y+7	; 0x07
    3e02:	78 85       	ldd	r23, Y+8	; 0x08
    3e04:	89 85       	ldd	r24, Y+9	; 0x09
    3e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e8       	ldi	r20, 0x80	; 128
    3e0e:	5f e3       	ldi	r21, 0x3F	; 63
    3e10:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e14:	88 23       	and	r24, r24
    3e16:	2c f4       	brge	.+10     	; 0x3e22 <KPD_u8GetKeyState+0xc8>
		__ticks = 1;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
    3e1e:	8d 83       	std	Y+5, r24	; 0x05
    3e20:	3f c0       	rjmp	.+126    	; 0x3ea0 <KPD_u8GetKeyState+0x146>
	else if (__tmp > 65535)
    3e22:	6f 81       	ldd	r22, Y+7	; 0x07
    3e24:	78 85       	ldd	r23, Y+8	; 0x08
    3e26:	89 85       	ldd	r24, Y+9	; 0x09
    3e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	3f ef       	ldi	r19, 0xFF	; 255
    3e2e:	4f e7       	ldi	r20, 0x7F	; 127
    3e30:	57 e4       	ldi	r21, 0x47	; 71
    3e32:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3e36:	18 16       	cp	r1, r24
    3e38:	4c f5       	brge	.+82     	; 0x3e8c <KPD_u8GetKeyState+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	40 e2       	ldi	r20, 0x20	; 32
    3e48:	51 e4       	ldi	r21, 0x41	; 65
    3e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	bc 01       	movw	r22, r24
    3e54:	cd 01       	movw	r24, r26
    3e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	9e 83       	std	Y+6, r25	; 0x06
    3e60:	8d 83       	std	Y+5, r24	; 0x05
    3e62:	0f c0       	rjmp	.+30     	; 0x3e82 <KPD_u8GetKeyState+0x128>
    3e64:	80 e9       	ldi	r24, 0x90	; 144
    3e66:	91 e0       	ldi	r25, 0x01	; 1
    3e68:	9c 83       	std	Y+4, r25	; 0x04
    3e6a:	8b 83       	std	Y+3, r24	; 0x03
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <KPD_u8GetKeyState+0x116>
    3e74:	9c 83       	std	Y+4, r25	; 0x04
    3e76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e78:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	9e 83       	std	Y+6, r25	; 0x06
    3e80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e82:	8d 81       	ldd	r24, Y+5	; 0x05
    3e84:	9e 81       	ldd	r25, Y+6	; 0x06
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	69 f7       	brne	.-38     	; 0x3e64 <KPD_u8GetKeyState+0x10a>
    3e8a:	14 c0       	rjmp	.+40     	; 0x3eb4 <KPD_u8GetKeyState+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e8e:	78 85       	ldd	r23, Y+8	; 0x08
    3e90:	89 85       	ldd	r24, Y+9	; 0x09
    3e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	9e 83       	std	Y+6, r25	; 0x06
    3e9e:	8d 83       	std	Y+5, r24	; 0x05
    3ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea4:	9a 83       	std	Y+2, r25	; 0x02
    3ea6:	89 83       	std	Y+1, r24	; 0x01
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3eac:	01 97       	sbiw	r24, 0x01	; 1
    3eae:	f1 f7       	brne	.-4      	; 0x3eac <KPD_u8GetKeyState+0x152>
    3eb0:	9a 83       	std	Y+2, r25	; 0x02
    3eb2:	89 83       	std	Y+1, r24	; 0x01
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3eb4:	88 89       	ldd	r24, Y+16	; 0x10
    3eb6:	88 2f       	mov	r24, r24
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	fc 01       	movw	r30, r24
    3ebc:	e0 56       	subi	r30, 0x60	; 96
    3ebe:	fe 4f       	sbci	r31, 0xFE	; 254
    3ec0:	90 81       	ld	r25, Z
    3ec2:	9e 01       	movw	r18, r28
    3ec4:	2d 5e       	subi	r18, 0xED	; 237
    3ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	69 2f       	mov	r22, r25
    3ecc:	a9 01       	movw	r20, r18
    3ece:	0e 94 00 12 	call	0x2400	; 0x2400 <DIO_u8GetPinValue>
    3ed2:	0f c0       	rjmp	.+30     	; 0x3ef2 <KPD_u8GetKeyState+0x198>
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
    3ed4:	88 89       	ldd	r24, Y+16	; 0x10
    3ed6:	88 2f       	mov	r24, r24
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	fc 01       	movw	r30, r24
    3edc:	e0 56       	subi	r30, 0x60	; 96
    3ede:	fe 4f       	sbci	r31, 0xFE	; 254
    3ee0:	90 81       	ld	r25, Z
    3ee2:	9e 01       	movw	r18, r28
    3ee4:	2d 5e       	subi	r18, 0xED	; 237
    3ee6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	69 2f       	mov	r22, r25
    3eec:	a9 01       	movw	r20, r18
    3eee:	0e 94 00 12 	call	0x2400	; 0x2400 <DIO_u8GetPinValue>
				if(Local_u8PinValue == DIO_u8_LOW){ // Switch Is Pressed
					/* Debouncing */
					_delay_ms(20);
					DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					/* Check If the Pin Equal Low */
					while(Local_u8PinValue == DIO_u8_LOW){
    3ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    3ef4:	88 23       	and	r24, r24
    3ef6:	71 f3       	breq	.-36     	; 0x3ed4 <KPD_u8GetKeyState+0x17a>
						DIO_u8GetPinValue(KPD_PORT, KPD_Au8ColsPins[Local_u8ColsCounter], &Local_u8PinValue);
					}
					
					*Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    3ef8:	89 89       	ldd	r24, Y+17	; 0x11
    3efa:	48 2f       	mov	r20, r24
    3efc:	50 e0       	ldi	r21, 0x00	; 0
    3efe:	88 89       	ldd	r24, Y+16	; 0x10
    3f00:	28 2f       	mov	r18, r24
    3f02:	30 e0       	ldi	r19, 0x00	; 0
    3f04:	ca 01       	movw	r24, r20
    3f06:	88 0f       	add	r24, r24
    3f08:	99 1f       	adc	r25, r25
    3f0a:	88 0f       	add	r24, r24
    3f0c:	99 1f       	adc	r25, r25
    3f0e:	82 0f       	add	r24, r18
    3f10:	93 1f       	adc	r25, r19
    3f12:	fc 01       	movw	r30, r24
    3f14:	e4 57       	subi	r30, 0x74	; 116
    3f16:	fe 4f       	sbci	r31, 0xFE	; 254
    3f18:	80 81       	ld	r24, Z
    3f1a:	ec 89       	ldd	r30, Y+20	; 0x14
    3f1c:	fd 89       	ldd	r31, Y+21	; 0x15
    3f1e:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	8f 87       	std	Y+15, r24	; 0x0f
    3f24:	07 c0       	rjmp	.+14     	; 0x3f34 <KPD_u8GetKeyState+0x1da>
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
			/* Activate Each Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_LOW);
			/* Check which pin is zero */
			for(Local_u8ColsCounter = 0; Local_u8ColsCounter <= 3; Local_u8ColsCounter++){
    3f26:	88 89       	ldd	r24, Y+16	; 0x10
    3f28:	8f 5f       	subi	r24, 0xFF	; 255
    3f2a:	88 8b       	std	Y+16, r24	; 0x10
    3f2c:	88 89       	ldd	r24, Y+16	; 0x10
    3f2e:	84 30       	cpi	r24, 0x04	; 4
    3f30:	08 f4       	brcc	.+2      	; 0x3f34 <KPD_u8GetKeyState+0x1da>
    3f32:	3b cf       	rjmp	.-394    	; 0x3daa <KPD_u8GetKeyState+0x50>
					Local_u8Flag = 1;
					break;
				}
			}
			/* Deactivate Row */
			DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[Local_u8RowsCounter], DIO_u8_HIGH);
    3f34:	89 89       	ldd	r24, Y+17	; 0x11
    3f36:	88 2f       	mov	r24, r24
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	fc 01       	movw	r30, r24
    3f3c:	e4 56       	subi	r30, 0x64	; 100
    3f3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3f40:	90 81       	ld	r25, Z
    3f42:	80 e0       	ldi	r24, 0x00	; 0
    3f44:	69 2f       	mov	r22, r25
    3f46:	41 e0       	ldi	r20, 0x01	; 1
    3f48:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
			if(Local_u8Flag){
    3f4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f4e:	88 23       	and	r24, r24
    3f50:	49 f4       	brne	.+18     	; 0x3f64 <KPD_u8GetKeyState+0x20a>
	u8 Local_u8ErrorState = STD_TYPES_OK;
	u8 Local_u8RowsCounter, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
	
	if(Copy_pu8ReturnedKey != NULL){
		*Copy_pu8ReturnedKey = KPD_UnPressed;
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter <= 3; Local_u8RowsCounter++){
    3f52:	89 89       	ldd	r24, Y+17	; 0x11
    3f54:	8f 5f       	subi	r24, 0xFF	; 255
    3f56:	89 8b       	std	Y+17, r24	; 0x11
    3f58:	89 89       	ldd	r24, Y+17	; 0x11
    3f5a:	84 30       	cpi	r24, 0x04	; 4
    3f5c:	08 f4       	brcc	.+2      	; 0x3f60 <KPD_u8GetKeyState+0x206>
    3f5e:	17 cf       	rjmp	.-466    	; 0x3d8e <KPD_u8GetKeyState+0x34>
    3f60:	01 c0       	rjmp	.+2      	; 0x3f64 <KPD_u8GetKeyState+0x20a>
				break;
			}
		}
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    3f62:	1a 8a       	std	Y+18, r1	; 0x12
	}
	
	return Local_u8ErrorState;
    3f64:	8a 89       	ldd	r24, Y+18	; 0x12
}
    3f66:	65 96       	adiw	r28, 0x15	; 21
    3f68:	0f b6       	in	r0, 0x3f	; 63
    3f6a:	f8 94       	cli
    3f6c:	de bf       	out	0x3e, r29	; 62
    3f6e:	0f be       	out	0x3f, r0	; 63
    3f70:	cd bf       	out	0x3d, r28	; 61
    3f72:	cf 91       	pop	r28
    3f74:	df 91       	pop	r29
    3f76:	08 95       	ret

00003f78 <KPD_voidInit>:




void KPD_voidInit(void){
    3f78:	df 93       	push	r29
    3f7a:	cf 93       	push	r28
    3f7c:	00 d0       	rcall	.+0      	; 0x3f7e <KPD_voidInit+0x6>
    3f7e:	cd b7       	in	r28, 0x3d	; 61
    3f80:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0; i <= 3; i++){
    3f82:	1a 82       	std	Y+2, r1	; 0x02
    3f84:	19 82       	std	Y+1, r1	; 0x01
    3f86:	31 c0       	rjmp	.+98     	; 0x3fea <KPD_voidInit+0x72>
		/* Rows */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT);
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f8c:	fc 01       	movw	r30, r24
    3f8e:	e4 56       	subi	r30, 0x64	; 100
    3f90:	fe 4f       	sbci	r31, 0xFE	; 254
    3f92:	90 81       	ld	r25, Z
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	69 2f       	mov	r22, r25
    3f98:	41 e0       	ldi	r20, 0x01	; 1
    3f9a:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8RowsPins[i], DIO_u8_OUTPUT_HIGH);
    3f9e:	89 81       	ldd	r24, Y+1	; 0x01
    3fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	e4 56       	subi	r30, 0x64	; 100
    3fa6:	fe 4f       	sbci	r31, 0xFE	; 254
    3fa8:	90 81       	ld	r25, Z
    3faa:	80 e0       	ldi	r24, 0x00	; 0
    3fac:	69 2f       	mov	r22, r25
    3fae:	41 e0       	ldi	r20, 0x01	; 1
    3fb0:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    3fb8:	fc 01       	movw	r30, r24
    3fba:	e0 56       	subi	r30, 0x60	; 96
    3fbc:	fe 4f       	sbci	r31, 0xFE	; 254
    3fbe:	90 81       	ld	r25, Z
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	69 2f       	mov	r22, r25
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    3fce:	fc 01       	movw	r30, r24
    3fd0:	e0 56       	subi	r30, 0x60	; 96
    3fd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3fd4:	90 81       	ld	r25, Z
    3fd6:	80 e0       	ldi	r24, 0x00	; 0
    3fd8:	69 2f       	mov	r22, r25
    3fda:	41 e0       	ldi	r20, 0x01	; 1
    3fdc:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>




void KPD_voidInit(void){
	for(int i = 0; i <= 3; i++){
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	9a 81       	ldd	r25, Y+2	; 0x02
    3fe4:	01 96       	adiw	r24, 0x01	; 1
    3fe6:	9a 83       	std	Y+2, r25	; 0x02
    3fe8:	89 83       	std	Y+1, r24	; 0x01
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	9a 81       	ldd	r25, Y+2	; 0x02
    3fee:	84 30       	cpi	r24, 0x04	; 4
    3ff0:	91 05       	cpc	r25, r1
    3ff2:	54 f2       	brlt	.-108    	; 0x3f88 <KPD_voidInit+0x10>
		
		/* Cols */
		DIO_u8SetPinDirection(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT);
		DIO_u8SetPinValue(KPD_PORT, KPD_Au8ColsPins[i], DIO_u8_INPUT_PULLUP);
	}
}
    3ff4:	0f 90       	pop	r0
    3ff6:	0f 90       	pop	r0
    3ff8:	cf 91       	pop	r28
    3ffa:	df 91       	pop	r29
    3ffc:	08 95       	ret

00003ffe <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    3ffe:	df 93       	push	r29
    4000:	cf 93       	push	r28
    4002:	00 d0       	rcall	.+0      	; 0x4004 <DC_Motor_Init+0x6>
    4004:	0f 92       	push	r0
    4006:	cd b7       	in	r28, 0x3d	; 61
    4008:	de b7       	in	r29, 0x3e	; 62
    400a:	8a 83       	std	Y+2, r24	; 0x02
    400c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    400e:	81 e0       	ldi	r24, 0x01	; 1
    4010:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    4012:	8a 81       	ldd	r24, Y+2	; 0x02
    4014:	81 30       	cpi	r24, 0x01	; 1
    4016:	81 f4       	brne	.+32     	; 0x4038 <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	41 e0       	ldi	r20, 0x01	; 1
    401e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	62 e0       	ldi	r22, 0x02	; 2
    4026:	41 e0       	ldi	r20, 0x01	; 1
    4028:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	61 e0       	ldi	r22, 0x01	; 1
    4030:	41 e0       	ldi	r20, 0x01	; 1
    4032:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
    4036:	14 c0       	rjmp	.+40     	; 0x4060 <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    4038:	8b 81       	ldd	r24, Y+3	; 0x03
    403a:	81 30       	cpi	r24, 0x01	; 1
    403c:	81 f4       	brne	.+32     	; 0x405e <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    403e:	81 e0       	ldi	r24, 0x01	; 1
    4040:	62 e0       	ldi	r22, 0x02	; 2
    4042:	41 e0       	ldi	r20, 0x01	; 1
    4044:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	61 e0       	ldi	r22, 0x01	; 1
    404c:	41 e0       	ldi	r20, 0x01	; 1
    404e:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	60 e0       	ldi	r22, 0x00	; 0
    4056:	41 e0       	ldi	r20, 0x01	; 1
    4058:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <DIO_u8SetPinDirection>
    405c:	01 c0       	rjmp	.+2      	; 0x4060 <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    405e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4060:	89 81       	ldd	r24, Y+1	; 0x01
}
    4062:	0f 90       	pop	r0
    4064:	0f 90       	pop	r0
    4066:	0f 90       	pop	r0
    4068:	cf 91       	pop	r28
    406a:	df 91       	pop	r29
    406c:	08 95       	ret

0000406e <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    406e:	df 93       	push	r29
    4070:	cf 93       	push	r28
    4072:	cd b7       	in	r28, 0x3d	; 61
    4074:	de b7       	in	r29, 0x3e	; 62
    4076:	29 97       	sbiw	r28, 0x09	; 9
    4078:	0f b6       	in	r0, 0x3f	; 63
    407a:	f8 94       	cli
    407c:	de bf       	out	0x3e, r29	; 62
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	cd bf       	out	0x3d, r28	; 61
    4082:	8a 83       	std	Y+2, r24	; 0x02
    4084:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    4086:	81 e0       	ldi	r24, 0x01	; 1
    4088:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    408a:	8a 81       	ldd	r24, Y+2	; 0x02
    408c:	28 2f       	mov	r18, r24
    408e:	30 e0       	ldi	r19, 0x00	; 0
    4090:	39 87       	std	Y+9, r19	; 0x09
    4092:	28 87       	std	Y+8, r18	; 0x08
    4094:	88 85       	ldd	r24, Y+8	; 0x08
    4096:	99 85       	ldd	r25, Y+9	; 0x09
    4098:	00 97       	sbiw	r24, 0x00	; 0
    409a:	31 f0       	breq	.+12     	; 0x40a8 <DC_Motor_Rotate+0x3a>
    409c:	28 85       	ldd	r18, Y+8	; 0x08
    409e:	39 85       	ldd	r19, Y+9	; 0x09
    40a0:	21 30       	cpi	r18, 0x01	; 1
    40a2:	31 05       	cpc	r19, r1
    40a4:	89 f1       	breq	.+98     	; 0x4108 <DC_Motor_Rotate+0x9a>
    40a6:	60 c0       	rjmp	.+192    	; 0x4168 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    40a8:	8b 81       	ldd	r24, Y+3	; 0x03
    40aa:	28 2f       	mov	r18, r24
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	3f 83       	std	Y+7, r19	; 0x07
    40b0:	2e 83       	std	Y+6, r18	; 0x06
    40b2:	8e 81       	ldd	r24, Y+6	; 0x06
    40b4:	9f 81       	ldd	r25, Y+7	; 0x07
    40b6:	00 97       	sbiw	r24, 0x00	; 0
    40b8:	a9 f0       	breq	.+42     	; 0x40e4 <DC_Motor_Rotate+0x76>
    40ba:	2e 81       	ldd	r18, Y+6	; 0x06
    40bc:	3f 81       	ldd	r19, Y+7	; 0x07
    40be:	21 30       	cpi	r18, 0x01	; 1
    40c0:	31 05       	cpc	r19, r1
    40c2:	01 f5       	brne	.+64     	; 0x4104 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    40c4:	81 e0       	ldi	r24, 0x01	; 1
    40c6:	60 e0       	ldi	r22, 0x00	; 0
    40c8:	41 e0       	ldi	r20, 0x01	; 1
    40ca:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    40ce:	81 e0       	ldi	r24, 0x01	; 1
    40d0:	62 e0       	ldi	r22, 0x02	; 2
    40d2:	41 e0       	ldi	r20, 0x01	; 1
    40d4:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    40d8:	81 e0       	ldi	r24, 0x01	; 1
    40da:	61 e0       	ldi	r22, 0x01	; 1
    40dc:	40 e0       	ldi	r20, 0x00	; 0
    40de:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    40e2:	43 c0       	rjmp	.+134    	; 0x416a <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	60 e0       	ldi	r22, 0x00	; 0
    40e8:	41 e0       	ldi	r20, 0x01	; 1
    40ea:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	62 e0       	ldi	r22, 0x02	; 2
    40f2:	40 e0       	ldi	r20, 0x00	; 0
    40f4:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    40f8:	81 e0       	ldi	r24, 0x01	; 1
    40fa:	61 e0       	ldi	r22, 0x01	; 1
    40fc:	41 e0       	ldi	r20, 0x01	; 1
    40fe:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    4102:	33 c0       	rjmp	.+102    	; 0x416a <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4104:	19 82       	std	Y+1, r1	; 0x01
    4106:	31 c0       	rjmp	.+98     	; 0x416a <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    4108:	8b 81       	ldd	r24, Y+3	; 0x03
    410a:	28 2f       	mov	r18, r24
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	3d 83       	std	Y+5, r19	; 0x05
    4110:	2c 83       	std	Y+4, r18	; 0x04
    4112:	8c 81       	ldd	r24, Y+4	; 0x04
    4114:	9d 81       	ldd	r25, Y+5	; 0x05
    4116:	00 97       	sbiw	r24, 0x00	; 0
    4118:	a9 f0       	breq	.+42     	; 0x4144 <DC_Motor_Rotate+0xd6>
    411a:	2c 81       	ldd	r18, Y+4	; 0x04
    411c:	3d 81       	ldd	r19, Y+5	; 0x05
    411e:	21 30       	cpi	r18, 0x01	; 1
    4120:	31 05       	cpc	r19, r1
    4122:	01 f5       	brne	.+64     	; 0x4164 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	62 e0       	ldi	r22, 0x02	; 2
    4128:	41 e0       	ldi	r20, 0x01	; 1
    412a:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	61 e0       	ldi	r22, 0x01	; 1
    4132:	41 e0       	ldi	r20, 0x01	; 1
    4134:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	60 e0       	ldi	r22, 0x00	; 0
    413c:	40 e0       	ldi	r20, 0x00	; 0
    413e:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    4142:	13 c0       	rjmp	.+38     	; 0x416a <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    4144:	81 e0       	ldi	r24, 0x01	; 1
    4146:	62 e0       	ldi	r22, 0x02	; 2
    4148:	41 e0       	ldi	r20, 0x01	; 1
    414a:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    414e:	81 e0       	ldi	r24, 0x01	; 1
    4150:	61 e0       	ldi	r22, 0x01	; 1
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	60 e0       	ldi	r22, 0x00	; 0
    415c:	41 e0       	ldi	r20, 0x01	; 1
    415e:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    4162:	03 c0       	rjmp	.+6      	; 0x416a <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4164:	19 82       	std	Y+1, r1	; 0x01
    4166:	01 c0       	rjmp	.+2      	; 0x416a <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    4168:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    416a:	89 81       	ldd	r24, Y+1	; 0x01
}
    416c:	29 96       	adiw	r28, 0x09	; 9
    416e:	0f b6       	in	r0, 0x3f	; 63
    4170:	f8 94       	cli
    4172:	de bf       	out	0x3e, r29	; 62
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	cd bf       	out	0x3d, r28	; 61
    4178:	cf 91       	pop	r28
    417a:	df 91       	pop	r29
    417c:	08 95       	ret

0000417e <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    417e:	df 93       	push	r29
    4180:	cf 93       	push	r28
    4182:	00 d0       	rcall	.+0      	; 0x4184 <DC_Motor_Stop+0x6>
    4184:	cd b7       	in	r28, 0x3d	; 61
    4186:	de b7       	in	r29, 0x3e	; 62
    4188:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    418a:	81 e0       	ldi	r24, 0x01	; 1
    418c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    418e:	8a 81       	ldd	r24, Y+2	; 0x02
    4190:	88 23       	and	r24, r24
    4192:	31 f4       	brne	.+12     	; 0x41a0 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    4194:	81 e0       	ldi	r24, 0x01	; 1
    4196:	60 e0       	ldi	r22, 0x00	; 0
    4198:	40 e0       	ldi	r20, 0x00	; 0
    419a:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    419e:	0a c0       	rjmp	.+20     	; 0x41b4 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    41a0:	8a 81       	ldd	r24, Y+2	; 0x02
    41a2:	81 30       	cpi	r24, 0x01	; 1
    41a4:	31 f4       	brne	.+12     	; 0x41b2 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    41a6:	81 e0       	ldi	r24, 0x01	; 1
    41a8:	62 e0       	ldi	r22, 0x02	; 2
    41aa:	40 e0       	ldi	r20, 0x00	; 0
    41ac:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    41b0:	01 c0       	rjmp	.+2      	; 0x41b4 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    41b2:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    41b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    41b6:	0f 90       	pop	r0
    41b8:	0f 90       	pop	r0
    41ba:	cf 91       	pop	r28
    41bc:	df 91       	pop	r29
    41be:	08 95       	ret

000041c0 <SevenSegment_Init>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/DIO_Interface.h"
#include "SevenSegment_Private.h"

void SevenSegment_Init(u8 Copy_u8PortId){
    41c0:	df 93       	push	r29
    41c2:	cf 93       	push	r28
    41c4:	0f 92       	push	r0
    41c6:	cd b7       	in	r28, 0x3d	; 61
    41c8:	de b7       	in	r29, 0x3e	; 62
    41ca:	89 83       	std	Y+1, r24	; 0x01
	DIO_u8SetPortDirection(Copy_u8PortId, DIO_u8_HIGH);
    41cc:	89 81       	ldd	r24, Y+1	; 0x01
    41ce:	61 e0       	ldi	r22, 0x01	; 1
    41d0:	0e 94 40 13 	call	0x2680	; 0x2680 <DIO_u8SetPortDirection>
}
    41d4:	0f 90       	pop	r0
    41d6:	cf 91       	pop	r28
    41d8:	df 91       	pop	r29
    41da:	08 95       	ret

000041dc <SevenSegment_Display>:

void SevenSegment_Display(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6)
{
    41dc:	af 92       	push	r10
    41de:	cf 92       	push	r12
    41e0:	ef 92       	push	r14
    41e2:	0f 93       	push	r16
    41e4:	df 93       	push	r29
    41e6:	cf 93       	push	r28
    41e8:	cd b7       	in	r28, 0x3d	; 61
    41ea:	de b7       	in	r29, 0x3e	; 62
    41ec:	2a 97       	sbiw	r28, 0x0a	; 10
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	de bf       	out	0x3e, r29	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	89 83       	std	Y+1, r24	; 0x01
    41fa:	6a 83       	std	Y+2, r22	; 0x02
    41fc:	4b 83       	std	Y+3, r20	; 0x03
    41fe:	2c 83       	std	Y+4, r18	; 0x04
    4200:	0d 83       	std	Y+5, r16	; 0x05
    4202:	ee 82       	std	Y+6, r14	; 0x06
    4204:	cf 82       	std	Y+7, r12	; 0x07
    4206:	a8 86       	std	Y+8, r10	; 0x08
	switch (Copy_u8PortId)
    4208:	89 81       	ldd	r24, Y+1	; 0x01
    420a:	28 2f       	mov	r18, r24
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	3a 87       	std	Y+10, r19	; 0x0a
    4210:	29 87       	std	Y+9, r18	; 0x09
    4212:	89 85       	ldd	r24, Y+9	; 0x09
    4214:	9a 85       	ldd	r25, Y+10	; 0x0a
    4216:	81 30       	cpi	r24, 0x01	; 1
    4218:	91 05       	cpc	r25, r1
    421a:	09 f4       	brne	.+2      	; 0x421e <SevenSegment_Display+0x42>
    421c:	96 c0       	rjmp	.+300    	; 0x434a <SevenSegment_Display+0x16e>
    421e:	29 85       	ldd	r18, Y+9	; 0x09
    4220:	3a 85       	ldd	r19, Y+10	; 0x0a
    4222:	22 30       	cpi	r18, 0x02	; 2
    4224:	31 05       	cpc	r19, r1
    4226:	2c f4       	brge	.+10     	; 0x4232 <SevenSegment_Display+0x56>
    4228:	89 85       	ldd	r24, Y+9	; 0x09
    422a:	9a 85       	ldd	r25, Y+10	; 0x0a
    422c:	00 97       	sbiw	r24, 0x00	; 0
    422e:	71 f0       	breq	.+28     	; 0x424c <SevenSegment_Display+0x70>
    4230:	08 c2       	rjmp	.+1040   	; 0x4642 <SevenSegment_Display+0x466>
    4232:	29 85       	ldd	r18, Y+9	; 0x09
    4234:	3a 85       	ldd	r19, Y+10	; 0x0a
    4236:	22 30       	cpi	r18, 0x02	; 2
    4238:	31 05       	cpc	r19, r1
    423a:	09 f4       	brne	.+2      	; 0x423e <SevenSegment_Display+0x62>
    423c:	05 c1       	rjmp	.+522    	; 0x4448 <SevenSegment_Display+0x26c>
    423e:	89 85       	ldd	r24, Y+9	; 0x09
    4240:	9a 85       	ldd	r25, Y+10	; 0x0a
    4242:	83 30       	cpi	r24, 0x03	; 3
    4244:	91 05       	cpc	r25, r1
    4246:	09 f4       	brne	.+2      	; 0x424a <SevenSegment_Display+0x6e>
    4248:	7e c1       	rjmp	.+764    	; 0x4546 <SevenSegment_Display+0x36a>
    424a:	fb c1       	rjmp	.+1014   	; 0x4642 <SevenSegment_Display+0x466>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    424c:	8a 81       	ldd	r24, Y+2	; 0x02
    424e:	81 30       	cpi	r24, 0x01	; 1
    4250:	41 f4       	brne	.+16     	; 0x4262 <SevenSegment_Display+0x86>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    4252:	ab e3       	ldi	r26, 0x3B	; 59
    4254:	b0 e0       	ldi	r27, 0x00	; 0
    4256:	eb e3       	ldi	r30, 0x3B	; 59
    4258:	f0 e0       	ldi	r31, 0x00	; 0
    425a:	80 81       	ld	r24, Z
    425c:	81 60       	ori	r24, 0x01	; 1
    425e:	8c 93       	st	X, r24
    4260:	07 c0       	rjmp	.+14     	; 0x4270 <SevenSegment_Display+0x94>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    4262:	ab e3       	ldi	r26, 0x3B	; 59
    4264:	b0 e0       	ldi	r27, 0x00	; 0
    4266:	eb e3       	ldi	r30, 0x3B	; 59
    4268:	f0 e0       	ldi	r31, 0x00	; 0
    426a:	80 81       	ld	r24, Z
    426c:	8e 7f       	andi	r24, 0xFE	; 254
    426e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    4270:	8b 81       	ldd	r24, Y+3	; 0x03
    4272:	81 30       	cpi	r24, 0x01	; 1
    4274:	41 f4       	brne	.+16     	; 0x4286 <SevenSegment_Display+0xaa>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    4276:	ab e3       	ldi	r26, 0x3B	; 59
    4278:	b0 e0       	ldi	r27, 0x00	; 0
    427a:	eb e3       	ldi	r30, 0x3B	; 59
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	80 81       	ld	r24, Z
    4280:	82 60       	ori	r24, 0x02	; 2
    4282:	8c 93       	st	X, r24
    4284:	07 c0       	rjmp	.+14     	; 0x4294 <SevenSegment_Display+0xb8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    4286:	ab e3       	ldi	r26, 0x3B	; 59
    4288:	b0 e0       	ldi	r27, 0x00	; 0
    428a:	eb e3       	ldi	r30, 0x3B	; 59
    428c:	f0 e0       	ldi	r31, 0x00	; 0
    428e:	80 81       	ld	r24, Z
    4290:	8d 7f       	andi	r24, 0xFD	; 253
    4292:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4294:	8c 81       	ldd	r24, Y+4	; 0x04
    4296:	81 30       	cpi	r24, 0x01	; 1
    4298:	41 f4       	brne	.+16     	; 0x42aa <SevenSegment_Display+0xce>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    429a:	ab e3       	ldi	r26, 0x3B	; 59
    429c:	b0 e0       	ldi	r27, 0x00	; 0
    429e:	eb e3       	ldi	r30, 0x3B	; 59
    42a0:	f0 e0       	ldi	r31, 0x00	; 0
    42a2:	80 81       	ld	r24, Z
    42a4:	84 60       	ori	r24, 0x04	; 4
    42a6:	8c 93       	st	X, r24
    42a8:	07 c0       	rjmp	.+14     	; 0x42b8 <SevenSegment_Display+0xdc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    42aa:	ab e3       	ldi	r26, 0x3B	; 59
    42ac:	b0 e0       	ldi	r27, 0x00	; 0
    42ae:	eb e3       	ldi	r30, 0x3B	; 59
    42b0:	f0 e0       	ldi	r31, 0x00	; 0
    42b2:	80 81       	ld	r24, Z
    42b4:	8b 7f       	andi	r24, 0xFB	; 251
    42b6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    42b8:	8d 81       	ldd	r24, Y+5	; 0x05
    42ba:	81 30       	cpi	r24, 0x01	; 1
    42bc:	41 f4       	brne	.+16     	; 0x42ce <SevenSegment_Display+0xf2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    42be:	ab e3       	ldi	r26, 0x3B	; 59
    42c0:	b0 e0       	ldi	r27, 0x00	; 0
    42c2:	eb e3       	ldi	r30, 0x3B	; 59
    42c4:	f0 e0       	ldi	r31, 0x00	; 0
    42c6:	80 81       	ld	r24, Z
    42c8:	88 60       	ori	r24, 0x08	; 8
    42ca:	8c 93       	st	X, r24
    42cc:	07 c0       	rjmp	.+14     	; 0x42dc <SevenSegment_Display+0x100>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    42ce:	ab e3       	ldi	r26, 0x3B	; 59
    42d0:	b0 e0       	ldi	r27, 0x00	; 0
    42d2:	eb e3       	ldi	r30, 0x3B	; 59
    42d4:	f0 e0       	ldi	r31, 0x00	; 0
    42d6:	80 81       	ld	r24, Z
    42d8:	87 7f       	andi	r24, 0xF7	; 247
    42da:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    42dc:	8e 81       	ldd	r24, Y+6	; 0x06
    42de:	81 30       	cpi	r24, 0x01	; 1
    42e0:	41 f4       	brne	.+16     	; 0x42f2 <SevenSegment_Display+0x116>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    42e2:	ab e3       	ldi	r26, 0x3B	; 59
    42e4:	b0 e0       	ldi	r27, 0x00	; 0
    42e6:	eb e3       	ldi	r30, 0x3B	; 59
    42e8:	f0 e0       	ldi	r31, 0x00	; 0
    42ea:	80 81       	ld	r24, Z
    42ec:	80 61       	ori	r24, 0x10	; 16
    42ee:	8c 93       	st	X, r24
    42f0:	07 c0       	rjmp	.+14     	; 0x4300 <SevenSegment_Display+0x124>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    42f2:	ab e3       	ldi	r26, 0x3B	; 59
    42f4:	b0 e0       	ldi	r27, 0x00	; 0
    42f6:	eb e3       	ldi	r30, 0x3B	; 59
    42f8:	f0 e0       	ldi	r31, 0x00	; 0
    42fa:	80 81       	ld	r24, Z
    42fc:	8f 7e       	andi	r24, 0xEF	; 239
    42fe:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    4300:	8f 81       	ldd	r24, Y+7	; 0x07
    4302:	81 30       	cpi	r24, 0x01	; 1
    4304:	41 f4       	brne	.+16     	; 0x4316 <SevenSegment_Display+0x13a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4306:	ab e3       	ldi	r26, 0x3B	; 59
    4308:	b0 e0       	ldi	r27, 0x00	; 0
    430a:	eb e3       	ldi	r30, 0x3B	; 59
    430c:	f0 e0       	ldi	r31, 0x00	; 0
    430e:	80 81       	ld	r24, Z
    4310:	80 62       	ori	r24, 0x20	; 32
    4312:	8c 93       	st	X, r24
    4314:	07 c0       	rjmp	.+14     	; 0x4324 <SevenSegment_Display+0x148>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    4316:	ab e3       	ldi	r26, 0x3B	; 59
    4318:	b0 e0       	ldi	r27, 0x00	; 0
    431a:	eb e3       	ldi	r30, 0x3B	; 59
    431c:	f0 e0       	ldi	r31, 0x00	; 0
    431e:	80 81       	ld	r24, Z
    4320:	8f 7d       	andi	r24, 0xDF	; 223
    4322:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4324:	88 85       	ldd	r24, Y+8	; 0x08
    4326:	81 30       	cpi	r24, 0x01	; 1
    4328:	41 f4       	brne	.+16     	; 0x433a <SevenSegment_Display+0x15e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    432a:	ab e3       	ldi	r26, 0x3B	; 59
    432c:	b0 e0       	ldi	r27, 0x00	; 0
    432e:	eb e3       	ldi	r30, 0x3B	; 59
    4330:	f0 e0       	ldi	r31, 0x00	; 0
    4332:	80 81       	ld	r24, Z
    4334:	80 64       	ori	r24, 0x40	; 64
    4336:	8c 93       	st	X, r24
    4338:	84 c1       	rjmp	.+776    	; 0x4642 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    433a:	ab e3       	ldi	r26, 0x3B	; 59
    433c:	b0 e0       	ldi	r27, 0x00	; 0
    433e:	eb e3       	ldi	r30, 0x3B	; 59
    4340:	f0 e0       	ldi	r31, 0x00	; 0
    4342:	80 81       	ld	r24, Z
    4344:	8f 7b       	andi	r24, 0xBF	; 191
    4346:	8c 93       	st	X, r24
    4348:	7c c1       	rjmp	.+760    	; 0x4642 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    434a:	8a 81       	ldd	r24, Y+2	; 0x02
    434c:	81 30       	cpi	r24, 0x01	; 1
    434e:	41 f4       	brne	.+16     	; 0x4360 <SevenSegment_Display+0x184>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    4350:	a8 e3       	ldi	r26, 0x38	; 56
    4352:	b0 e0       	ldi	r27, 0x00	; 0
    4354:	e8 e3       	ldi	r30, 0x38	; 56
    4356:	f0 e0       	ldi	r31, 0x00	; 0
    4358:	80 81       	ld	r24, Z
    435a:	81 60       	ori	r24, 0x01	; 1
    435c:	8c 93       	st	X, r24
    435e:	07 c0       	rjmp	.+14     	; 0x436e <SevenSegment_Display+0x192>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    4360:	a8 e3       	ldi	r26, 0x38	; 56
    4362:	b0 e0       	ldi	r27, 0x00	; 0
    4364:	e8 e3       	ldi	r30, 0x38	; 56
    4366:	f0 e0       	ldi	r31, 0x00	; 0
    4368:	80 81       	ld	r24, Z
    436a:	8e 7f       	andi	r24, 0xFE	; 254
    436c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    436e:	8b 81       	ldd	r24, Y+3	; 0x03
    4370:	81 30       	cpi	r24, 0x01	; 1
    4372:	41 f4       	brne	.+16     	; 0x4384 <SevenSegment_Display+0x1a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    4374:	a8 e3       	ldi	r26, 0x38	; 56
    4376:	b0 e0       	ldi	r27, 0x00	; 0
    4378:	e8 e3       	ldi	r30, 0x38	; 56
    437a:	f0 e0       	ldi	r31, 0x00	; 0
    437c:	80 81       	ld	r24, Z
    437e:	82 60       	ori	r24, 0x02	; 2
    4380:	8c 93       	st	X, r24
    4382:	07 c0       	rjmp	.+14     	; 0x4392 <SevenSegment_Display+0x1b6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    4384:	a8 e3       	ldi	r26, 0x38	; 56
    4386:	b0 e0       	ldi	r27, 0x00	; 0
    4388:	e8 e3       	ldi	r30, 0x38	; 56
    438a:	f0 e0       	ldi	r31, 0x00	; 0
    438c:	80 81       	ld	r24, Z
    438e:	8d 7f       	andi	r24, 0xFD	; 253
    4390:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4392:	8c 81       	ldd	r24, Y+4	; 0x04
    4394:	81 30       	cpi	r24, 0x01	; 1
    4396:	41 f4       	brne	.+16     	; 0x43a8 <SevenSegment_Display+0x1cc>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    4398:	a8 e3       	ldi	r26, 0x38	; 56
    439a:	b0 e0       	ldi	r27, 0x00	; 0
    439c:	e8 e3       	ldi	r30, 0x38	; 56
    439e:	f0 e0       	ldi	r31, 0x00	; 0
    43a0:	80 81       	ld	r24, Z
    43a2:	84 60       	ori	r24, 0x04	; 4
    43a4:	8c 93       	st	X, r24
    43a6:	07 c0       	rjmp	.+14     	; 0x43b6 <SevenSegment_Display+0x1da>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    43a8:	a8 e3       	ldi	r26, 0x38	; 56
    43aa:	b0 e0       	ldi	r27, 0x00	; 0
    43ac:	e8 e3       	ldi	r30, 0x38	; 56
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	80 81       	ld	r24, Z
    43b2:	8b 7f       	andi	r24, 0xFB	; 251
    43b4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    43b6:	8d 81       	ldd	r24, Y+5	; 0x05
    43b8:	81 30       	cpi	r24, 0x01	; 1
    43ba:	41 f4       	brne	.+16     	; 0x43cc <SevenSegment_Display+0x1f0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    43bc:	a8 e3       	ldi	r26, 0x38	; 56
    43be:	b0 e0       	ldi	r27, 0x00	; 0
    43c0:	e8 e3       	ldi	r30, 0x38	; 56
    43c2:	f0 e0       	ldi	r31, 0x00	; 0
    43c4:	80 81       	ld	r24, Z
    43c6:	88 60       	ori	r24, 0x08	; 8
    43c8:	8c 93       	st	X, r24
    43ca:	07 c0       	rjmp	.+14     	; 0x43da <SevenSegment_Display+0x1fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    43cc:	a8 e3       	ldi	r26, 0x38	; 56
    43ce:	b0 e0       	ldi	r27, 0x00	; 0
    43d0:	e8 e3       	ldi	r30, 0x38	; 56
    43d2:	f0 e0       	ldi	r31, 0x00	; 0
    43d4:	80 81       	ld	r24, Z
    43d6:	87 7f       	andi	r24, 0xF7	; 247
    43d8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    43da:	8e 81       	ldd	r24, Y+6	; 0x06
    43dc:	81 30       	cpi	r24, 0x01	; 1
    43de:	41 f4       	brne	.+16     	; 0x43f0 <SevenSegment_Display+0x214>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    43e0:	a8 e3       	ldi	r26, 0x38	; 56
    43e2:	b0 e0       	ldi	r27, 0x00	; 0
    43e4:	e8 e3       	ldi	r30, 0x38	; 56
    43e6:	f0 e0       	ldi	r31, 0x00	; 0
    43e8:	80 81       	ld	r24, Z
    43ea:	80 61       	ori	r24, 0x10	; 16
    43ec:	8c 93       	st	X, r24
    43ee:	07 c0       	rjmp	.+14     	; 0x43fe <SevenSegment_Display+0x222>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    43f0:	a8 e3       	ldi	r26, 0x38	; 56
    43f2:	b0 e0       	ldi	r27, 0x00	; 0
    43f4:	e8 e3       	ldi	r30, 0x38	; 56
    43f6:	f0 e0       	ldi	r31, 0x00	; 0
    43f8:	80 81       	ld	r24, Z
    43fa:	8f 7e       	andi	r24, 0xEF	; 239
    43fc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    43fe:	8f 81       	ldd	r24, Y+7	; 0x07
    4400:	81 30       	cpi	r24, 0x01	; 1
    4402:	41 f4       	brne	.+16     	; 0x4414 <SevenSegment_Display+0x238>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4404:	a8 e3       	ldi	r26, 0x38	; 56
    4406:	b0 e0       	ldi	r27, 0x00	; 0
    4408:	e8 e3       	ldi	r30, 0x38	; 56
    440a:	f0 e0       	ldi	r31, 0x00	; 0
    440c:	80 81       	ld	r24, Z
    440e:	80 62       	ori	r24, 0x20	; 32
    4410:	8c 93       	st	X, r24
    4412:	07 c0       	rjmp	.+14     	; 0x4422 <SevenSegment_Display+0x246>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    4414:	a8 e3       	ldi	r26, 0x38	; 56
    4416:	b0 e0       	ldi	r27, 0x00	; 0
    4418:	e8 e3       	ldi	r30, 0x38	; 56
    441a:	f0 e0       	ldi	r31, 0x00	; 0
    441c:	80 81       	ld	r24, Z
    441e:	8f 7d       	andi	r24, 0xDF	; 223
    4420:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4422:	88 85       	ldd	r24, Y+8	; 0x08
    4424:	81 30       	cpi	r24, 0x01	; 1
    4426:	41 f4       	brne	.+16     	; 0x4438 <SevenSegment_Display+0x25c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    4428:	a8 e3       	ldi	r26, 0x38	; 56
    442a:	b0 e0       	ldi	r27, 0x00	; 0
    442c:	e8 e3       	ldi	r30, 0x38	; 56
    442e:	f0 e0       	ldi	r31, 0x00	; 0
    4430:	80 81       	ld	r24, Z
    4432:	80 64       	ori	r24, 0x40	; 64
    4434:	8c 93       	st	X, r24
    4436:	05 c1       	rjmp	.+522    	; 0x4642 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    4438:	a8 e3       	ldi	r26, 0x38	; 56
    443a:	b0 e0       	ldi	r27, 0x00	; 0
    443c:	e8 e3       	ldi	r30, 0x38	; 56
    443e:	f0 e0       	ldi	r31, 0x00	; 0
    4440:	80 81       	ld	r24, Z
    4442:	8f 7b       	andi	r24, 0xBF	; 191
    4444:	8c 93       	st	X, r24
    4446:	fd c0       	rjmp	.+506    	; 0x4642 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4448:	8a 81       	ldd	r24, Y+2	; 0x02
    444a:	81 30       	cpi	r24, 0x01	; 1
    444c:	41 f4       	brne	.+16     	; 0x445e <SevenSegment_Display+0x282>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    444e:	a5 e3       	ldi	r26, 0x35	; 53
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	e5 e3       	ldi	r30, 0x35	; 53
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	81 60       	ori	r24, 0x01	; 1
    445a:	8c 93       	st	X, r24
    445c:	07 c0       	rjmp	.+14     	; 0x446c <SevenSegment_Display+0x290>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    445e:	a5 e3       	ldi	r26, 0x35	; 53
    4460:	b0 e0       	ldi	r27, 0x00	; 0
    4462:	e5 e3       	ldi	r30, 0x35	; 53
    4464:	f0 e0       	ldi	r31, 0x00	; 0
    4466:	80 81       	ld	r24, Z
    4468:	8e 7f       	andi	r24, 0xFE	; 254
    446a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    446c:	8b 81       	ldd	r24, Y+3	; 0x03
    446e:	81 30       	cpi	r24, 0x01	; 1
    4470:	41 f4       	brne	.+16     	; 0x4482 <SevenSegment_Display+0x2a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    4472:	a5 e3       	ldi	r26, 0x35	; 53
    4474:	b0 e0       	ldi	r27, 0x00	; 0
    4476:	e5 e3       	ldi	r30, 0x35	; 53
    4478:	f0 e0       	ldi	r31, 0x00	; 0
    447a:	80 81       	ld	r24, Z
    447c:	82 60       	ori	r24, 0x02	; 2
    447e:	8c 93       	st	X, r24
    4480:	07 c0       	rjmp	.+14     	; 0x4490 <SevenSegment_Display+0x2b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    4482:	a5 e3       	ldi	r26, 0x35	; 53
    4484:	b0 e0       	ldi	r27, 0x00	; 0
    4486:	e5 e3       	ldi	r30, 0x35	; 53
    4488:	f0 e0       	ldi	r31, 0x00	; 0
    448a:	80 81       	ld	r24, Z
    448c:	8d 7f       	andi	r24, 0xFD	; 253
    448e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    4490:	8c 81       	ldd	r24, Y+4	; 0x04
    4492:	81 30       	cpi	r24, 0x01	; 1
    4494:	41 f4       	brne	.+16     	; 0x44a6 <SevenSegment_Display+0x2ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    4496:	a5 e3       	ldi	r26, 0x35	; 53
    4498:	b0 e0       	ldi	r27, 0x00	; 0
    449a:	e5 e3       	ldi	r30, 0x35	; 53
    449c:	f0 e0       	ldi	r31, 0x00	; 0
    449e:	80 81       	ld	r24, Z
    44a0:	84 60       	ori	r24, 0x04	; 4
    44a2:	8c 93       	st	X, r24
    44a4:	07 c0       	rjmp	.+14     	; 0x44b4 <SevenSegment_Display+0x2d8>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    44a6:	a5 e3       	ldi	r26, 0x35	; 53
    44a8:	b0 e0       	ldi	r27, 0x00	; 0
    44aa:	e5 e3       	ldi	r30, 0x35	; 53
    44ac:	f0 e0       	ldi	r31, 0x00	; 0
    44ae:	80 81       	ld	r24, Z
    44b0:	8b 7f       	andi	r24, 0xFB	; 251
    44b2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    44b4:	8d 81       	ldd	r24, Y+5	; 0x05
    44b6:	81 30       	cpi	r24, 0x01	; 1
    44b8:	41 f4       	brne	.+16     	; 0x44ca <SevenSegment_Display+0x2ee>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    44ba:	a5 e3       	ldi	r26, 0x35	; 53
    44bc:	b0 e0       	ldi	r27, 0x00	; 0
    44be:	e5 e3       	ldi	r30, 0x35	; 53
    44c0:	f0 e0       	ldi	r31, 0x00	; 0
    44c2:	80 81       	ld	r24, Z
    44c4:	88 60       	ori	r24, 0x08	; 8
    44c6:	8c 93       	st	X, r24
    44c8:	07 c0       	rjmp	.+14     	; 0x44d8 <SevenSegment_Display+0x2fc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    44ca:	a5 e3       	ldi	r26, 0x35	; 53
    44cc:	b0 e0       	ldi	r27, 0x00	; 0
    44ce:	e5 e3       	ldi	r30, 0x35	; 53
    44d0:	f0 e0       	ldi	r31, 0x00	; 0
    44d2:	80 81       	ld	r24, Z
    44d4:	87 7f       	andi	r24, 0xF7	; 247
    44d6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    44d8:	8e 81       	ldd	r24, Y+6	; 0x06
    44da:	81 30       	cpi	r24, 0x01	; 1
    44dc:	41 f4       	brne	.+16     	; 0x44ee <SevenSegment_Display+0x312>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    44de:	a5 e3       	ldi	r26, 0x35	; 53
    44e0:	b0 e0       	ldi	r27, 0x00	; 0
    44e2:	e5 e3       	ldi	r30, 0x35	; 53
    44e4:	f0 e0       	ldi	r31, 0x00	; 0
    44e6:	80 81       	ld	r24, Z
    44e8:	80 61       	ori	r24, 0x10	; 16
    44ea:	8c 93       	st	X, r24
    44ec:	07 c0       	rjmp	.+14     	; 0x44fc <SevenSegment_Display+0x320>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    44ee:	a5 e3       	ldi	r26, 0x35	; 53
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	e5 e3       	ldi	r30, 0x35	; 53
    44f4:	f0 e0       	ldi	r31, 0x00	; 0
    44f6:	80 81       	ld	r24, Z
    44f8:	8f 7e       	andi	r24, 0xEF	; 239
    44fa:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    44fc:	8f 81       	ldd	r24, Y+7	; 0x07
    44fe:	81 30       	cpi	r24, 0x01	; 1
    4500:	41 f4       	brne	.+16     	; 0x4512 <SevenSegment_Display+0x336>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4502:	a5 e3       	ldi	r26, 0x35	; 53
    4504:	b0 e0       	ldi	r27, 0x00	; 0
    4506:	e5 e3       	ldi	r30, 0x35	; 53
    4508:	f0 e0       	ldi	r31, 0x00	; 0
    450a:	80 81       	ld	r24, Z
    450c:	80 62       	ori	r24, 0x20	; 32
    450e:	8c 93       	st	X, r24
    4510:	07 c0       	rjmp	.+14     	; 0x4520 <SevenSegment_Display+0x344>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    4512:	a5 e3       	ldi	r26, 0x35	; 53
    4514:	b0 e0       	ldi	r27, 0x00	; 0
    4516:	e5 e3       	ldi	r30, 0x35	; 53
    4518:	f0 e0       	ldi	r31, 0x00	; 0
    451a:	80 81       	ld	r24, Z
    451c:	8f 7d       	andi	r24, 0xDF	; 223
    451e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    4520:	88 85       	ldd	r24, Y+8	; 0x08
    4522:	81 30       	cpi	r24, 0x01	; 1
    4524:	41 f4       	brne	.+16     	; 0x4536 <SevenSegment_Display+0x35a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4526:	a5 e3       	ldi	r26, 0x35	; 53
    4528:	b0 e0       	ldi	r27, 0x00	; 0
    452a:	e5 e3       	ldi	r30, 0x35	; 53
    452c:	f0 e0       	ldi	r31, 0x00	; 0
    452e:	80 81       	ld	r24, Z
    4530:	80 64       	ori	r24, 0x40	; 64
    4532:	8c 93       	st	X, r24
    4534:	86 c0       	rjmp	.+268    	; 0x4642 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    4536:	a5 e3       	ldi	r26, 0x35	; 53
    4538:	b0 e0       	ldi	r27, 0x00	; 0
    453a:	e5 e3       	ldi	r30, 0x35	; 53
    453c:	f0 e0       	ldi	r31, 0x00	; 0
    453e:	80 81       	ld	r24, Z
    4540:	8f 7b       	andi	r24, 0xBF	; 191
    4542:	8c 93       	st	X, r24
    4544:	7e c0       	rjmp	.+252    	; 0x4642 <SevenSegment_Display+0x466>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    4546:	8a 81       	ldd	r24, Y+2	; 0x02
    4548:	81 30       	cpi	r24, 0x01	; 1
    454a:	41 f4       	brne	.+16     	; 0x455c <SevenSegment_Display+0x380>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    454c:	a2 e3       	ldi	r26, 0x32	; 50
    454e:	b0 e0       	ldi	r27, 0x00	; 0
    4550:	e2 e3       	ldi	r30, 0x32	; 50
    4552:	f0 e0       	ldi	r31, 0x00	; 0
    4554:	80 81       	ld	r24, Z
    4556:	81 60       	ori	r24, 0x01	; 1
    4558:	8c 93       	st	X, r24
    455a:	07 c0       	rjmp	.+14     	; 0x456a <SevenSegment_Display+0x38e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    455c:	a2 e3       	ldi	r26, 0x32	; 50
    455e:	b0 e0       	ldi	r27, 0x00	; 0
    4560:	e2 e3       	ldi	r30, 0x32	; 50
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	80 81       	ld	r24, Z
    4566:	8e 7f       	andi	r24, 0xFE	; 254
    4568:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    456a:	8b 81       	ldd	r24, Y+3	; 0x03
    456c:	81 30       	cpi	r24, 0x01	; 1
    456e:	41 f4       	brne	.+16     	; 0x4580 <SevenSegment_Display+0x3a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    4570:	a2 e3       	ldi	r26, 0x32	; 50
    4572:	b0 e0       	ldi	r27, 0x00	; 0
    4574:	e2 e3       	ldi	r30, 0x32	; 50
    4576:	f0 e0       	ldi	r31, 0x00	; 0
    4578:	80 81       	ld	r24, Z
    457a:	82 60       	ori	r24, 0x02	; 2
    457c:	8c 93       	st	X, r24
    457e:	07 c0       	rjmp	.+14     	; 0x458e <SevenSegment_Display+0x3b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    4580:	a2 e3       	ldi	r26, 0x32	; 50
    4582:	b0 e0       	ldi	r27, 0x00	; 0
    4584:	e2 e3       	ldi	r30, 0x32	; 50
    4586:	f0 e0       	ldi	r31, 0x00	; 0
    4588:	80 81       	ld	r24, Z
    458a:	8d 7f       	andi	r24, 0xFD	; 253
    458c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    458e:	8c 81       	ldd	r24, Y+4	; 0x04
    4590:	81 30       	cpi	r24, 0x01	; 1
    4592:	41 f4       	brne	.+16     	; 0x45a4 <SevenSegment_Display+0x3c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    4594:	a2 e3       	ldi	r26, 0x32	; 50
    4596:	b0 e0       	ldi	r27, 0x00	; 0
    4598:	e2 e3       	ldi	r30, 0x32	; 50
    459a:	f0 e0       	ldi	r31, 0x00	; 0
    459c:	80 81       	ld	r24, Z
    459e:	84 60       	ori	r24, 0x04	; 4
    45a0:	8c 93       	st	X, r24
    45a2:	07 c0       	rjmp	.+14     	; 0x45b2 <SevenSegment_Display+0x3d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    45a4:	a2 e3       	ldi	r26, 0x32	; 50
    45a6:	b0 e0       	ldi	r27, 0x00	; 0
    45a8:	e2 e3       	ldi	r30, 0x32	; 50
    45aa:	f0 e0       	ldi	r31, 0x00	; 0
    45ac:	80 81       	ld	r24, Z
    45ae:	8b 7f       	andi	r24, 0xFB	; 251
    45b0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    45b2:	8d 81       	ldd	r24, Y+5	; 0x05
    45b4:	81 30       	cpi	r24, 0x01	; 1
    45b6:	41 f4       	brne	.+16     	; 0x45c8 <SevenSegment_Display+0x3ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    45b8:	a2 e3       	ldi	r26, 0x32	; 50
    45ba:	b0 e0       	ldi	r27, 0x00	; 0
    45bc:	e2 e3       	ldi	r30, 0x32	; 50
    45be:	f0 e0       	ldi	r31, 0x00	; 0
    45c0:	80 81       	ld	r24, Z
    45c2:	88 60       	ori	r24, 0x08	; 8
    45c4:	8c 93       	st	X, r24
    45c6:	07 c0       	rjmp	.+14     	; 0x45d6 <SevenSegment_Display+0x3fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    45c8:	a2 e3       	ldi	r26, 0x32	; 50
    45ca:	b0 e0       	ldi	r27, 0x00	; 0
    45cc:	e2 e3       	ldi	r30, 0x32	; 50
    45ce:	f0 e0       	ldi	r31, 0x00	; 0
    45d0:	80 81       	ld	r24, Z
    45d2:	87 7f       	andi	r24, 0xF7	; 247
    45d4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    45d6:	8e 81       	ldd	r24, Y+6	; 0x06
    45d8:	81 30       	cpi	r24, 0x01	; 1
    45da:	41 f4       	brne	.+16     	; 0x45ec <SevenSegment_Display+0x410>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    45dc:	a2 e3       	ldi	r26, 0x32	; 50
    45de:	b0 e0       	ldi	r27, 0x00	; 0
    45e0:	e2 e3       	ldi	r30, 0x32	; 50
    45e2:	f0 e0       	ldi	r31, 0x00	; 0
    45e4:	80 81       	ld	r24, Z
    45e6:	80 61       	ori	r24, 0x10	; 16
    45e8:	8c 93       	st	X, r24
    45ea:	07 c0       	rjmp	.+14     	; 0x45fa <SevenSegment_Display+0x41e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    45ec:	a2 e3       	ldi	r26, 0x32	; 50
    45ee:	b0 e0       	ldi	r27, 0x00	; 0
    45f0:	e2 e3       	ldi	r30, 0x32	; 50
    45f2:	f0 e0       	ldi	r31, 0x00	; 0
    45f4:	80 81       	ld	r24, Z
    45f6:	8f 7e       	andi	r24, 0xEF	; 239
    45f8:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    45fa:	8f 81       	ldd	r24, Y+7	; 0x07
    45fc:	81 30       	cpi	r24, 0x01	; 1
    45fe:	41 f4       	brne	.+16     	; 0x4610 <SevenSegment_Display+0x434>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4600:	a2 e3       	ldi	r26, 0x32	; 50
    4602:	b0 e0       	ldi	r27, 0x00	; 0
    4604:	e2 e3       	ldi	r30, 0x32	; 50
    4606:	f0 e0       	ldi	r31, 0x00	; 0
    4608:	80 81       	ld	r24, Z
    460a:	80 62       	ori	r24, 0x20	; 32
    460c:	8c 93       	st	X, r24
    460e:	07 c0       	rjmp	.+14     	; 0x461e <SevenSegment_Display+0x442>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    4610:	a2 e3       	ldi	r26, 0x32	; 50
    4612:	b0 e0       	ldi	r27, 0x00	; 0
    4614:	e2 e3       	ldi	r30, 0x32	; 50
    4616:	f0 e0       	ldi	r31, 0x00	; 0
    4618:	80 81       	ld	r24, Z
    461a:	8f 7d       	andi	r24, 0xDF	; 223
    461c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    461e:	88 85       	ldd	r24, Y+8	; 0x08
    4620:	81 30       	cpi	r24, 0x01	; 1
    4622:	41 f4       	brne	.+16     	; 0x4634 <SevenSegment_Display+0x458>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4624:	a2 e3       	ldi	r26, 0x32	; 50
    4626:	b0 e0       	ldi	r27, 0x00	; 0
    4628:	e2 e3       	ldi	r30, 0x32	; 50
    462a:	f0 e0       	ldi	r31, 0x00	; 0
    462c:	80 81       	ld	r24, Z
    462e:	80 64       	ori	r24, 0x40	; 64
    4630:	8c 93       	st	X, r24
    4632:	07 c0       	rjmp	.+14     	; 0x4642 <SevenSegment_Display+0x466>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    4634:	a2 e3       	ldi	r26, 0x32	; 50
    4636:	b0 e0       	ldi	r27, 0x00	; 0
    4638:	e2 e3       	ldi	r30, 0x32	; 50
    463a:	f0 e0       	ldi	r31, 0x00	; 0
    463c:	80 81       	ld	r24, Z
    463e:	8f 7b       	andi	r24, 0xBF	; 191
    4640:	8c 93       	st	X, r24
		}
		break;
	}
}
    4642:	2a 96       	adiw	r28, 0x0a	; 10
    4644:	0f b6       	in	r0, 0x3f	; 63
    4646:	f8 94       	cli
    4648:	de bf       	out	0x3e, r29	; 62
    464a:	0f be       	out	0x3f, r0	; 63
    464c:	cd bf       	out	0x3d, r28	; 61
    464e:	cf 91       	pop	r28
    4650:	df 91       	pop	r29
    4652:	0f 91       	pop	r16
    4654:	ef 90       	pop	r14
    4656:	cf 90       	pop	r12
    4658:	af 90       	pop	r10
    465a:	08 95       	ret

0000465c <SevenSegment_From0To9>:

void SevenSegment_From0To9(u8 Copy_u8PortId){
    465c:	af 92       	push	r10
    465e:	cf 92       	push	r12
    4660:	ef 92       	push	r14
    4662:	0f 93       	push	r16
    4664:	1f 93       	push	r17
    4666:	df 93       	push	r29
    4668:	cf 93       	push	r28
    466a:	cd b7       	in	r28, 0x3d	; 61
    466c:	de b7       	in	r29, 0x3e	; 62
    466e:	cd 58       	subi	r28, 0x8D	; 141
    4670:	d0 40       	sbci	r29, 0x00	; 0
    4672:	0f b6       	in	r0, 0x3f	; 63
    4674:	f8 94       	cli
    4676:	de bf       	out	0x3e, r29	; 62
    4678:	0f be       	out	0x3f, r0	; 63
    467a:	cd bf       	out	0x3d, r28	; 61
    467c:	fe 01       	movw	r30, r28
    467e:	e3 57       	subi	r30, 0x73	; 115
    4680:	ff 4f       	sbci	r31, 0xFF	; 255
    4682:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 0); // 0
    4684:	fe 01       	movw	r30, r28
    4686:	e3 57       	subi	r30, 0x73	; 115
    4688:	ff 4f       	sbci	r31, 0xFF	; 255
    468a:	80 81       	ld	r24, Z
    468c:	61 e0       	ldi	r22, 0x01	; 1
    468e:	41 e0       	ldi	r20, 0x01	; 1
    4690:	21 e0       	ldi	r18, 0x01	; 1
    4692:	01 e0       	ldi	r16, 0x01	; 1
    4694:	ee 24       	eor	r14, r14
    4696:	e3 94       	inc	r14
    4698:	cc 24       	eor	r12, r12
    469a:	c3 94       	inc	r12
    469c:	aa 24       	eor	r10, r10
    469e:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    46a2:	fe 01       	movw	r30, r28
    46a4:	e7 57       	subi	r30, 0x77	; 119
    46a6:	ff 4f       	sbci	r31, 0xFF	; 255
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	a8 e4       	ldi	r26, 0x48	; 72
    46ae:	b2 e4       	ldi	r27, 0x42	; 66
    46b0:	80 83       	st	Z, r24
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	a2 83       	std	Z+2, r26	; 0x02
    46b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    46b8:	8e 01       	movw	r16, r28
    46ba:	0b 57       	subi	r16, 0x7B	; 123
    46bc:	1f 4f       	sbci	r17, 0xFF	; 255
    46be:	fe 01       	movw	r30, r28
    46c0:	e7 57       	subi	r30, 0x77	; 119
    46c2:	ff 4f       	sbci	r31, 0xFF	; 255
    46c4:	60 81       	ld	r22, Z
    46c6:	71 81       	ldd	r23, Z+1	; 0x01
    46c8:	82 81       	ldd	r24, Z+2	; 0x02
    46ca:	93 81       	ldd	r25, Z+3	; 0x03
    46cc:	20 e0       	ldi	r18, 0x00	; 0
    46ce:	30 e0       	ldi	r19, 0x00	; 0
    46d0:	4a e7       	ldi	r20, 0x7A	; 122
    46d2:	55 e4       	ldi	r21, 0x45	; 69
    46d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46d8:	dc 01       	movw	r26, r24
    46da:	cb 01       	movw	r24, r22
    46dc:	f8 01       	movw	r30, r16
    46de:	80 83       	st	Z, r24
    46e0:	91 83       	std	Z+1, r25	; 0x01
    46e2:	a2 83       	std	Z+2, r26	; 0x02
    46e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    46e6:	fe 01       	movw	r30, r28
    46e8:	eb 57       	subi	r30, 0x7B	; 123
    46ea:	ff 4f       	sbci	r31, 0xFF	; 255
    46ec:	60 81       	ld	r22, Z
    46ee:	71 81       	ldd	r23, Z+1	; 0x01
    46f0:	82 81       	ldd	r24, Z+2	; 0x02
    46f2:	93 81       	ldd	r25, Z+3	; 0x03
    46f4:	20 e0       	ldi	r18, 0x00	; 0
    46f6:	30 e0       	ldi	r19, 0x00	; 0
    46f8:	40 e8       	ldi	r20, 0x80	; 128
    46fa:	5f e3       	ldi	r21, 0x3F	; 63
    46fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4700:	88 23       	and	r24, r24
    4702:	44 f4       	brge	.+16     	; 0x4714 <SevenSegment_From0To9+0xb8>
		__ticks = 1;
    4704:	fe 01       	movw	r30, r28
    4706:	ed 57       	subi	r30, 0x7D	; 125
    4708:	ff 4f       	sbci	r31, 0xFF	; 255
    470a:	81 e0       	ldi	r24, 0x01	; 1
    470c:	90 e0       	ldi	r25, 0x00	; 0
    470e:	91 83       	std	Z+1, r25	; 0x01
    4710:	80 83       	st	Z, r24
    4712:	64 c0       	rjmp	.+200    	; 0x47dc <SevenSegment_From0To9+0x180>
	else if (__tmp > 65535)
    4714:	fe 01       	movw	r30, r28
    4716:	eb 57       	subi	r30, 0x7B	; 123
    4718:	ff 4f       	sbci	r31, 0xFF	; 255
    471a:	60 81       	ld	r22, Z
    471c:	71 81       	ldd	r23, Z+1	; 0x01
    471e:	82 81       	ldd	r24, Z+2	; 0x02
    4720:	93 81       	ldd	r25, Z+3	; 0x03
    4722:	20 e0       	ldi	r18, 0x00	; 0
    4724:	3f ef       	ldi	r19, 0xFF	; 255
    4726:	4f e7       	ldi	r20, 0x7F	; 127
    4728:	57 e4       	ldi	r21, 0x47	; 71
    472a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    472e:	18 16       	cp	r1, r24
    4730:	0c f0       	brlt	.+2      	; 0x4734 <SevenSegment_From0To9+0xd8>
    4732:	43 c0       	rjmp	.+134    	; 0x47ba <SevenSegment_From0To9+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4734:	fe 01       	movw	r30, r28
    4736:	e7 57       	subi	r30, 0x77	; 119
    4738:	ff 4f       	sbci	r31, 0xFF	; 255
    473a:	60 81       	ld	r22, Z
    473c:	71 81       	ldd	r23, Z+1	; 0x01
    473e:	82 81       	ldd	r24, Z+2	; 0x02
    4740:	93 81       	ldd	r25, Z+3	; 0x03
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	40 e2       	ldi	r20, 0x20	; 32
    4748:	51 e4       	ldi	r21, 0x41	; 65
    474a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    474e:	dc 01       	movw	r26, r24
    4750:	cb 01       	movw	r24, r22
    4752:	8e 01       	movw	r16, r28
    4754:	0d 57       	subi	r16, 0x7D	; 125
    4756:	1f 4f       	sbci	r17, 0xFF	; 255
    4758:	bc 01       	movw	r22, r24
    475a:	cd 01       	movw	r24, r26
    475c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4760:	dc 01       	movw	r26, r24
    4762:	cb 01       	movw	r24, r22
    4764:	f8 01       	movw	r30, r16
    4766:	91 83       	std	Z+1, r25	; 0x01
    4768:	80 83       	st	Z, r24
    476a:	1f c0       	rjmp	.+62     	; 0x47aa <SevenSegment_From0To9+0x14e>
    476c:	fe 01       	movw	r30, r28
    476e:	ef 57       	subi	r30, 0x7F	; 127
    4770:	ff 4f       	sbci	r31, 0xFF	; 255
    4772:	80 e9       	ldi	r24, 0x90	; 144
    4774:	91 e0       	ldi	r25, 0x01	; 1
    4776:	91 83       	std	Z+1, r25	; 0x01
    4778:	80 83       	st	Z, r24
    477a:	fe 01       	movw	r30, r28
    477c:	ef 57       	subi	r30, 0x7F	; 127
    477e:	ff 4f       	sbci	r31, 0xFF	; 255
    4780:	80 81       	ld	r24, Z
    4782:	91 81       	ldd	r25, Z+1	; 0x01
    4784:	01 97       	sbiw	r24, 0x01	; 1
    4786:	f1 f7       	brne	.-4      	; 0x4784 <SevenSegment_From0To9+0x128>
    4788:	fe 01       	movw	r30, r28
    478a:	ef 57       	subi	r30, 0x7F	; 127
    478c:	ff 4f       	sbci	r31, 0xFF	; 255
    478e:	91 83       	std	Z+1, r25	; 0x01
    4790:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4792:	de 01       	movw	r26, r28
    4794:	ad 57       	subi	r26, 0x7D	; 125
    4796:	bf 4f       	sbci	r27, 0xFF	; 255
    4798:	fe 01       	movw	r30, r28
    479a:	ed 57       	subi	r30, 0x7D	; 125
    479c:	ff 4f       	sbci	r31, 0xFF	; 255
    479e:	80 81       	ld	r24, Z
    47a0:	91 81       	ldd	r25, Z+1	; 0x01
    47a2:	01 97       	sbiw	r24, 0x01	; 1
    47a4:	11 96       	adiw	r26, 0x01	; 1
    47a6:	9c 93       	st	X, r25
    47a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47aa:	fe 01       	movw	r30, r28
    47ac:	ed 57       	subi	r30, 0x7D	; 125
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	80 81       	ld	r24, Z
    47b2:	91 81       	ldd	r25, Z+1	; 0x01
    47b4:	00 97       	sbiw	r24, 0x00	; 0
    47b6:	d1 f6       	brne	.-76     	; 0x476c <SevenSegment_From0To9+0x110>
    47b8:	27 c0       	rjmp	.+78     	; 0x4808 <SevenSegment_From0To9+0x1ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47ba:	8e 01       	movw	r16, r28
    47bc:	0d 57       	subi	r16, 0x7D	; 125
    47be:	1f 4f       	sbci	r17, 0xFF	; 255
    47c0:	fe 01       	movw	r30, r28
    47c2:	eb 57       	subi	r30, 0x7B	; 123
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	60 81       	ld	r22, Z
    47c8:	71 81       	ldd	r23, Z+1	; 0x01
    47ca:	82 81       	ldd	r24, Z+2	; 0x02
    47cc:	93 81       	ldd	r25, Z+3	; 0x03
    47ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47d2:	dc 01       	movw	r26, r24
    47d4:	cb 01       	movw	r24, r22
    47d6:	f8 01       	movw	r30, r16
    47d8:	91 83       	std	Z+1, r25	; 0x01
    47da:	80 83       	st	Z, r24
    47dc:	de 01       	movw	r26, r28
    47de:	a1 58       	subi	r26, 0x81	; 129
    47e0:	bf 4f       	sbci	r27, 0xFF	; 255
    47e2:	fe 01       	movw	r30, r28
    47e4:	ed 57       	subi	r30, 0x7D	; 125
    47e6:	ff 4f       	sbci	r31, 0xFF	; 255
    47e8:	80 81       	ld	r24, Z
    47ea:	91 81       	ldd	r25, Z+1	; 0x01
    47ec:	8d 93       	st	X+, r24
    47ee:	9c 93       	st	X, r25
    47f0:	fe 01       	movw	r30, r28
    47f2:	e1 58       	subi	r30, 0x81	; 129
    47f4:	ff 4f       	sbci	r31, 0xFF	; 255
    47f6:	80 81       	ld	r24, Z
    47f8:	91 81       	ldd	r25, Z+1	; 0x01
    47fa:	01 97       	sbiw	r24, 0x01	; 1
    47fc:	f1 f7       	brne	.-4      	; 0x47fa <SevenSegment_From0To9+0x19e>
    47fe:	fe 01       	movw	r30, r28
    4800:	e1 58       	subi	r30, 0x81	; 129
    4802:	ff 4f       	sbci	r31, 0xFF	; 255
    4804:	91 83       	std	Z+1, r25	; 0x01
    4806:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 0, 0); // 1
    4808:	fe 01       	movw	r30, r28
    480a:	e3 57       	subi	r30, 0x73	; 115
    480c:	ff 4f       	sbci	r31, 0xFF	; 255
    480e:	80 81       	ld	r24, Z
    4810:	60 e0       	ldi	r22, 0x00	; 0
    4812:	41 e0       	ldi	r20, 0x01	; 1
    4814:	21 e0       	ldi	r18, 0x01	; 1
    4816:	00 e0       	ldi	r16, 0x00	; 0
    4818:	ee 24       	eor	r14, r14
    481a:	cc 24       	eor	r12, r12
    481c:	aa 24       	eor	r10, r10
    481e:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    4822:	fe 01       	movw	r30, r28
    4824:	e5 58       	subi	r30, 0x85	; 133
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	80 e0       	ldi	r24, 0x00	; 0
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	a8 e4       	ldi	r26, 0x48	; 72
    482e:	b2 e4       	ldi	r27, 0x42	; 66
    4830:	80 83       	st	Z, r24
    4832:	91 83       	std	Z+1, r25	; 0x01
    4834:	a2 83       	std	Z+2, r26	; 0x02
    4836:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4838:	8e 01       	movw	r16, r28
    483a:	09 58       	subi	r16, 0x89	; 137
    483c:	1f 4f       	sbci	r17, 0xFF	; 255
    483e:	fe 01       	movw	r30, r28
    4840:	e5 58       	subi	r30, 0x85	; 133
    4842:	ff 4f       	sbci	r31, 0xFF	; 255
    4844:	60 81       	ld	r22, Z
    4846:	71 81       	ldd	r23, Z+1	; 0x01
    4848:	82 81       	ldd	r24, Z+2	; 0x02
    484a:	93 81       	ldd	r25, Z+3	; 0x03
    484c:	20 e0       	ldi	r18, 0x00	; 0
    484e:	30 e0       	ldi	r19, 0x00	; 0
    4850:	4a e7       	ldi	r20, 0x7A	; 122
    4852:	55 e4       	ldi	r21, 0x45	; 69
    4854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4858:	dc 01       	movw	r26, r24
    485a:	cb 01       	movw	r24, r22
    485c:	f8 01       	movw	r30, r16
    485e:	80 83       	st	Z, r24
    4860:	91 83       	std	Z+1, r25	; 0x01
    4862:	a2 83       	std	Z+2, r26	; 0x02
    4864:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4866:	fe 01       	movw	r30, r28
    4868:	e9 58       	subi	r30, 0x89	; 137
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	60 81       	ld	r22, Z
    486e:	71 81       	ldd	r23, Z+1	; 0x01
    4870:	82 81       	ldd	r24, Z+2	; 0x02
    4872:	93 81       	ldd	r25, Z+3	; 0x03
    4874:	20 e0       	ldi	r18, 0x00	; 0
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	40 e8       	ldi	r20, 0x80	; 128
    487a:	5f e3       	ldi	r21, 0x3F	; 63
    487c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4880:	88 23       	and	r24, r24
    4882:	44 f4       	brge	.+16     	; 0x4894 <SevenSegment_From0To9+0x238>
		__ticks = 1;
    4884:	fe 01       	movw	r30, r28
    4886:	eb 58       	subi	r30, 0x8B	; 139
    4888:	ff 4f       	sbci	r31, 0xFF	; 255
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	90 e0       	ldi	r25, 0x00	; 0
    488e:	91 83       	std	Z+1, r25	; 0x01
    4890:	80 83       	st	Z, r24
    4892:	64 c0       	rjmp	.+200    	; 0x495c <SevenSegment_From0To9+0x300>
	else if (__tmp > 65535)
    4894:	fe 01       	movw	r30, r28
    4896:	e9 58       	subi	r30, 0x89	; 137
    4898:	ff 4f       	sbci	r31, 0xFF	; 255
    489a:	60 81       	ld	r22, Z
    489c:	71 81       	ldd	r23, Z+1	; 0x01
    489e:	82 81       	ldd	r24, Z+2	; 0x02
    48a0:	93 81       	ldd	r25, Z+3	; 0x03
    48a2:	20 e0       	ldi	r18, 0x00	; 0
    48a4:	3f ef       	ldi	r19, 0xFF	; 255
    48a6:	4f e7       	ldi	r20, 0x7F	; 127
    48a8:	57 e4       	ldi	r21, 0x47	; 71
    48aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    48ae:	18 16       	cp	r1, r24
    48b0:	0c f0       	brlt	.+2      	; 0x48b4 <SevenSegment_From0To9+0x258>
    48b2:	43 c0       	rjmp	.+134    	; 0x493a <SevenSegment_From0To9+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48b4:	fe 01       	movw	r30, r28
    48b6:	e5 58       	subi	r30, 0x85	; 133
    48b8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ba:	60 81       	ld	r22, Z
    48bc:	71 81       	ldd	r23, Z+1	; 0x01
    48be:	82 81       	ldd	r24, Z+2	; 0x02
    48c0:	93 81       	ldd	r25, Z+3	; 0x03
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	40 e2       	ldi	r20, 0x20	; 32
    48c8:	51 e4       	ldi	r21, 0x41	; 65
    48ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48ce:	dc 01       	movw	r26, r24
    48d0:	cb 01       	movw	r24, r22
    48d2:	8e 01       	movw	r16, r28
    48d4:	0b 58       	subi	r16, 0x8B	; 139
    48d6:	1f 4f       	sbci	r17, 0xFF	; 255
    48d8:	bc 01       	movw	r22, r24
    48da:	cd 01       	movw	r24, r26
    48dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e0:	dc 01       	movw	r26, r24
    48e2:	cb 01       	movw	r24, r22
    48e4:	f8 01       	movw	r30, r16
    48e6:	91 83       	std	Z+1, r25	; 0x01
    48e8:	80 83       	st	Z, r24
    48ea:	1f c0       	rjmp	.+62     	; 0x492a <SevenSegment_From0To9+0x2ce>
    48ec:	fe 01       	movw	r30, r28
    48ee:	ed 58       	subi	r30, 0x8D	; 141
    48f0:	ff 4f       	sbci	r31, 0xFF	; 255
    48f2:	80 e9       	ldi	r24, 0x90	; 144
    48f4:	91 e0       	ldi	r25, 0x01	; 1
    48f6:	91 83       	std	Z+1, r25	; 0x01
    48f8:	80 83       	st	Z, r24
    48fa:	fe 01       	movw	r30, r28
    48fc:	ed 58       	subi	r30, 0x8D	; 141
    48fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4900:	80 81       	ld	r24, Z
    4902:	91 81       	ldd	r25, Z+1	; 0x01
    4904:	01 97       	sbiw	r24, 0x01	; 1
    4906:	f1 f7       	brne	.-4      	; 0x4904 <SevenSegment_From0To9+0x2a8>
    4908:	fe 01       	movw	r30, r28
    490a:	ed 58       	subi	r30, 0x8D	; 141
    490c:	ff 4f       	sbci	r31, 0xFF	; 255
    490e:	91 83       	std	Z+1, r25	; 0x01
    4910:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4912:	de 01       	movw	r26, r28
    4914:	ab 58       	subi	r26, 0x8B	; 139
    4916:	bf 4f       	sbci	r27, 0xFF	; 255
    4918:	fe 01       	movw	r30, r28
    491a:	eb 58       	subi	r30, 0x8B	; 139
    491c:	ff 4f       	sbci	r31, 0xFF	; 255
    491e:	80 81       	ld	r24, Z
    4920:	91 81       	ldd	r25, Z+1	; 0x01
    4922:	01 97       	sbiw	r24, 0x01	; 1
    4924:	11 96       	adiw	r26, 0x01	; 1
    4926:	9c 93       	st	X, r25
    4928:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    492a:	fe 01       	movw	r30, r28
    492c:	eb 58       	subi	r30, 0x8B	; 139
    492e:	ff 4f       	sbci	r31, 0xFF	; 255
    4930:	80 81       	ld	r24, Z
    4932:	91 81       	ldd	r25, Z+1	; 0x01
    4934:	00 97       	sbiw	r24, 0x00	; 0
    4936:	d1 f6       	brne	.-76     	; 0x48ec <SevenSegment_From0To9+0x290>
    4938:	27 c0       	rjmp	.+78     	; 0x4988 <SevenSegment_From0To9+0x32c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    493a:	8e 01       	movw	r16, r28
    493c:	0b 58       	subi	r16, 0x8B	; 139
    493e:	1f 4f       	sbci	r17, 0xFF	; 255
    4940:	fe 01       	movw	r30, r28
    4942:	e9 58       	subi	r30, 0x89	; 137
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	60 81       	ld	r22, Z
    4948:	71 81       	ldd	r23, Z+1	; 0x01
    494a:	82 81       	ldd	r24, Z+2	; 0x02
    494c:	93 81       	ldd	r25, Z+3	; 0x03
    494e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4952:	dc 01       	movw	r26, r24
    4954:	cb 01       	movw	r24, r22
    4956:	f8 01       	movw	r30, r16
    4958:	91 83       	std	Z+1, r25	; 0x01
    495a:	80 83       	st	Z, r24
    495c:	de 01       	movw	r26, r28
    495e:	af 58       	subi	r26, 0x8F	; 143
    4960:	bf 4f       	sbci	r27, 0xFF	; 255
    4962:	fe 01       	movw	r30, r28
    4964:	eb 58       	subi	r30, 0x8B	; 139
    4966:	ff 4f       	sbci	r31, 0xFF	; 255
    4968:	80 81       	ld	r24, Z
    496a:	91 81       	ldd	r25, Z+1	; 0x01
    496c:	8d 93       	st	X+, r24
    496e:	9c 93       	st	X, r25
    4970:	fe 01       	movw	r30, r28
    4972:	ef 58       	subi	r30, 0x8F	; 143
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	80 81       	ld	r24, Z
    4978:	91 81       	ldd	r25, Z+1	; 0x01
    497a:	01 97       	sbiw	r24, 0x01	; 1
    497c:	f1 f7       	brne	.-4      	; 0x497a <SevenSegment_From0To9+0x31e>
    497e:	fe 01       	movw	r30, r28
    4980:	ef 58       	subi	r30, 0x8F	; 143
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	91 83       	std	Z+1, r25	; 0x01
    4986:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 0, 1, 1, 0, 1); // 2
    4988:	fe 01       	movw	r30, r28
    498a:	e3 57       	subi	r30, 0x73	; 115
    498c:	ff 4f       	sbci	r31, 0xFF	; 255
    498e:	80 81       	ld	r24, Z
    4990:	61 e0       	ldi	r22, 0x01	; 1
    4992:	41 e0       	ldi	r20, 0x01	; 1
    4994:	20 e0       	ldi	r18, 0x00	; 0
    4996:	01 e0       	ldi	r16, 0x01	; 1
    4998:	ee 24       	eor	r14, r14
    499a:	e3 94       	inc	r14
    499c:	cc 24       	eor	r12, r12
    499e:	aa 24       	eor	r10, r10
    49a0:	a3 94       	inc	r10
    49a2:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    49a6:	fe 01       	movw	r30, r28
    49a8:	e3 59       	subi	r30, 0x93	; 147
    49aa:	ff 4f       	sbci	r31, 0xFF	; 255
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	90 e0       	ldi	r25, 0x00	; 0
    49b0:	a8 e4       	ldi	r26, 0x48	; 72
    49b2:	b2 e4       	ldi	r27, 0x42	; 66
    49b4:	80 83       	st	Z, r24
    49b6:	91 83       	std	Z+1, r25	; 0x01
    49b8:	a2 83       	std	Z+2, r26	; 0x02
    49ba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49bc:	8e 01       	movw	r16, r28
    49be:	07 59       	subi	r16, 0x97	; 151
    49c0:	1f 4f       	sbci	r17, 0xFF	; 255
    49c2:	fe 01       	movw	r30, r28
    49c4:	e3 59       	subi	r30, 0x93	; 147
    49c6:	ff 4f       	sbci	r31, 0xFF	; 255
    49c8:	60 81       	ld	r22, Z
    49ca:	71 81       	ldd	r23, Z+1	; 0x01
    49cc:	82 81       	ldd	r24, Z+2	; 0x02
    49ce:	93 81       	ldd	r25, Z+3	; 0x03
    49d0:	20 e0       	ldi	r18, 0x00	; 0
    49d2:	30 e0       	ldi	r19, 0x00	; 0
    49d4:	4a e7       	ldi	r20, 0x7A	; 122
    49d6:	55 e4       	ldi	r21, 0x45	; 69
    49d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49dc:	dc 01       	movw	r26, r24
    49de:	cb 01       	movw	r24, r22
    49e0:	f8 01       	movw	r30, r16
    49e2:	80 83       	st	Z, r24
    49e4:	91 83       	std	Z+1, r25	; 0x01
    49e6:	a2 83       	std	Z+2, r26	; 0x02
    49e8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49ea:	fe 01       	movw	r30, r28
    49ec:	e7 59       	subi	r30, 0x97	; 151
    49ee:	ff 4f       	sbci	r31, 0xFF	; 255
    49f0:	60 81       	ld	r22, Z
    49f2:	71 81       	ldd	r23, Z+1	; 0x01
    49f4:	82 81       	ldd	r24, Z+2	; 0x02
    49f6:	93 81       	ldd	r25, Z+3	; 0x03
    49f8:	20 e0       	ldi	r18, 0x00	; 0
    49fa:	30 e0       	ldi	r19, 0x00	; 0
    49fc:	40 e8       	ldi	r20, 0x80	; 128
    49fe:	5f e3       	ldi	r21, 0x3F	; 63
    4a00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a04:	88 23       	and	r24, r24
    4a06:	44 f4       	brge	.+16     	; 0x4a18 <SevenSegment_From0To9+0x3bc>
		__ticks = 1;
    4a08:	fe 01       	movw	r30, r28
    4a0a:	e9 59       	subi	r30, 0x99	; 153
    4a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a0e:	81 e0       	ldi	r24, 0x01	; 1
    4a10:	90 e0       	ldi	r25, 0x00	; 0
    4a12:	91 83       	std	Z+1, r25	; 0x01
    4a14:	80 83       	st	Z, r24
    4a16:	64 c0       	rjmp	.+200    	; 0x4ae0 <SevenSegment_From0To9+0x484>
	else if (__tmp > 65535)
    4a18:	fe 01       	movw	r30, r28
    4a1a:	e7 59       	subi	r30, 0x97	; 151
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	60 81       	ld	r22, Z
    4a20:	71 81       	ldd	r23, Z+1	; 0x01
    4a22:	82 81       	ldd	r24, Z+2	; 0x02
    4a24:	93 81       	ldd	r25, Z+3	; 0x03
    4a26:	20 e0       	ldi	r18, 0x00	; 0
    4a28:	3f ef       	ldi	r19, 0xFF	; 255
    4a2a:	4f e7       	ldi	r20, 0x7F	; 127
    4a2c:	57 e4       	ldi	r21, 0x47	; 71
    4a2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a32:	18 16       	cp	r1, r24
    4a34:	0c f0       	brlt	.+2      	; 0x4a38 <SevenSegment_From0To9+0x3dc>
    4a36:	43 c0       	rjmp	.+134    	; 0x4abe <SevenSegment_From0To9+0x462>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a38:	fe 01       	movw	r30, r28
    4a3a:	e3 59       	subi	r30, 0x93	; 147
    4a3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3e:	60 81       	ld	r22, Z
    4a40:	71 81       	ldd	r23, Z+1	; 0x01
    4a42:	82 81       	ldd	r24, Z+2	; 0x02
    4a44:	93 81       	ldd	r25, Z+3	; 0x03
    4a46:	20 e0       	ldi	r18, 0x00	; 0
    4a48:	30 e0       	ldi	r19, 0x00	; 0
    4a4a:	40 e2       	ldi	r20, 0x20	; 32
    4a4c:	51 e4       	ldi	r21, 0x41	; 65
    4a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a52:	dc 01       	movw	r26, r24
    4a54:	cb 01       	movw	r24, r22
    4a56:	8e 01       	movw	r16, r28
    4a58:	09 59       	subi	r16, 0x99	; 153
    4a5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5c:	bc 01       	movw	r22, r24
    4a5e:	cd 01       	movw	r24, r26
    4a60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a64:	dc 01       	movw	r26, r24
    4a66:	cb 01       	movw	r24, r22
    4a68:	f8 01       	movw	r30, r16
    4a6a:	91 83       	std	Z+1, r25	; 0x01
    4a6c:	80 83       	st	Z, r24
    4a6e:	1f c0       	rjmp	.+62     	; 0x4aae <SevenSegment_From0To9+0x452>
    4a70:	fe 01       	movw	r30, r28
    4a72:	eb 59       	subi	r30, 0x9B	; 155
    4a74:	ff 4f       	sbci	r31, 0xFF	; 255
    4a76:	80 e9       	ldi	r24, 0x90	; 144
    4a78:	91 e0       	ldi	r25, 0x01	; 1
    4a7a:	91 83       	std	Z+1, r25	; 0x01
    4a7c:	80 83       	st	Z, r24
    4a7e:	fe 01       	movw	r30, r28
    4a80:	eb 59       	subi	r30, 0x9B	; 155
    4a82:	ff 4f       	sbci	r31, 0xFF	; 255
    4a84:	80 81       	ld	r24, Z
    4a86:	91 81       	ldd	r25, Z+1	; 0x01
    4a88:	01 97       	sbiw	r24, 0x01	; 1
    4a8a:	f1 f7       	brne	.-4      	; 0x4a88 <SevenSegment_From0To9+0x42c>
    4a8c:	fe 01       	movw	r30, r28
    4a8e:	eb 59       	subi	r30, 0x9B	; 155
    4a90:	ff 4f       	sbci	r31, 0xFF	; 255
    4a92:	91 83       	std	Z+1, r25	; 0x01
    4a94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a96:	de 01       	movw	r26, r28
    4a98:	a9 59       	subi	r26, 0x99	; 153
    4a9a:	bf 4f       	sbci	r27, 0xFF	; 255
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	e9 59       	subi	r30, 0x99	; 153
    4aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa2:	80 81       	ld	r24, Z
    4aa4:	91 81       	ldd	r25, Z+1	; 0x01
    4aa6:	01 97       	sbiw	r24, 0x01	; 1
    4aa8:	11 96       	adiw	r26, 0x01	; 1
    4aaa:	9c 93       	st	X, r25
    4aac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aae:	fe 01       	movw	r30, r28
    4ab0:	e9 59       	subi	r30, 0x99	; 153
    4ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab4:	80 81       	ld	r24, Z
    4ab6:	91 81       	ldd	r25, Z+1	; 0x01
    4ab8:	00 97       	sbiw	r24, 0x00	; 0
    4aba:	d1 f6       	brne	.-76     	; 0x4a70 <SevenSegment_From0To9+0x414>
    4abc:	27 c0       	rjmp	.+78     	; 0x4b0c <SevenSegment_From0To9+0x4b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4abe:	8e 01       	movw	r16, r28
    4ac0:	09 59       	subi	r16, 0x99	; 153
    4ac2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ac4:	fe 01       	movw	r30, r28
    4ac6:	e7 59       	subi	r30, 0x97	; 151
    4ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aca:	60 81       	ld	r22, Z
    4acc:	71 81       	ldd	r23, Z+1	; 0x01
    4ace:	82 81       	ldd	r24, Z+2	; 0x02
    4ad0:	93 81       	ldd	r25, Z+3	; 0x03
    4ad2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad6:	dc 01       	movw	r26, r24
    4ad8:	cb 01       	movw	r24, r22
    4ada:	f8 01       	movw	r30, r16
    4adc:	91 83       	std	Z+1, r25	; 0x01
    4ade:	80 83       	st	Z, r24
    4ae0:	de 01       	movw	r26, r28
    4ae2:	ad 59       	subi	r26, 0x9D	; 157
    4ae4:	bf 4f       	sbci	r27, 0xFF	; 255
    4ae6:	fe 01       	movw	r30, r28
    4ae8:	e9 59       	subi	r30, 0x99	; 153
    4aea:	ff 4f       	sbci	r31, 0xFF	; 255
    4aec:	80 81       	ld	r24, Z
    4aee:	91 81       	ldd	r25, Z+1	; 0x01
    4af0:	8d 93       	st	X+, r24
    4af2:	9c 93       	st	X, r25
    4af4:	fe 01       	movw	r30, r28
    4af6:	ed 59       	subi	r30, 0x9D	; 157
    4af8:	ff 4f       	sbci	r31, 0xFF	; 255
    4afa:	80 81       	ld	r24, Z
    4afc:	91 81       	ldd	r25, Z+1	; 0x01
    4afe:	01 97       	sbiw	r24, 0x01	; 1
    4b00:	f1 f7       	brne	.-4      	; 0x4afe <SevenSegment_From0To9+0x4a2>
    4b02:	fe 01       	movw	r30, r28
    4b04:	ed 59       	subi	r30, 0x9D	; 157
    4b06:	ff 4f       	sbci	r31, 0xFF	; 255
    4b08:	91 83       	std	Z+1, r25	; 0x01
    4b0a:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 0, 1); // 3
    4b0c:	fe 01       	movw	r30, r28
    4b0e:	e3 57       	subi	r30, 0x73	; 115
    4b10:	ff 4f       	sbci	r31, 0xFF	; 255
    4b12:	80 81       	ld	r24, Z
    4b14:	61 e0       	ldi	r22, 0x01	; 1
    4b16:	41 e0       	ldi	r20, 0x01	; 1
    4b18:	21 e0       	ldi	r18, 0x01	; 1
    4b1a:	01 e0       	ldi	r16, 0x01	; 1
    4b1c:	ee 24       	eor	r14, r14
    4b1e:	cc 24       	eor	r12, r12
    4b20:	aa 24       	eor	r10, r10
    4b22:	a3 94       	inc	r10
    4b24:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    4b28:	fe 01       	movw	r30, r28
    4b2a:	e1 5a       	subi	r30, 0xA1	; 161
    4b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2e:	80 e0       	ldi	r24, 0x00	; 0
    4b30:	90 e0       	ldi	r25, 0x00	; 0
    4b32:	a8 e4       	ldi	r26, 0x48	; 72
    4b34:	b2 e4       	ldi	r27, 0x42	; 66
    4b36:	80 83       	st	Z, r24
    4b38:	91 83       	std	Z+1, r25	; 0x01
    4b3a:	a2 83       	std	Z+2, r26	; 0x02
    4b3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b3e:	8e 01       	movw	r16, r28
    4b40:	05 5a       	subi	r16, 0xA5	; 165
    4b42:	1f 4f       	sbci	r17, 0xFF	; 255
    4b44:	fe 01       	movw	r30, r28
    4b46:	e1 5a       	subi	r30, 0xA1	; 161
    4b48:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4a:	60 81       	ld	r22, Z
    4b4c:	71 81       	ldd	r23, Z+1	; 0x01
    4b4e:	82 81       	ldd	r24, Z+2	; 0x02
    4b50:	93 81       	ldd	r25, Z+3	; 0x03
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	4a e7       	ldi	r20, 0x7A	; 122
    4b58:	55 e4       	ldi	r21, 0x45	; 69
    4b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
    4b62:	f8 01       	movw	r30, r16
    4b64:	80 83       	st	Z, r24
    4b66:	91 83       	std	Z+1, r25	; 0x01
    4b68:	a2 83       	std	Z+2, r26	; 0x02
    4b6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4b6c:	fe 01       	movw	r30, r28
    4b6e:	e5 5a       	subi	r30, 0xA5	; 165
    4b70:	ff 4f       	sbci	r31, 0xFF	; 255
    4b72:	60 81       	ld	r22, Z
    4b74:	71 81       	ldd	r23, Z+1	; 0x01
    4b76:	82 81       	ldd	r24, Z+2	; 0x02
    4b78:	93 81       	ldd	r25, Z+3	; 0x03
    4b7a:	20 e0       	ldi	r18, 0x00	; 0
    4b7c:	30 e0       	ldi	r19, 0x00	; 0
    4b7e:	40 e8       	ldi	r20, 0x80	; 128
    4b80:	5f e3       	ldi	r21, 0x3F	; 63
    4b82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4b86:	88 23       	and	r24, r24
    4b88:	44 f4       	brge	.+16     	; 0x4b9a <SevenSegment_From0To9+0x53e>
		__ticks = 1;
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	e7 5a       	subi	r30, 0xA7	; 167
    4b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b90:	81 e0       	ldi	r24, 0x01	; 1
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	91 83       	std	Z+1, r25	; 0x01
    4b96:	80 83       	st	Z, r24
    4b98:	64 c0       	rjmp	.+200    	; 0x4c62 <SevenSegment_From0To9+0x606>
	else if (__tmp > 65535)
    4b9a:	fe 01       	movw	r30, r28
    4b9c:	e5 5a       	subi	r30, 0xA5	; 165
    4b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ba0:	60 81       	ld	r22, Z
    4ba2:	71 81       	ldd	r23, Z+1	; 0x01
    4ba4:	82 81       	ldd	r24, Z+2	; 0x02
    4ba6:	93 81       	ldd	r25, Z+3	; 0x03
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	3f ef       	ldi	r19, 0xFF	; 255
    4bac:	4f e7       	ldi	r20, 0x7F	; 127
    4bae:	57 e4       	ldi	r21, 0x47	; 71
    4bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bb4:	18 16       	cp	r1, r24
    4bb6:	0c f0       	brlt	.+2      	; 0x4bba <SevenSegment_From0To9+0x55e>
    4bb8:	43 c0       	rjmp	.+134    	; 0x4c40 <SevenSegment_From0To9+0x5e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bba:	fe 01       	movw	r30, r28
    4bbc:	e1 5a       	subi	r30, 0xA1	; 161
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	60 81       	ld	r22, Z
    4bc2:	71 81       	ldd	r23, Z+1	; 0x01
    4bc4:	82 81       	ldd	r24, Z+2	; 0x02
    4bc6:	93 81       	ldd	r25, Z+3	; 0x03
    4bc8:	20 e0       	ldi	r18, 0x00	; 0
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	40 e2       	ldi	r20, 0x20	; 32
    4bce:	51 e4       	ldi	r21, 0x41	; 65
    4bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bd4:	dc 01       	movw	r26, r24
    4bd6:	cb 01       	movw	r24, r22
    4bd8:	8e 01       	movw	r16, r28
    4bda:	07 5a       	subi	r16, 0xA7	; 167
    4bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bde:	bc 01       	movw	r22, r24
    4be0:	cd 01       	movw	r24, r26
    4be2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be6:	dc 01       	movw	r26, r24
    4be8:	cb 01       	movw	r24, r22
    4bea:	f8 01       	movw	r30, r16
    4bec:	91 83       	std	Z+1, r25	; 0x01
    4bee:	80 83       	st	Z, r24
    4bf0:	1f c0       	rjmp	.+62     	; 0x4c30 <SevenSegment_From0To9+0x5d4>
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	e9 5a       	subi	r30, 0xA9	; 169
    4bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf8:	80 e9       	ldi	r24, 0x90	; 144
    4bfa:	91 e0       	ldi	r25, 0x01	; 1
    4bfc:	91 83       	std	Z+1, r25	; 0x01
    4bfe:	80 83       	st	Z, r24
    4c00:	fe 01       	movw	r30, r28
    4c02:	e9 5a       	subi	r30, 0xA9	; 169
    4c04:	ff 4f       	sbci	r31, 0xFF	; 255
    4c06:	80 81       	ld	r24, Z
    4c08:	91 81       	ldd	r25, Z+1	; 0x01
    4c0a:	01 97       	sbiw	r24, 0x01	; 1
    4c0c:	f1 f7       	brne	.-4      	; 0x4c0a <SevenSegment_From0To9+0x5ae>
    4c0e:	fe 01       	movw	r30, r28
    4c10:	e9 5a       	subi	r30, 0xA9	; 169
    4c12:	ff 4f       	sbci	r31, 0xFF	; 255
    4c14:	91 83       	std	Z+1, r25	; 0x01
    4c16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c18:	de 01       	movw	r26, r28
    4c1a:	a7 5a       	subi	r26, 0xA7	; 167
    4c1c:	bf 4f       	sbci	r27, 0xFF	; 255
    4c1e:	fe 01       	movw	r30, r28
    4c20:	e7 5a       	subi	r30, 0xA7	; 167
    4c22:	ff 4f       	sbci	r31, 0xFF	; 255
    4c24:	80 81       	ld	r24, Z
    4c26:	91 81       	ldd	r25, Z+1	; 0x01
    4c28:	01 97       	sbiw	r24, 0x01	; 1
    4c2a:	11 96       	adiw	r26, 0x01	; 1
    4c2c:	9c 93       	st	X, r25
    4c2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c30:	fe 01       	movw	r30, r28
    4c32:	e7 5a       	subi	r30, 0xA7	; 167
    4c34:	ff 4f       	sbci	r31, 0xFF	; 255
    4c36:	80 81       	ld	r24, Z
    4c38:	91 81       	ldd	r25, Z+1	; 0x01
    4c3a:	00 97       	sbiw	r24, 0x00	; 0
    4c3c:	d1 f6       	brne	.-76     	; 0x4bf2 <SevenSegment_From0To9+0x596>
    4c3e:	27 c0       	rjmp	.+78     	; 0x4c8e <SevenSegment_From0To9+0x632>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c40:	8e 01       	movw	r16, r28
    4c42:	07 5a       	subi	r16, 0xA7	; 167
    4c44:	1f 4f       	sbci	r17, 0xFF	; 255
    4c46:	fe 01       	movw	r30, r28
    4c48:	e5 5a       	subi	r30, 0xA5	; 165
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	60 81       	ld	r22, Z
    4c4e:	71 81       	ldd	r23, Z+1	; 0x01
    4c50:	82 81       	ldd	r24, Z+2	; 0x02
    4c52:	93 81       	ldd	r25, Z+3	; 0x03
    4c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c58:	dc 01       	movw	r26, r24
    4c5a:	cb 01       	movw	r24, r22
    4c5c:	f8 01       	movw	r30, r16
    4c5e:	91 83       	std	Z+1, r25	; 0x01
    4c60:	80 83       	st	Z, r24
    4c62:	de 01       	movw	r26, r28
    4c64:	ab 5a       	subi	r26, 0xAB	; 171
    4c66:	bf 4f       	sbci	r27, 0xFF	; 255
    4c68:	fe 01       	movw	r30, r28
    4c6a:	e7 5a       	subi	r30, 0xA7	; 167
    4c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6e:	80 81       	ld	r24, Z
    4c70:	91 81       	ldd	r25, Z+1	; 0x01
    4c72:	8d 93       	st	X+, r24
    4c74:	9c 93       	st	X, r25
    4c76:	fe 01       	movw	r30, r28
    4c78:	eb 5a       	subi	r30, 0xAB	; 171
    4c7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c7c:	80 81       	ld	r24, Z
    4c7e:	91 81       	ldd	r25, Z+1	; 0x01
    4c80:	01 97       	sbiw	r24, 0x01	; 1
    4c82:	f1 f7       	brne	.-4      	; 0x4c80 <SevenSegment_From0To9+0x624>
    4c84:	fe 01       	movw	r30, r28
    4c86:	eb 5a       	subi	r30, 0xAB	; 171
    4c88:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8a:	91 83       	std	Z+1, r25	; 0x01
    4c8c:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 0, 1, 1); // 4
    4c8e:	fe 01       	movw	r30, r28
    4c90:	e3 57       	subi	r30, 0x73	; 115
    4c92:	ff 4f       	sbci	r31, 0xFF	; 255
    4c94:	80 81       	ld	r24, Z
    4c96:	60 e0       	ldi	r22, 0x00	; 0
    4c98:	41 e0       	ldi	r20, 0x01	; 1
    4c9a:	21 e0       	ldi	r18, 0x01	; 1
    4c9c:	00 e0       	ldi	r16, 0x00	; 0
    4c9e:	ee 24       	eor	r14, r14
    4ca0:	cc 24       	eor	r12, r12
    4ca2:	c3 94       	inc	r12
    4ca4:	aa 24       	eor	r10, r10
    4ca6:	a3 94       	inc	r10
    4ca8:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    4cac:	fe 01       	movw	r30, r28
    4cae:	ef 5a       	subi	r30, 0xAF	; 175
    4cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	a8 e4       	ldi	r26, 0x48	; 72
    4cb8:	b2 e4       	ldi	r27, 0x42	; 66
    4cba:	80 83       	st	Z, r24
    4cbc:	91 83       	std	Z+1, r25	; 0x01
    4cbe:	a2 83       	std	Z+2, r26	; 0x02
    4cc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc2:	8e 01       	movw	r16, r28
    4cc4:	03 5b       	subi	r16, 0xB3	; 179
    4cc6:	1f 4f       	sbci	r17, 0xFF	; 255
    4cc8:	fe 01       	movw	r30, r28
    4cca:	ef 5a       	subi	r30, 0xAF	; 175
    4ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    4cce:	60 81       	ld	r22, Z
    4cd0:	71 81       	ldd	r23, Z+1	; 0x01
    4cd2:	82 81       	ldd	r24, Z+2	; 0x02
    4cd4:	93 81       	ldd	r25, Z+3	; 0x03
    4cd6:	20 e0       	ldi	r18, 0x00	; 0
    4cd8:	30 e0       	ldi	r19, 0x00	; 0
    4cda:	4a e7       	ldi	r20, 0x7A	; 122
    4cdc:	55 e4       	ldi	r21, 0x45	; 69
    4cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	f8 01       	movw	r30, r16
    4ce8:	80 83       	st	Z, r24
    4cea:	91 83       	std	Z+1, r25	; 0x01
    4cec:	a2 83       	std	Z+2, r26	; 0x02
    4cee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4cf0:	fe 01       	movw	r30, r28
    4cf2:	e3 5b       	subi	r30, 0xB3	; 179
    4cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf6:	60 81       	ld	r22, Z
    4cf8:	71 81       	ldd	r23, Z+1	; 0x01
    4cfa:	82 81       	ldd	r24, Z+2	; 0x02
    4cfc:	93 81       	ldd	r25, Z+3	; 0x03
    4cfe:	20 e0       	ldi	r18, 0x00	; 0
    4d00:	30 e0       	ldi	r19, 0x00	; 0
    4d02:	40 e8       	ldi	r20, 0x80	; 128
    4d04:	5f e3       	ldi	r21, 0x3F	; 63
    4d06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4d0a:	88 23       	and	r24, r24
    4d0c:	44 f4       	brge	.+16     	; 0x4d1e <SevenSegment_From0To9+0x6c2>
		__ticks = 1;
    4d0e:	fe 01       	movw	r30, r28
    4d10:	e5 5b       	subi	r30, 0xB5	; 181
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	81 e0       	ldi	r24, 0x01	; 1
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	80 83       	st	Z, r24
    4d1c:	64 c0       	rjmp	.+200    	; 0x4de6 <SevenSegment_From0To9+0x78a>
	else if (__tmp > 65535)
    4d1e:	fe 01       	movw	r30, r28
    4d20:	e3 5b       	subi	r30, 0xB3	; 179
    4d22:	ff 4f       	sbci	r31, 0xFF	; 255
    4d24:	60 81       	ld	r22, Z
    4d26:	71 81       	ldd	r23, Z+1	; 0x01
    4d28:	82 81       	ldd	r24, Z+2	; 0x02
    4d2a:	93 81       	ldd	r25, Z+3	; 0x03
    4d2c:	20 e0       	ldi	r18, 0x00	; 0
    4d2e:	3f ef       	ldi	r19, 0xFF	; 255
    4d30:	4f e7       	ldi	r20, 0x7F	; 127
    4d32:	57 e4       	ldi	r21, 0x47	; 71
    4d34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d38:	18 16       	cp	r1, r24
    4d3a:	0c f0       	brlt	.+2      	; 0x4d3e <SevenSegment_From0To9+0x6e2>
    4d3c:	43 c0       	rjmp	.+134    	; 0x4dc4 <SevenSegment_From0To9+0x768>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d3e:	fe 01       	movw	r30, r28
    4d40:	ef 5a       	subi	r30, 0xAF	; 175
    4d42:	ff 4f       	sbci	r31, 0xFF	; 255
    4d44:	60 81       	ld	r22, Z
    4d46:	71 81       	ldd	r23, Z+1	; 0x01
    4d48:	82 81       	ldd	r24, Z+2	; 0x02
    4d4a:	93 81       	ldd	r25, Z+3	; 0x03
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	40 e2       	ldi	r20, 0x20	; 32
    4d52:	51 e4       	ldi	r21, 0x41	; 65
    4d54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d58:	dc 01       	movw	r26, r24
    4d5a:	cb 01       	movw	r24, r22
    4d5c:	8e 01       	movw	r16, r28
    4d5e:	05 5b       	subi	r16, 0xB5	; 181
    4d60:	1f 4f       	sbci	r17, 0xFF	; 255
    4d62:	bc 01       	movw	r22, r24
    4d64:	cd 01       	movw	r24, r26
    4d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d6a:	dc 01       	movw	r26, r24
    4d6c:	cb 01       	movw	r24, r22
    4d6e:	f8 01       	movw	r30, r16
    4d70:	91 83       	std	Z+1, r25	; 0x01
    4d72:	80 83       	st	Z, r24
    4d74:	1f c0       	rjmp	.+62     	; 0x4db4 <SevenSegment_From0To9+0x758>
    4d76:	fe 01       	movw	r30, r28
    4d78:	e7 5b       	subi	r30, 0xB7	; 183
    4d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d7c:	80 e9       	ldi	r24, 0x90	; 144
    4d7e:	91 e0       	ldi	r25, 0x01	; 1
    4d80:	91 83       	std	Z+1, r25	; 0x01
    4d82:	80 83       	st	Z, r24
    4d84:	fe 01       	movw	r30, r28
    4d86:	e7 5b       	subi	r30, 0xB7	; 183
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	80 81       	ld	r24, Z
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	01 97       	sbiw	r24, 0x01	; 1
    4d90:	f1 f7       	brne	.-4      	; 0x4d8e <SevenSegment_From0To9+0x732>
    4d92:	fe 01       	movw	r30, r28
    4d94:	e7 5b       	subi	r30, 0xB7	; 183
    4d96:	ff 4f       	sbci	r31, 0xFF	; 255
    4d98:	91 83       	std	Z+1, r25	; 0x01
    4d9a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d9c:	de 01       	movw	r26, r28
    4d9e:	a5 5b       	subi	r26, 0xB5	; 181
    4da0:	bf 4f       	sbci	r27, 0xFF	; 255
    4da2:	fe 01       	movw	r30, r28
    4da4:	e5 5b       	subi	r30, 0xB5	; 181
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	80 81       	ld	r24, Z
    4daa:	91 81       	ldd	r25, Z+1	; 0x01
    4dac:	01 97       	sbiw	r24, 0x01	; 1
    4dae:	11 96       	adiw	r26, 0x01	; 1
    4db0:	9c 93       	st	X, r25
    4db2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4db4:	fe 01       	movw	r30, r28
    4db6:	e5 5b       	subi	r30, 0xB5	; 181
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	80 81       	ld	r24, Z
    4dbc:	91 81       	ldd	r25, Z+1	; 0x01
    4dbe:	00 97       	sbiw	r24, 0x00	; 0
    4dc0:	d1 f6       	brne	.-76     	; 0x4d76 <SevenSegment_From0To9+0x71a>
    4dc2:	27 c0       	rjmp	.+78     	; 0x4e12 <SevenSegment_From0To9+0x7b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4dc4:	8e 01       	movw	r16, r28
    4dc6:	05 5b       	subi	r16, 0xB5	; 181
    4dc8:	1f 4f       	sbci	r17, 0xFF	; 255
    4dca:	fe 01       	movw	r30, r28
    4dcc:	e3 5b       	subi	r30, 0xB3	; 179
    4dce:	ff 4f       	sbci	r31, 0xFF	; 255
    4dd0:	60 81       	ld	r22, Z
    4dd2:	71 81       	ldd	r23, Z+1	; 0x01
    4dd4:	82 81       	ldd	r24, Z+2	; 0x02
    4dd6:	93 81       	ldd	r25, Z+3	; 0x03
    4dd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ddc:	dc 01       	movw	r26, r24
    4dde:	cb 01       	movw	r24, r22
    4de0:	f8 01       	movw	r30, r16
    4de2:	91 83       	std	Z+1, r25	; 0x01
    4de4:	80 83       	st	Z, r24
    4de6:	de 01       	movw	r26, r28
    4de8:	a9 5b       	subi	r26, 0xB9	; 185
    4dea:	bf 4f       	sbci	r27, 0xFF	; 255
    4dec:	fe 01       	movw	r30, r28
    4dee:	e5 5b       	subi	r30, 0xB5	; 181
    4df0:	ff 4f       	sbci	r31, 0xFF	; 255
    4df2:	80 81       	ld	r24, Z
    4df4:	91 81       	ldd	r25, Z+1	; 0x01
    4df6:	8d 93       	st	X+, r24
    4df8:	9c 93       	st	X, r25
    4dfa:	fe 01       	movw	r30, r28
    4dfc:	e9 5b       	subi	r30, 0xB9	; 185
    4dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    4e00:	80 81       	ld	r24, Z
    4e02:	91 81       	ldd	r25, Z+1	; 0x01
    4e04:	01 97       	sbiw	r24, 0x01	; 1
    4e06:	f1 f7       	brne	.-4      	; 0x4e04 <SevenSegment_From0To9+0x7a8>
    4e08:	fe 01       	movw	r30, r28
    4e0a:	e9 5b       	subi	r30, 0xB9	; 185
    4e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0e:	91 83       	std	Z+1, r25	; 0x01
    4e10:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 0, 1, 1); // 5
    4e12:	fe 01       	movw	r30, r28
    4e14:	e3 57       	subi	r30, 0x73	; 115
    4e16:	ff 4f       	sbci	r31, 0xFF	; 255
    4e18:	80 81       	ld	r24, Z
    4e1a:	61 e0       	ldi	r22, 0x01	; 1
    4e1c:	40 e0       	ldi	r20, 0x00	; 0
    4e1e:	21 e0       	ldi	r18, 0x01	; 1
    4e20:	01 e0       	ldi	r16, 0x01	; 1
    4e22:	ee 24       	eor	r14, r14
    4e24:	cc 24       	eor	r12, r12
    4e26:	c3 94       	inc	r12
    4e28:	aa 24       	eor	r10, r10
    4e2a:	a3 94       	inc	r10
    4e2c:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    4e30:	fe 01       	movw	r30, r28
    4e32:	ed 5b       	subi	r30, 0xBD	; 189
    4e34:	ff 4f       	sbci	r31, 0xFF	; 255
    4e36:	80 e0       	ldi	r24, 0x00	; 0
    4e38:	90 e0       	ldi	r25, 0x00	; 0
    4e3a:	a8 e4       	ldi	r26, 0x48	; 72
    4e3c:	b2 e4       	ldi	r27, 0x42	; 66
    4e3e:	80 83       	st	Z, r24
    4e40:	91 83       	std	Z+1, r25	; 0x01
    4e42:	a2 83       	std	Z+2, r26	; 0x02
    4e44:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e46:	8e 01       	movw	r16, r28
    4e48:	01 5c       	subi	r16, 0xC1	; 193
    4e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    4e4c:	fe 01       	movw	r30, r28
    4e4e:	ed 5b       	subi	r30, 0xBD	; 189
    4e50:	ff 4f       	sbci	r31, 0xFF	; 255
    4e52:	60 81       	ld	r22, Z
    4e54:	71 81       	ldd	r23, Z+1	; 0x01
    4e56:	82 81       	ldd	r24, Z+2	; 0x02
    4e58:	93 81       	ldd	r25, Z+3	; 0x03
    4e5a:	20 e0       	ldi	r18, 0x00	; 0
    4e5c:	30 e0       	ldi	r19, 0x00	; 0
    4e5e:	4a e7       	ldi	r20, 0x7A	; 122
    4e60:	55 e4       	ldi	r21, 0x45	; 69
    4e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e66:	dc 01       	movw	r26, r24
    4e68:	cb 01       	movw	r24, r22
    4e6a:	f8 01       	movw	r30, r16
    4e6c:	80 83       	st	Z, r24
    4e6e:	91 83       	std	Z+1, r25	; 0x01
    4e70:	a2 83       	std	Z+2, r26	; 0x02
    4e72:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e74:	fe 01       	movw	r30, r28
    4e76:	ff 96       	adiw	r30, 0x3f	; 63
    4e78:	60 81       	ld	r22, Z
    4e7a:	71 81       	ldd	r23, Z+1	; 0x01
    4e7c:	82 81       	ldd	r24, Z+2	; 0x02
    4e7e:	93 81       	ldd	r25, Z+3	; 0x03
    4e80:	20 e0       	ldi	r18, 0x00	; 0
    4e82:	30 e0       	ldi	r19, 0x00	; 0
    4e84:	40 e8       	ldi	r20, 0x80	; 128
    4e86:	5f e3       	ldi	r21, 0x3F	; 63
    4e88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4e8c:	88 23       	and	r24, r24
    4e8e:	2c f4       	brge	.+10     	; 0x4e9a <SevenSegment_From0To9+0x83e>
		__ticks = 1;
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	90 e0       	ldi	r25, 0x00	; 0
    4e94:	9e af       	std	Y+62, r25	; 0x3e
    4e96:	8d af       	std	Y+61, r24	; 0x3d
    4e98:	46 c0       	rjmp	.+140    	; 0x4f26 <SevenSegment_From0To9+0x8ca>
	else if (__tmp > 65535)
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	ff 96       	adiw	r30, 0x3f	; 63
    4e9e:	60 81       	ld	r22, Z
    4ea0:	71 81       	ldd	r23, Z+1	; 0x01
    4ea2:	82 81       	ldd	r24, Z+2	; 0x02
    4ea4:	93 81       	ldd	r25, Z+3	; 0x03
    4ea6:	20 e0       	ldi	r18, 0x00	; 0
    4ea8:	3f ef       	ldi	r19, 0xFF	; 255
    4eaa:	4f e7       	ldi	r20, 0x7F	; 127
    4eac:	57 e4       	ldi	r21, 0x47	; 71
    4eae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4eb2:	18 16       	cp	r1, r24
    4eb4:	64 f5       	brge	.+88     	; 0x4f0e <SevenSegment_From0To9+0x8b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4eb6:	fe 01       	movw	r30, r28
    4eb8:	ed 5b       	subi	r30, 0xBD	; 189
    4eba:	ff 4f       	sbci	r31, 0xFF	; 255
    4ebc:	60 81       	ld	r22, Z
    4ebe:	71 81       	ldd	r23, Z+1	; 0x01
    4ec0:	82 81       	ldd	r24, Z+2	; 0x02
    4ec2:	93 81       	ldd	r25, Z+3	; 0x03
    4ec4:	20 e0       	ldi	r18, 0x00	; 0
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	40 e2       	ldi	r20, 0x20	; 32
    4eca:	51 e4       	ldi	r21, 0x41	; 65
    4ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ed0:	dc 01       	movw	r26, r24
    4ed2:	cb 01       	movw	r24, r22
    4ed4:	bc 01       	movw	r22, r24
    4ed6:	cd 01       	movw	r24, r26
    4ed8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4edc:	dc 01       	movw	r26, r24
    4ede:	cb 01       	movw	r24, r22
    4ee0:	9e af       	std	Y+62, r25	; 0x3e
    4ee2:	8d af       	std	Y+61, r24	; 0x3d
    4ee4:	0f c0       	rjmp	.+30     	; 0x4f04 <SevenSegment_From0To9+0x8a8>
    4ee6:	80 e9       	ldi	r24, 0x90	; 144
    4ee8:	91 e0       	ldi	r25, 0x01	; 1
    4eea:	9c af       	std	Y+60, r25	; 0x3c
    4eec:	8b af       	std	Y+59, r24	; 0x3b
    4eee:	8b ad       	ldd	r24, Y+59	; 0x3b
    4ef0:	9c ad       	ldd	r25, Y+60	; 0x3c
    4ef2:	01 97       	sbiw	r24, 0x01	; 1
    4ef4:	f1 f7       	brne	.-4      	; 0x4ef2 <SevenSegment_From0To9+0x896>
    4ef6:	9c af       	std	Y+60, r25	; 0x3c
    4ef8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4efa:	8d ad       	ldd	r24, Y+61	; 0x3d
    4efc:	9e ad       	ldd	r25, Y+62	; 0x3e
    4efe:	01 97       	sbiw	r24, 0x01	; 1
    4f00:	9e af       	std	Y+62, r25	; 0x3e
    4f02:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f04:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f06:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f08:	00 97       	sbiw	r24, 0x00	; 0
    4f0a:	69 f7       	brne	.-38     	; 0x4ee6 <SevenSegment_From0To9+0x88a>
    4f0c:	16 c0       	rjmp	.+44     	; 0x4f3a <SevenSegment_From0To9+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f0e:	fe 01       	movw	r30, r28
    4f10:	ff 96       	adiw	r30, 0x3f	; 63
    4f12:	60 81       	ld	r22, Z
    4f14:	71 81       	ldd	r23, Z+1	; 0x01
    4f16:	82 81       	ldd	r24, Z+2	; 0x02
    4f18:	93 81       	ldd	r25, Z+3	; 0x03
    4f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f1e:	dc 01       	movw	r26, r24
    4f20:	cb 01       	movw	r24, r22
    4f22:	9e af       	std	Y+62, r25	; 0x3e
    4f24:	8d af       	std	Y+61, r24	; 0x3d
    4f26:	8d ad       	ldd	r24, Y+61	; 0x3d
    4f28:	9e ad       	ldd	r25, Y+62	; 0x3e
    4f2a:	9a af       	std	Y+58, r25	; 0x3a
    4f2c:	89 af       	std	Y+57, r24	; 0x39
    4f2e:	89 ad       	ldd	r24, Y+57	; 0x39
    4f30:	9a ad       	ldd	r25, Y+58	; 0x3a
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	f1 f7       	brne	.-4      	; 0x4f32 <SevenSegment_From0To9+0x8d6>
    4f36:	9a af       	std	Y+58, r25	; 0x3a
    4f38:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 1); // 6
    4f3a:	fe 01       	movw	r30, r28
    4f3c:	e3 57       	subi	r30, 0x73	; 115
    4f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4f40:	80 81       	ld	r24, Z
    4f42:	61 e0       	ldi	r22, 0x01	; 1
    4f44:	40 e0       	ldi	r20, 0x00	; 0
    4f46:	21 e0       	ldi	r18, 0x01	; 1
    4f48:	01 e0       	ldi	r16, 0x01	; 1
    4f4a:	ee 24       	eor	r14, r14
    4f4c:	e3 94       	inc	r14
    4f4e:	cc 24       	eor	r12, r12
    4f50:	c3 94       	inc	r12
    4f52:	aa 24       	eor	r10, r10
    4f54:	a3 94       	inc	r10
    4f56:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    4f5a:	80 e0       	ldi	r24, 0x00	; 0
    4f5c:	90 e0       	ldi	r25, 0x00	; 0
    4f5e:	a8 e4       	ldi	r26, 0x48	; 72
    4f60:	b2 e4       	ldi	r27, 0x42	; 66
    4f62:	8d ab       	std	Y+53, r24	; 0x35
    4f64:	9e ab       	std	Y+54, r25	; 0x36
    4f66:	af ab       	std	Y+55, r26	; 0x37
    4f68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f6a:	6d a9       	ldd	r22, Y+53	; 0x35
    4f6c:	7e a9       	ldd	r23, Y+54	; 0x36
    4f6e:	8f a9       	ldd	r24, Y+55	; 0x37
    4f70:	98 ad       	ldd	r25, Y+56	; 0x38
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	4a e7       	ldi	r20, 0x7A	; 122
    4f78:	55 e4       	ldi	r21, 0x45	; 69
    4f7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f7e:	dc 01       	movw	r26, r24
    4f80:	cb 01       	movw	r24, r22
    4f82:	89 ab       	std	Y+49, r24	; 0x31
    4f84:	9a ab       	std	Y+50, r25	; 0x32
    4f86:	ab ab       	std	Y+51, r26	; 0x33
    4f88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4f8a:	69 a9       	ldd	r22, Y+49	; 0x31
    4f8c:	7a a9       	ldd	r23, Y+50	; 0x32
    4f8e:	8b a9       	ldd	r24, Y+51	; 0x33
    4f90:	9c a9       	ldd	r25, Y+52	; 0x34
    4f92:	20 e0       	ldi	r18, 0x00	; 0
    4f94:	30 e0       	ldi	r19, 0x00	; 0
    4f96:	40 e8       	ldi	r20, 0x80	; 128
    4f98:	5f e3       	ldi	r21, 0x3F	; 63
    4f9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f9e:	88 23       	and	r24, r24
    4fa0:	2c f4       	brge	.+10     	; 0x4fac <SevenSegment_From0To9+0x950>
		__ticks = 1;
    4fa2:	81 e0       	ldi	r24, 0x01	; 1
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	98 ab       	std	Y+48, r25	; 0x30
    4fa8:	8f a7       	std	Y+47, r24	; 0x2f
    4faa:	3f c0       	rjmp	.+126    	; 0x502a <SevenSegment_From0To9+0x9ce>
	else if (__tmp > 65535)
    4fac:	69 a9       	ldd	r22, Y+49	; 0x31
    4fae:	7a a9       	ldd	r23, Y+50	; 0x32
    4fb0:	8b a9       	ldd	r24, Y+51	; 0x33
    4fb2:	9c a9       	ldd	r25, Y+52	; 0x34
    4fb4:	20 e0       	ldi	r18, 0x00	; 0
    4fb6:	3f ef       	ldi	r19, 0xFF	; 255
    4fb8:	4f e7       	ldi	r20, 0x7F	; 127
    4fba:	57 e4       	ldi	r21, 0x47	; 71
    4fbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4fc0:	18 16       	cp	r1, r24
    4fc2:	4c f5       	brge	.+82     	; 0x5016 <SevenSegment_From0To9+0x9ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4fc4:	6d a9       	ldd	r22, Y+53	; 0x35
    4fc6:	7e a9       	ldd	r23, Y+54	; 0x36
    4fc8:	8f a9       	ldd	r24, Y+55	; 0x37
    4fca:	98 ad       	ldd	r25, Y+56	; 0x38
    4fcc:	20 e0       	ldi	r18, 0x00	; 0
    4fce:	30 e0       	ldi	r19, 0x00	; 0
    4fd0:	40 e2       	ldi	r20, 0x20	; 32
    4fd2:	51 e4       	ldi	r21, 0x41	; 65
    4fd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fd8:	dc 01       	movw	r26, r24
    4fda:	cb 01       	movw	r24, r22
    4fdc:	bc 01       	movw	r22, r24
    4fde:	cd 01       	movw	r24, r26
    4fe0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fe4:	dc 01       	movw	r26, r24
    4fe6:	cb 01       	movw	r24, r22
    4fe8:	98 ab       	std	Y+48, r25	; 0x30
    4fea:	8f a7       	std	Y+47, r24	; 0x2f
    4fec:	0f c0       	rjmp	.+30     	; 0x500c <SevenSegment_From0To9+0x9b0>
    4fee:	80 e9       	ldi	r24, 0x90	; 144
    4ff0:	91 e0       	ldi	r25, 0x01	; 1
    4ff2:	9e a7       	std	Y+46, r25	; 0x2e
    4ff4:	8d a7       	std	Y+45, r24	; 0x2d
    4ff6:	8d a5       	ldd	r24, Y+45	; 0x2d
    4ff8:	9e a5       	ldd	r25, Y+46	; 0x2e
    4ffa:	01 97       	sbiw	r24, 0x01	; 1
    4ffc:	f1 f7       	brne	.-4      	; 0x4ffa <SevenSegment_From0To9+0x99e>
    4ffe:	9e a7       	std	Y+46, r25	; 0x2e
    5000:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5002:	8f a5       	ldd	r24, Y+47	; 0x2f
    5004:	98 a9       	ldd	r25, Y+48	; 0x30
    5006:	01 97       	sbiw	r24, 0x01	; 1
    5008:	98 ab       	std	Y+48, r25	; 0x30
    500a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    500c:	8f a5       	ldd	r24, Y+47	; 0x2f
    500e:	98 a9       	ldd	r25, Y+48	; 0x30
    5010:	00 97       	sbiw	r24, 0x00	; 0
    5012:	69 f7       	brne	.-38     	; 0x4fee <SevenSegment_From0To9+0x992>
    5014:	14 c0       	rjmp	.+40     	; 0x503e <SevenSegment_From0To9+0x9e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5016:	69 a9       	ldd	r22, Y+49	; 0x31
    5018:	7a a9       	ldd	r23, Y+50	; 0x32
    501a:	8b a9       	ldd	r24, Y+51	; 0x33
    501c:	9c a9       	ldd	r25, Y+52	; 0x34
    501e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5022:	dc 01       	movw	r26, r24
    5024:	cb 01       	movw	r24, r22
    5026:	98 ab       	std	Y+48, r25	; 0x30
    5028:	8f a7       	std	Y+47, r24	; 0x2f
    502a:	8f a5       	ldd	r24, Y+47	; 0x2f
    502c:	98 a9       	ldd	r25, Y+48	; 0x30
    502e:	9c a7       	std	Y+44, r25	; 0x2c
    5030:	8b a7       	std	Y+43, r24	; 0x2b
    5032:	8b a5       	ldd	r24, Y+43	; 0x2b
    5034:	9c a5       	ldd	r25, Y+44	; 0x2c
    5036:	01 97       	sbiw	r24, 0x01	; 1
    5038:	f1 f7       	brne	.-4      	; 0x5036 <SevenSegment_From0To9+0x9da>
    503a:	9c a7       	std	Y+44, r25	; 0x2c
    503c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 0, 0, 0); // 7
    503e:	fe 01       	movw	r30, r28
    5040:	e3 57       	subi	r30, 0x73	; 115
    5042:	ff 4f       	sbci	r31, 0xFF	; 255
    5044:	80 81       	ld	r24, Z
    5046:	61 e0       	ldi	r22, 0x01	; 1
    5048:	41 e0       	ldi	r20, 0x01	; 1
    504a:	21 e0       	ldi	r18, 0x01	; 1
    504c:	00 e0       	ldi	r16, 0x00	; 0
    504e:	ee 24       	eor	r14, r14
    5050:	cc 24       	eor	r12, r12
    5052:	aa 24       	eor	r10, r10
    5054:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    5058:	80 e0       	ldi	r24, 0x00	; 0
    505a:	90 e0       	ldi	r25, 0x00	; 0
    505c:	a8 e4       	ldi	r26, 0x48	; 72
    505e:	b2 e4       	ldi	r27, 0x42	; 66
    5060:	8f a3       	std	Y+39, r24	; 0x27
    5062:	98 a7       	std	Y+40, r25	; 0x28
    5064:	a9 a7       	std	Y+41, r26	; 0x29
    5066:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5068:	6f a1       	ldd	r22, Y+39	; 0x27
    506a:	78 a5       	ldd	r23, Y+40	; 0x28
    506c:	89 a5       	ldd	r24, Y+41	; 0x29
    506e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5070:	20 e0       	ldi	r18, 0x00	; 0
    5072:	30 e0       	ldi	r19, 0x00	; 0
    5074:	4a e7       	ldi	r20, 0x7A	; 122
    5076:	55 e4       	ldi	r21, 0x45	; 69
    5078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    507c:	dc 01       	movw	r26, r24
    507e:	cb 01       	movw	r24, r22
    5080:	8b a3       	std	Y+35, r24	; 0x23
    5082:	9c a3       	std	Y+36, r25	; 0x24
    5084:	ad a3       	std	Y+37, r26	; 0x25
    5086:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5088:	6b a1       	ldd	r22, Y+35	; 0x23
    508a:	7c a1       	ldd	r23, Y+36	; 0x24
    508c:	8d a1       	ldd	r24, Y+37	; 0x25
    508e:	9e a1       	ldd	r25, Y+38	; 0x26
    5090:	20 e0       	ldi	r18, 0x00	; 0
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	40 e8       	ldi	r20, 0x80	; 128
    5096:	5f e3       	ldi	r21, 0x3F	; 63
    5098:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    509c:	88 23       	and	r24, r24
    509e:	2c f4       	brge	.+10     	; 0x50aa <SevenSegment_From0To9+0xa4e>
		__ticks = 1;
    50a0:	81 e0       	ldi	r24, 0x01	; 1
    50a2:	90 e0       	ldi	r25, 0x00	; 0
    50a4:	9a a3       	std	Y+34, r25	; 0x22
    50a6:	89 a3       	std	Y+33, r24	; 0x21
    50a8:	3f c0       	rjmp	.+126    	; 0x5128 <SevenSegment_From0To9+0xacc>
	else if (__tmp > 65535)
    50aa:	6b a1       	ldd	r22, Y+35	; 0x23
    50ac:	7c a1       	ldd	r23, Y+36	; 0x24
    50ae:	8d a1       	ldd	r24, Y+37	; 0x25
    50b0:	9e a1       	ldd	r25, Y+38	; 0x26
    50b2:	20 e0       	ldi	r18, 0x00	; 0
    50b4:	3f ef       	ldi	r19, 0xFF	; 255
    50b6:	4f e7       	ldi	r20, 0x7F	; 127
    50b8:	57 e4       	ldi	r21, 0x47	; 71
    50ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    50be:	18 16       	cp	r1, r24
    50c0:	4c f5       	brge	.+82     	; 0x5114 <SevenSegment_From0To9+0xab8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50c2:	6f a1       	ldd	r22, Y+39	; 0x27
    50c4:	78 a5       	ldd	r23, Y+40	; 0x28
    50c6:	89 a5       	ldd	r24, Y+41	; 0x29
    50c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    50ca:	20 e0       	ldi	r18, 0x00	; 0
    50cc:	30 e0       	ldi	r19, 0x00	; 0
    50ce:	40 e2       	ldi	r20, 0x20	; 32
    50d0:	51 e4       	ldi	r21, 0x41	; 65
    50d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50d6:	dc 01       	movw	r26, r24
    50d8:	cb 01       	movw	r24, r22
    50da:	bc 01       	movw	r22, r24
    50dc:	cd 01       	movw	r24, r26
    50de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50e2:	dc 01       	movw	r26, r24
    50e4:	cb 01       	movw	r24, r22
    50e6:	9a a3       	std	Y+34, r25	; 0x22
    50e8:	89 a3       	std	Y+33, r24	; 0x21
    50ea:	0f c0       	rjmp	.+30     	; 0x510a <SevenSegment_From0To9+0xaae>
    50ec:	80 e9       	ldi	r24, 0x90	; 144
    50ee:	91 e0       	ldi	r25, 0x01	; 1
    50f0:	98 a3       	std	Y+32, r25	; 0x20
    50f2:	8f 8f       	std	Y+31, r24	; 0x1f
    50f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    50f6:	98 a1       	ldd	r25, Y+32	; 0x20
    50f8:	01 97       	sbiw	r24, 0x01	; 1
    50fa:	f1 f7       	brne	.-4      	; 0x50f8 <SevenSegment_From0To9+0xa9c>
    50fc:	98 a3       	std	Y+32, r25	; 0x20
    50fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5100:	89 a1       	ldd	r24, Y+33	; 0x21
    5102:	9a a1       	ldd	r25, Y+34	; 0x22
    5104:	01 97       	sbiw	r24, 0x01	; 1
    5106:	9a a3       	std	Y+34, r25	; 0x22
    5108:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    510a:	89 a1       	ldd	r24, Y+33	; 0x21
    510c:	9a a1       	ldd	r25, Y+34	; 0x22
    510e:	00 97       	sbiw	r24, 0x00	; 0
    5110:	69 f7       	brne	.-38     	; 0x50ec <SevenSegment_From0To9+0xa90>
    5112:	14 c0       	rjmp	.+40     	; 0x513c <SevenSegment_From0To9+0xae0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5114:	6b a1       	ldd	r22, Y+35	; 0x23
    5116:	7c a1       	ldd	r23, Y+36	; 0x24
    5118:	8d a1       	ldd	r24, Y+37	; 0x25
    511a:	9e a1       	ldd	r25, Y+38	; 0x26
    511c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5120:	dc 01       	movw	r26, r24
    5122:	cb 01       	movw	r24, r22
    5124:	9a a3       	std	Y+34, r25	; 0x22
    5126:	89 a3       	std	Y+33, r24	; 0x21
    5128:	89 a1       	ldd	r24, Y+33	; 0x21
    512a:	9a a1       	ldd	r25, Y+34	; 0x22
    512c:	9e 8f       	std	Y+30, r25	; 0x1e
    512e:	8d 8f       	std	Y+29, r24	; 0x1d
    5130:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5132:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5134:	01 97       	sbiw	r24, 0x01	; 1
    5136:	f1 f7       	brne	.-4      	; 0x5134 <SevenSegment_From0To9+0xad8>
    5138:	9e 8f       	std	Y+30, r25	; 0x1e
    513a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 1, 1, 1); // 8
    513c:	fe 01       	movw	r30, r28
    513e:	e3 57       	subi	r30, 0x73	; 115
    5140:	ff 4f       	sbci	r31, 0xFF	; 255
    5142:	80 81       	ld	r24, Z
    5144:	61 e0       	ldi	r22, 0x01	; 1
    5146:	41 e0       	ldi	r20, 0x01	; 1
    5148:	21 e0       	ldi	r18, 0x01	; 1
    514a:	01 e0       	ldi	r16, 0x01	; 1
    514c:	ee 24       	eor	r14, r14
    514e:	e3 94       	inc	r14
    5150:	cc 24       	eor	r12, r12
    5152:	c3 94       	inc	r12
    5154:	aa 24       	eor	r10, r10
    5156:	a3 94       	inc	r10
    5158:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    515c:	80 e0       	ldi	r24, 0x00	; 0
    515e:	90 e0       	ldi	r25, 0x00	; 0
    5160:	a8 e4       	ldi	r26, 0x48	; 72
    5162:	b2 e4       	ldi	r27, 0x42	; 66
    5164:	89 8f       	std	Y+25, r24	; 0x19
    5166:	9a 8f       	std	Y+26, r25	; 0x1a
    5168:	ab 8f       	std	Y+27, r26	; 0x1b
    516a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    516c:	69 8d       	ldd	r22, Y+25	; 0x19
    516e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5170:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5172:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	4a e7       	ldi	r20, 0x7A	; 122
    517a:	55 e4       	ldi	r21, 0x45	; 69
    517c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5180:	dc 01       	movw	r26, r24
    5182:	cb 01       	movw	r24, r22
    5184:	8d 8b       	std	Y+21, r24	; 0x15
    5186:	9e 8b       	std	Y+22, r25	; 0x16
    5188:	af 8b       	std	Y+23, r26	; 0x17
    518a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    518c:	6d 89       	ldd	r22, Y+21	; 0x15
    518e:	7e 89       	ldd	r23, Y+22	; 0x16
    5190:	8f 89       	ldd	r24, Y+23	; 0x17
    5192:	98 8d       	ldd	r25, Y+24	; 0x18
    5194:	20 e0       	ldi	r18, 0x00	; 0
    5196:	30 e0       	ldi	r19, 0x00	; 0
    5198:	40 e8       	ldi	r20, 0x80	; 128
    519a:	5f e3       	ldi	r21, 0x3F	; 63
    519c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    51a0:	88 23       	and	r24, r24
    51a2:	2c f4       	brge	.+10     	; 0x51ae <SevenSegment_From0To9+0xb52>
		__ticks = 1;
    51a4:	81 e0       	ldi	r24, 0x01	; 1
    51a6:	90 e0       	ldi	r25, 0x00	; 0
    51a8:	9c 8b       	std	Y+20, r25	; 0x14
    51aa:	8b 8b       	std	Y+19, r24	; 0x13
    51ac:	3f c0       	rjmp	.+126    	; 0x522c <SevenSegment_From0To9+0xbd0>
	else if (__tmp > 65535)
    51ae:	6d 89       	ldd	r22, Y+21	; 0x15
    51b0:	7e 89       	ldd	r23, Y+22	; 0x16
    51b2:	8f 89       	ldd	r24, Y+23	; 0x17
    51b4:	98 8d       	ldd	r25, Y+24	; 0x18
    51b6:	20 e0       	ldi	r18, 0x00	; 0
    51b8:	3f ef       	ldi	r19, 0xFF	; 255
    51ba:	4f e7       	ldi	r20, 0x7F	; 127
    51bc:	57 e4       	ldi	r21, 0x47	; 71
    51be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    51c2:	18 16       	cp	r1, r24
    51c4:	4c f5       	brge	.+82     	; 0x5218 <SevenSegment_From0To9+0xbbc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51c6:	69 8d       	ldd	r22, Y+25	; 0x19
    51c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    51ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    51cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    51ce:	20 e0       	ldi	r18, 0x00	; 0
    51d0:	30 e0       	ldi	r19, 0x00	; 0
    51d2:	40 e2       	ldi	r20, 0x20	; 32
    51d4:	51 e4       	ldi	r21, 0x41	; 65
    51d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51da:	dc 01       	movw	r26, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	bc 01       	movw	r22, r24
    51e0:	cd 01       	movw	r24, r26
    51e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51e6:	dc 01       	movw	r26, r24
    51e8:	cb 01       	movw	r24, r22
    51ea:	9c 8b       	std	Y+20, r25	; 0x14
    51ec:	8b 8b       	std	Y+19, r24	; 0x13
    51ee:	0f c0       	rjmp	.+30     	; 0x520e <SevenSegment_From0To9+0xbb2>
    51f0:	80 e9       	ldi	r24, 0x90	; 144
    51f2:	91 e0       	ldi	r25, 0x01	; 1
    51f4:	9a 8b       	std	Y+18, r25	; 0x12
    51f6:	89 8b       	std	Y+17, r24	; 0x11
    51f8:	89 89       	ldd	r24, Y+17	; 0x11
    51fa:	9a 89       	ldd	r25, Y+18	; 0x12
    51fc:	01 97       	sbiw	r24, 0x01	; 1
    51fe:	f1 f7       	brne	.-4      	; 0x51fc <SevenSegment_From0To9+0xba0>
    5200:	9a 8b       	std	Y+18, r25	; 0x12
    5202:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5204:	8b 89       	ldd	r24, Y+19	; 0x13
    5206:	9c 89       	ldd	r25, Y+20	; 0x14
    5208:	01 97       	sbiw	r24, 0x01	; 1
    520a:	9c 8b       	std	Y+20, r25	; 0x14
    520c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    520e:	8b 89       	ldd	r24, Y+19	; 0x13
    5210:	9c 89       	ldd	r25, Y+20	; 0x14
    5212:	00 97       	sbiw	r24, 0x00	; 0
    5214:	69 f7       	brne	.-38     	; 0x51f0 <SevenSegment_From0To9+0xb94>
    5216:	14 c0       	rjmp	.+40     	; 0x5240 <SevenSegment_From0To9+0xbe4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5218:	6d 89       	ldd	r22, Y+21	; 0x15
    521a:	7e 89       	ldd	r23, Y+22	; 0x16
    521c:	8f 89       	ldd	r24, Y+23	; 0x17
    521e:	98 8d       	ldd	r25, Y+24	; 0x18
    5220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5224:	dc 01       	movw	r26, r24
    5226:	cb 01       	movw	r24, r22
    5228:	9c 8b       	std	Y+20, r25	; 0x14
    522a:	8b 8b       	std	Y+19, r24	; 0x13
    522c:	8b 89       	ldd	r24, Y+19	; 0x13
    522e:	9c 89       	ldd	r25, Y+20	; 0x14
    5230:	98 8b       	std	Y+16, r25	; 0x10
    5232:	8f 87       	std	Y+15, r24	; 0x0f
    5234:	8f 85       	ldd	r24, Y+15	; 0x0f
    5236:	98 89       	ldd	r25, Y+16	; 0x10
    5238:	01 97       	sbiw	r24, 0x01	; 1
    523a:	f1 f7       	brne	.-4      	; 0x5238 <SevenSegment_From0To9+0xbdc>
    523c:	98 8b       	std	Y+16, r25	; 0x10
    523e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 1, 0, 1, 1); // 9
    5240:	fe 01       	movw	r30, r28
    5242:	e3 57       	subi	r30, 0x73	; 115
    5244:	ff 4f       	sbci	r31, 0xFF	; 255
    5246:	80 81       	ld	r24, Z
    5248:	61 e0       	ldi	r22, 0x01	; 1
    524a:	41 e0       	ldi	r20, 0x01	; 1
    524c:	21 e0       	ldi	r18, 0x01	; 1
    524e:	01 e0       	ldi	r16, 0x01	; 1
    5250:	ee 24       	eor	r14, r14
    5252:	cc 24       	eor	r12, r12
    5254:	c3 94       	inc	r12
    5256:	aa 24       	eor	r10, r10
    5258:	a3 94       	inc	r10
    525a:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    525e:	80 e0       	ldi	r24, 0x00	; 0
    5260:	90 e0       	ldi	r25, 0x00	; 0
    5262:	a8 e4       	ldi	r26, 0x48	; 72
    5264:	b2 e4       	ldi	r27, 0x42	; 66
    5266:	8b 87       	std	Y+11, r24	; 0x0b
    5268:	9c 87       	std	Y+12, r25	; 0x0c
    526a:	ad 87       	std	Y+13, r26	; 0x0d
    526c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    526e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5270:	7c 85       	ldd	r23, Y+12	; 0x0c
    5272:	8d 85       	ldd	r24, Y+13	; 0x0d
    5274:	9e 85       	ldd	r25, Y+14	; 0x0e
    5276:	20 e0       	ldi	r18, 0x00	; 0
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	4a e7       	ldi	r20, 0x7A	; 122
    527c:	55 e4       	ldi	r21, 0x45	; 69
    527e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5282:	dc 01       	movw	r26, r24
    5284:	cb 01       	movw	r24, r22
    5286:	8f 83       	std	Y+7, r24	; 0x07
    5288:	98 87       	std	Y+8, r25	; 0x08
    528a:	a9 87       	std	Y+9, r26	; 0x09
    528c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    528e:	6f 81       	ldd	r22, Y+7	; 0x07
    5290:	78 85       	ldd	r23, Y+8	; 0x08
    5292:	89 85       	ldd	r24, Y+9	; 0x09
    5294:	9a 85       	ldd	r25, Y+10	; 0x0a
    5296:	20 e0       	ldi	r18, 0x00	; 0
    5298:	30 e0       	ldi	r19, 0x00	; 0
    529a:	40 e8       	ldi	r20, 0x80	; 128
    529c:	5f e3       	ldi	r21, 0x3F	; 63
    529e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    52a2:	88 23       	and	r24, r24
    52a4:	2c f4       	brge	.+10     	; 0x52b0 <SevenSegment_From0To9+0xc54>
		__ticks = 1;
    52a6:	81 e0       	ldi	r24, 0x01	; 1
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	9e 83       	std	Y+6, r25	; 0x06
    52ac:	8d 83       	std	Y+5, r24	; 0x05
    52ae:	3f c0       	rjmp	.+126    	; 0x532e <SevenSegment_From0To9+0xcd2>
	else if (__tmp > 65535)
    52b0:	6f 81       	ldd	r22, Y+7	; 0x07
    52b2:	78 85       	ldd	r23, Y+8	; 0x08
    52b4:	89 85       	ldd	r24, Y+9	; 0x09
    52b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    52b8:	20 e0       	ldi	r18, 0x00	; 0
    52ba:	3f ef       	ldi	r19, 0xFF	; 255
    52bc:	4f e7       	ldi	r20, 0x7F	; 127
    52be:	57 e4       	ldi	r21, 0x47	; 71
    52c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52c4:	18 16       	cp	r1, r24
    52c6:	4c f5       	brge	.+82     	; 0x531a <SevenSegment_From0To9+0xcbe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    52ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    52cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    52ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    52d0:	20 e0       	ldi	r18, 0x00	; 0
    52d2:	30 e0       	ldi	r19, 0x00	; 0
    52d4:	40 e2       	ldi	r20, 0x20	; 32
    52d6:	51 e4       	ldi	r21, 0x41	; 65
    52d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52dc:	dc 01       	movw	r26, r24
    52de:	cb 01       	movw	r24, r22
    52e0:	bc 01       	movw	r22, r24
    52e2:	cd 01       	movw	r24, r26
    52e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e8:	dc 01       	movw	r26, r24
    52ea:	cb 01       	movw	r24, r22
    52ec:	9e 83       	std	Y+6, r25	; 0x06
    52ee:	8d 83       	std	Y+5, r24	; 0x05
    52f0:	0f c0       	rjmp	.+30     	; 0x5310 <SevenSegment_From0To9+0xcb4>
    52f2:	80 e9       	ldi	r24, 0x90	; 144
    52f4:	91 e0       	ldi	r25, 0x01	; 1
    52f6:	9c 83       	std	Y+4, r25	; 0x04
    52f8:	8b 83       	std	Y+3, r24	; 0x03
    52fa:	8b 81       	ldd	r24, Y+3	; 0x03
    52fc:	9c 81       	ldd	r25, Y+4	; 0x04
    52fe:	01 97       	sbiw	r24, 0x01	; 1
    5300:	f1 f7       	brne	.-4      	; 0x52fe <SevenSegment_From0To9+0xca2>
    5302:	9c 83       	std	Y+4, r25	; 0x04
    5304:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5306:	8d 81       	ldd	r24, Y+5	; 0x05
    5308:	9e 81       	ldd	r25, Y+6	; 0x06
    530a:	01 97       	sbiw	r24, 0x01	; 1
    530c:	9e 83       	std	Y+6, r25	; 0x06
    530e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5310:	8d 81       	ldd	r24, Y+5	; 0x05
    5312:	9e 81       	ldd	r25, Y+6	; 0x06
    5314:	00 97       	sbiw	r24, 0x00	; 0
    5316:	69 f7       	brne	.-38     	; 0x52f2 <SevenSegment_From0To9+0xc96>
    5318:	b5 c9       	rjmp	.-3222   	; 0x4684 <SevenSegment_From0To9+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    531a:	6f 81       	ldd	r22, Y+7	; 0x07
    531c:	78 85       	ldd	r23, Y+8	; 0x08
    531e:	89 85       	ldd	r24, Y+9	; 0x09
    5320:	9a 85       	ldd	r25, Y+10	; 0x0a
    5322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5326:	dc 01       	movw	r26, r24
    5328:	cb 01       	movw	r24, r22
    532a:	9e 83       	std	Y+6, r25	; 0x06
    532c:	8d 83       	std	Y+5, r24	; 0x05
    532e:	8d 81       	ldd	r24, Y+5	; 0x05
    5330:	9e 81       	ldd	r25, Y+6	; 0x06
    5332:	9a 83       	std	Y+2, r25	; 0x02
    5334:	89 83       	std	Y+1, r24	; 0x01
    5336:	89 81       	ldd	r24, Y+1	; 0x01
    5338:	9a 81       	ldd	r25, Y+2	; 0x02
    533a:	01 97       	sbiw	r24, 0x01	; 1
    533c:	f1 f7       	brne	.-4      	; 0x533a <SevenSegment_From0To9+0xcde>
    533e:	9a 83       	std	Y+2, r25	; 0x02
    5340:	89 83       	std	Y+1, r24	; 0x01
    5342:	a0 c9       	rjmp	.-3264   	; 0x4684 <SevenSegment_From0To9+0x28>

00005344 <SevenSegment_FromAToH>:
		_delay_ms(50);
	}
}

void SevenSegment_FromAToH(u8 Copy_u8PortId){
    5344:	af 92       	push	r10
    5346:	cf 92       	push	r12
    5348:	ef 92       	push	r14
    534a:	0f 93       	push	r16
    534c:	1f 93       	push	r17
    534e:	df 93       	push	r29
    5350:	cf 93       	push	r28
    5352:	cd b7       	in	r28, 0x3d	; 61
    5354:	de b7       	in	r29, 0x3e	; 62
    5356:	c1 57       	subi	r28, 0x71	; 113
    5358:	d0 40       	sbci	r29, 0x00	; 0
    535a:	0f b6       	in	r0, 0x3f	; 63
    535c:	f8 94       	cli
    535e:	de bf       	out	0x3e, r29	; 62
    5360:	0f be       	out	0x3f, r0	; 63
    5362:	cd bf       	out	0x3d, r28	; 61
    5364:	fe 01       	movw	r30, r28
    5366:	ef 58       	subi	r30, 0x8F	; 143
    5368:	ff 4f       	sbci	r31, 0xFF	; 255
    536a:	80 83       	st	Z, r24
	while(1){
		SevenSegment_Display(Copy_u8PortId, 1, 1, 1, 0, 1, 1, 1); // A
    536c:	fe 01       	movw	r30, r28
    536e:	ef 58       	subi	r30, 0x8F	; 143
    5370:	ff 4f       	sbci	r31, 0xFF	; 255
    5372:	80 81       	ld	r24, Z
    5374:	61 e0       	ldi	r22, 0x01	; 1
    5376:	41 e0       	ldi	r20, 0x01	; 1
    5378:	21 e0       	ldi	r18, 0x01	; 1
    537a:	00 e0       	ldi	r16, 0x00	; 0
    537c:	ee 24       	eor	r14, r14
    537e:	e3 94       	inc	r14
    5380:	cc 24       	eor	r12, r12
    5382:	c3 94       	inc	r12
    5384:	aa 24       	eor	r10, r10
    5386:	a3 94       	inc	r10
    5388:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    538c:	fe 01       	movw	r30, r28
    538e:	e3 59       	subi	r30, 0x93	; 147
    5390:	ff 4f       	sbci	r31, 0xFF	; 255
    5392:	80 e0       	ldi	r24, 0x00	; 0
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	a8 e4       	ldi	r26, 0x48	; 72
    5398:	b2 e4       	ldi	r27, 0x42	; 66
    539a:	80 83       	st	Z, r24
    539c:	91 83       	std	Z+1, r25	; 0x01
    539e:	a2 83       	std	Z+2, r26	; 0x02
    53a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53a2:	8e 01       	movw	r16, r28
    53a4:	07 59       	subi	r16, 0x97	; 151
    53a6:	1f 4f       	sbci	r17, 0xFF	; 255
    53a8:	fe 01       	movw	r30, r28
    53aa:	e3 59       	subi	r30, 0x93	; 147
    53ac:	ff 4f       	sbci	r31, 0xFF	; 255
    53ae:	60 81       	ld	r22, Z
    53b0:	71 81       	ldd	r23, Z+1	; 0x01
    53b2:	82 81       	ldd	r24, Z+2	; 0x02
    53b4:	93 81       	ldd	r25, Z+3	; 0x03
    53b6:	20 e0       	ldi	r18, 0x00	; 0
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	4a e7       	ldi	r20, 0x7A	; 122
    53bc:	55 e4       	ldi	r21, 0x45	; 69
    53be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53c2:	dc 01       	movw	r26, r24
    53c4:	cb 01       	movw	r24, r22
    53c6:	f8 01       	movw	r30, r16
    53c8:	80 83       	st	Z, r24
    53ca:	91 83       	std	Z+1, r25	; 0x01
    53cc:	a2 83       	std	Z+2, r26	; 0x02
    53ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53d0:	fe 01       	movw	r30, r28
    53d2:	e7 59       	subi	r30, 0x97	; 151
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	60 81       	ld	r22, Z
    53d8:	71 81       	ldd	r23, Z+1	; 0x01
    53da:	82 81       	ldd	r24, Z+2	; 0x02
    53dc:	93 81       	ldd	r25, Z+3	; 0x03
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	40 e8       	ldi	r20, 0x80	; 128
    53e4:	5f e3       	ldi	r21, 0x3F	; 63
    53e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    53ea:	88 23       	and	r24, r24
    53ec:	44 f4       	brge	.+16     	; 0x53fe <SevenSegment_FromAToH+0xba>
		__ticks = 1;
    53ee:	fe 01       	movw	r30, r28
    53f0:	e9 59       	subi	r30, 0x99	; 153
    53f2:	ff 4f       	sbci	r31, 0xFF	; 255
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	91 83       	std	Z+1, r25	; 0x01
    53fa:	80 83       	st	Z, r24
    53fc:	64 c0       	rjmp	.+200    	; 0x54c6 <SevenSegment_FromAToH+0x182>
	else if (__tmp > 65535)
    53fe:	fe 01       	movw	r30, r28
    5400:	e7 59       	subi	r30, 0x97	; 151
    5402:	ff 4f       	sbci	r31, 0xFF	; 255
    5404:	60 81       	ld	r22, Z
    5406:	71 81       	ldd	r23, Z+1	; 0x01
    5408:	82 81       	ldd	r24, Z+2	; 0x02
    540a:	93 81       	ldd	r25, Z+3	; 0x03
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	3f ef       	ldi	r19, 0xFF	; 255
    5410:	4f e7       	ldi	r20, 0x7F	; 127
    5412:	57 e4       	ldi	r21, 0x47	; 71
    5414:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5418:	18 16       	cp	r1, r24
    541a:	0c f0       	brlt	.+2      	; 0x541e <SevenSegment_FromAToH+0xda>
    541c:	43 c0       	rjmp	.+134    	; 0x54a4 <SevenSegment_FromAToH+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    541e:	fe 01       	movw	r30, r28
    5420:	e3 59       	subi	r30, 0x93	; 147
    5422:	ff 4f       	sbci	r31, 0xFF	; 255
    5424:	60 81       	ld	r22, Z
    5426:	71 81       	ldd	r23, Z+1	; 0x01
    5428:	82 81       	ldd	r24, Z+2	; 0x02
    542a:	93 81       	ldd	r25, Z+3	; 0x03
    542c:	20 e0       	ldi	r18, 0x00	; 0
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	40 e2       	ldi	r20, 0x20	; 32
    5432:	51 e4       	ldi	r21, 0x41	; 65
    5434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5438:	dc 01       	movw	r26, r24
    543a:	cb 01       	movw	r24, r22
    543c:	8e 01       	movw	r16, r28
    543e:	09 59       	subi	r16, 0x99	; 153
    5440:	1f 4f       	sbci	r17, 0xFF	; 255
    5442:	bc 01       	movw	r22, r24
    5444:	cd 01       	movw	r24, r26
    5446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22
    544e:	f8 01       	movw	r30, r16
    5450:	91 83       	std	Z+1, r25	; 0x01
    5452:	80 83       	st	Z, r24
    5454:	1f c0       	rjmp	.+62     	; 0x5494 <SevenSegment_FromAToH+0x150>
    5456:	fe 01       	movw	r30, r28
    5458:	eb 59       	subi	r30, 0x9B	; 155
    545a:	ff 4f       	sbci	r31, 0xFF	; 255
    545c:	80 e9       	ldi	r24, 0x90	; 144
    545e:	91 e0       	ldi	r25, 0x01	; 1
    5460:	91 83       	std	Z+1, r25	; 0x01
    5462:	80 83       	st	Z, r24
    5464:	fe 01       	movw	r30, r28
    5466:	eb 59       	subi	r30, 0x9B	; 155
    5468:	ff 4f       	sbci	r31, 0xFF	; 255
    546a:	80 81       	ld	r24, Z
    546c:	91 81       	ldd	r25, Z+1	; 0x01
    546e:	01 97       	sbiw	r24, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <SevenSegment_FromAToH+0x12a>
    5472:	fe 01       	movw	r30, r28
    5474:	eb 59       	subi	r30, 0x9B	; 155
    5476:	ff 4f       	sbci	r31, 0xFF	; 255
    5478:	91 83       	std	Z+1, r25	; 0x01
    547a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    547c:	de 01       	movw	r26, r28
    547e:	a9 59       	subi	r26, 0x99	; 153
    5480:	bf 4f       	sbci	r27, 0xFF	; 255
    5482:	fe 01       	movw	r30, r28
    5484:	e9 59       	subi	r30, 0x99	; 153
    5486:	ff 4f       	sbci	r31, 0xFF	; 255
    5488:	80 81       	ld	r24, Z
    548a:	91 81       	ldd	r25, Z+1	; 0x01
    548c:	01 97       	sbiw	r24, 0x01	; 1
    548e:	11 96       	adiw	r26, 0x01	; 1
    5490:	9c 93       	st	X, r25
    5492:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5494:	fe 01       	movw	r30, r28
    5496:	e9 59       	subi	r30, 0x99	; 153
    5498:	ff 4f       	sbci	r31, 0xFF	; 255
    549a:	80 81       	ld	r24, Z
    549c:	91 81       	ldd	r25, Z+1	; 0x01
    549e:	00 97       	sbiw	r24, 0x00	; 0
    54a0:	d1 f6       	brne	.-76     	; 0x5456 <SevenSegment_FromAToH+0x112>
    54a2:	27 c0       	rjmp	.+78     	; 0x54f2 <SevenSegment_FromAToH+0x1ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a4:	8e 01       	movw	r16, r28
    54a6:	09 59       	subi	r16, 0x99	; 153
    54a8:	1f 4f       	sbci	r17, 0xFF	; 255
    54aa:	fe 01       	movw	r30, r28
    54ac:	e7 59       	subi	r30, 0x97	; 151
    54ae:	ff 4f       	sbci	r31, 0xFF	; 255
    54b0:	60 81       	ld	r22, Z
    54b2:	71 81       	ldd	r23, Z+1	; 0x01
    54b4:	82 81       	ldd	r24, Z+2	; 0x02
    54b6:	93 81       	ldd	r25, Z+3	; 0x03
    54b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	f8 01       	movw	r30, r16
    54c2:	91 83       	std	Z+1, r25	; 0x01
    54c4:	80 83       	st	Z, r24
    54c6:	de 01       	movw	r26, r28
    54c8:	ad 59       	subi	r26, 0x9D	; 157
    54ca:	bf 4f       	sbci	r27, 0xFF	; 255
    54cc:	fe 01       	movw	r30, r28
    54ce:	e9 59       	subi	r30, 0x99	; 153
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	80 81       	ld	r24, Z
    54d4:	91 81       	ldd	r25, Z+1	; 0x01
    54d6:	8d 93       	st	X+, r24
    54d8:	9c 93       	st	X, r25
    54da:	fe 01       	movw	r30, r28
    54dc:	ed 59       	subi	r30, 0x9D	; 157
    54de:	ff 4f       	sbci	r31, 0xFF	; 255
    54e0:	80 81       	ld	r24, Z
    54e2:	91 81       	ldd	r25, Z+1	; 0x01
    54e4:	01 97       	sbiw	r24, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <SevenSegment_FromAToH+0x1a0>
    54e8:	fe 01       	movw	r30, r28
    54ea:	ed 59       	subi	r30, 0x9D	; 157
    54ec:	ff 4f       	sbci	r31, 0xFF	; 255
    54ee:	91 83       	std	Z+1, r25	; 0x01
    54f0:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 0, 1, 1, 1, 1, 1); // B
    54f2:	fe 01       	movw	r30, r28
    54f4:	ef 58       	subi	r30, 0x8F	; 143
    54f6:	ff 4f       	sbci	r31, 0xFF	; 255
    54f8:	80 81       	ld	r24, Z
    54fa:	60 e0       	ldi	r22, 0x00	; 0
    54fc:	40 e0       	ldi	r20, 0x00	; 0
    54fe:	21 e0       	ldi	r18, 0x01	; 1
    5500:	01 e0       	ldi	r16, 0x01	; 1
    5502:	ee 24       	eor	r14, r14
    5504:	e3 94       	inc	r14
    5506:	cc 24       	eor	r12, r12
    5508:	c3 94       	inc	r12
    550a:	aa 24       	eor	r10, r10
    550c:	a3 94       	inc	r10
    550e:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    5512:	fe 01       	movw	r30, r28
    5514:	e1 5a       	subi	r30, 0xA1	; 161
    5516:	ff 4f       	sbci	r31, 0xFF	; 255
    5518:	80 e0       	ldi	r24, 0x00	; 0
    551a:	90 e0       	ldi	r25, 0x00	; 0
    551c:	a8 e4       	ldi	r26, 0x48	; 72
    551e:	b2 e4       	ldi	r27, 0x42	; 66
    5520:	80 83       	st	Z, r24
    5522:	91 83       	std	Z+1, r25	; 0x01
    5524:	a2 83       	std	Z+2, r26	; 0x02
    5526:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5528:	8e 01       	movw	r16, r28
    552a:	05 5a       	subi	r16, 0xA5	; 165
    552c:	1f 4f       	sbci	r17, 0xFF	; 255
    552e:	fe 01       	movw	r30, r28
    5530:	e1 5a       	subi	r30, 0xA1	; 161
    5532:	ff 4f       	sbci	r31, 0xFF	; 255
    5534:	60 81       	ld	r22, Z
    5536:	71 81       	ldd	r23, Z+1	; 0x01
    5538:	82 81       	ldd	r24, Z+2	; 0x02
    553a:	93 81       	ldd	r25, Z+3	; 0x03
    553c:	20 e0       	ldi	r18, 0x00	; 0
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	4a e7       	ldi	r20, 0x7A	; 122
    5542:	55 e4       	ldi	r21, 0x45	; 69
    5544:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5548:	dc 01       	movw	r26, r24
    554a:	cb 01       	movw	r24, r22
    554c:	f8 01       	movw	r30, r16
    554e:	80 83       	st	Z, r24
    5550:	91 83       	std	Z+1, r25	; 0x01
    5552:	a2 83       	std	Z+2, r26	; 0x02
    5554:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5556:	fe 01       	movw	r30, r28
    5558:	e5 5a       	subi	r30, 0xA5	; 165
    555a:	ff 4f       	sbci	r31, 0xFF	; 255
    555c:	60 81       	ld	r22, Z
    555e:	71 81       	ldd	r23, Z+1	; 0x01
    5560:	82 81       	ldd	r24, Z+2	; 0x02
    5562:	93 81       	ldd	r25, Z+3	; 0x03
    5564:	20 e0       	ldi	r18, 0x00	; 0
    5566:	30 e0       	ldi	r19, 0x00	; 0
    5568:	40 e8       	ldi	r20, 0x80	; 128
    556a:	5f e3       	ldi	r21, 0x3F	; 63
    556c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5570:	88 23       	and	r24, r24
    5572:	44 f4       	brge	.+16     	; 0x5584 <SevenSegment_FromAToH+0x240>
		__ticks = 1;
    5574:	fe 01       	movw	r30, r28
    5576:	e7 5a       	subi	r30, 0xA7	; 167
    5578:	ff 4f       	sbci	r31, 0xFF	; 255
    557a:	81 e0       	ldi	r24, 0x01	; 1
    557c:	90 e0       	ldi	r25, 0x00	; 0
    557e:	91 83       	std	Z+1, r25	; 0x01
    5580:	80 83       	st	Z, r24
    5582:	64 c0       	rjmp	.+200    	; 0x564c <SevenSegment_FromAToH+0x308>
	else if (__tmp > 65535)
    5584:	fe 01       	movw	r30, r28
    5586:	e5 5a       	subi	r30, 0xA5	; 165
    5588:	ff 4f       	sbci	r31, 0xFF	; 255
    558a:	60 81       	ld	r22, Z
    558c:	71 81       	ldd	r23, Z+1	; 0x01
    558e:	82 81       	ldd	r24, Z+2	; 0x02
    5590:	93 81       	ldd	r25, Z+3	; 0x03
    5592:	20 e0       	ldi	r18, 0x00	; 0
    5594:	3f ef       	ldi	r19, 0xFF	; 255
    5596:	4f e7       	ldi	r20, 0x7F	; 127
    5598:	57 e4       	ldi	r21, 0x47	; 71
    559a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    559e:	18 16       	cp	r1, r24
    55a0:	0c f0       	brlt	.+2      	; 0x55a4 <SevenSegment_FromAToH+0x260>
    55a2:	43 c0       	rjmp	.+134    	; 0x562a <SevenSegment_FromAToH+0x2e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55a4:	fe 01       	movw	r30, r28
    55a6:	e1 5a       	subi	r30, 0xA1	; 161
    55a8:	ff 4f       	sbci	r31, 0xFF	; 255
    55aa:	60 81       	ld	r22, Z
    55ac:	71 81       	ldd	r23, Z+1	; 0x01
    55ae:	82 81       	ldd	r24, Z+2	; 0x02
    55b0:	93 81       	ldd	r25, Z+3	; 0x03
    55b2:	20 e0       	ldi	r18, 0x00	; 0
    55b4:	30 e0       	ldi	r19, 0x00	; 0
    55b6:	40 e2       	ldi	r20, 0x20	; 32
    55b8:	51 e4       	ldi	r21, 0x41	; 65
    55ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55be:	dc 01       	movw	r26, r24
    55c0:	cb 01       	movw	r24, r22
    55c2:	8e 01       	movw	r16, r28
    55c4:	07 5a       	subi	r16, 0xA7	; 167
    55c6:	1f 4f       	sbci	r17, 0xFF	; 255
    55c8:	bc 01       	movw	r22, r24
    55ca:	cd 01       	movw	r24, r26
    55cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d0:	dc 01       	movw	r26, r24
    55d2:	cb 01       	movw	r24, r22
    55d4:	f8 01       	movw	r30, r16
    55d6:	91 83       	std	Z+1, r25	; 0x01
    55d8:	80 83       	st	Z, r24
    55da:	1f c0       	rjmp	.+62     	; 0x561a <SevenSegment_FromAToH+0x2d6>
    55dc:	fe 01       	movw	r30, r28
    55de:	e9 5a       	subi	r30, 0xA9	; 169
    55e0:	ff 4f       	sbci	r31, 0xFF	; 255
    55e2:	80 e9       	ldi	r24, 0x90	; 144
    55e4:	91 e0       	ldi	r25, 0x01	; 1
    55e6:	91 83       	std	Z+1, r25	; 0x01
    55e8:	80 83       	st	Z, r24
    55ea:	fe 01       	movw	r30, r28
    55ec:	e9 5a       	subi	r30, 0xA9	; 169
    55ee:	ff 4f       	sbci	r31, 0xFF	; 255
    55f0:	80 81       	ld	r24, Z
    55f2:	91 81       	ldd	r25, Z+1	; 0x01
    55f4:	01 97       	sbiw	r24, 0x01	; 1
    55f6:	f1 f7       	brne	.-4      	; 0x55f4 <SevenSegment_FromAToH+0x2b0>
    55f8:	fe 01       	movw	r30, r28
    55fa:	e9 5a       	subi	r30, 0xA9	; 169
    55fc:	ff 4f       	sbci	r31, 0xFF	; 255
    55fe:	91 83       	std	Z+1, r25	; 0x01
    5600:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5602:	de 01       	movw	r26, r28
    5604:	a7 5a       	subi	r26, 0xA7	; 167
    5606:	bf 4f       	sbci	r27, 0xFF	; 255
    5608:	fe 01       	movw	r30, r28
    560a:	e7 5a       	subi	r30, 0xA7	; 167
    560c:	ff 4f       	sbci	r31, 0xFF	; 255
    560e:	80 81       	ld	r24, Z
    5610:	91 81       	ldd	r25, Z+1	; 0x01
    5612:	01 97       	sbiw	r24, 0x01	; 1
    5614:	11 96       	adiw	r26, 0x01	; 1
    5616:	9c 93       	st	X, r25
    5618:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    561a:	fe 01       	movw	r30, r28
    561c:	e7 5a       	subi	r30, 0xA7	; 167
    561e:	ff 4f       	sbci	r31, 0xFF	; 255
    5620:	80 81       	ld	r24, Z
    5622:	91 81       	ldd	r25, Z+1	; 0x01
    5624:	00 97       	sbiw	r24, 0x00	; 0
    5626:	d1 f6       	brne	.-76     	; 0x55dc <SevenSegment_FromAToH+0x298>
    5628:	27 c0       	rjmp	.+78     	; 0x5678 <SevenSegment_FromAToH+0x334>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    562a:	8e 01       	movw	r16, r28
    562c:	07 5a       	subi	r16, 0xA7	; 167
    562e:	1f 4f       	sbci	r17, 0xFF	; 255
    5630:	fe 01       	movw	r30, r28
    5632:	e5 5a       	subi	r30, 0xA5	; 165
    5634:	ff 4f       	sbci	r31, 0xFF	; 255
    5636:	60 81       	ld	r22, Z
    5638:	71 81       	ldd	r23, Z+1	; 0x01
    563a:	82 81       	ldd	r24, Z+2	; 0x02
    563c:	93 81       	ldd	r25, Z+3	; 0x03
    563e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5642:	dc 01       	movw	r26, r24
    5644:	cb 01       	movw	r24, r22
    5646:	f8 01       	movw	r30, r16
    5648:	91 83       	std	Z+1, r25	; 0x01
    564a:	80 83       	st	Z, r24
    564c:	de 01       	movw	r26, r28
    564e:	ab 5a       	subi	r26, 0xAB	; 171
    5650:	bf 4f       	sbci	r27, 0xFF	; 255
    5652:	fe 01       	movw	r30, r28
    5654:	e7 5a       	subi	r30, 0xA7	; 167
    5656:	ff 4f       	sbci	r31, 0xFF	; 255
    5658:	80 81       	ld	r24, Z
    565a:	91 81       	ldd	r25, Z+1	; 0x01
    565c:	8d 93       	st	X+, r24
    565e:	9c 93       	st	X, r25
    5660:	fe 01       	movw	r30, r28
    5662:	eb 5a       	subi	r30, 0xAB	; 171
    5664:	ff 4f       	sbci	r31, 0xFF	; 255
    5666:	80 81       	ld	r24, Z
    5668:	91 81       	ldd	r25, Z+1	; 0x01
    566a:	01 97       	sbiw	r24, 0x01	; 1
    566c:	f1 f7       	brne	.-4      	; 0x566a <SevenSegment_FromAToH+0x326>
    566e:	fe 01       	movw	r30, r28
    5670:	eb 5a       	subi	r30, 0xAB	; 171
    5672:	ff 4f       	sbci	r31, 0xFF	; 255
    5674:	91 83       	std	Z+1, r25	; 0x01
    5676:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 0); // C
    5678:	fe 01       	movw	r30, r28
    567a:	ef 58       	subi	r30, 0x8F	; 143
    567c:	ff 4f       	sbci	r31, 0xFF	; 255
    567e:	80 81       	ld	r24, Z
    5680:	61 e0       	ldi	r22, 0x01	; 1
    5682:	40 e0       	ldi	r20, 0x00	; 0
    5684:	20 e0       	ldi	r18, 0x00	; 0
    5686:	01 e0       	ldi	r16, 0x01	; 1
    5688:	ee 24       	eor	r14, r14
    568a:	e3 94       	inc	r14
    568c:	cc 24       	eor	r12, r12
    568e:	c3 94       	inc	r12
    5690:	aa 24       	eor	r10, r10
    5692:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    5696:	fe 01       	movw	r30, r28
    5698:	ef 5a       	subi	r30, 0xAF	; 175
    569a:	ff 4f       	sbci	r31, 0xFF	; 255
    569c:	80 e0       	ldi	r24, 0x00	; 0
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	a8 e4       	ldi	r26, 0x48	; 72
    56a2:	b2 e4       	ldi	r27, 0x42	; 66
    56a4:	80 83       	st	Z, r24
    56a6:	91 83       	std	Z+1, r25	; 0x01
    56a8:	a2 83       	std	Z+2, r26	; 0x02
    56aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56ac:	8e 01       	movw	r16, r28
    56ae:	03 5b       	subi	r16, 0xB3	; 179
    56b0:	1f 4f       	sbci	r17, 0xFF	; 255
    56b2:	fe 01       	movw	r30, r28
    56b4:	ef 5a       	subi	r30, 0xAF	; 175
    56b6:	ff 4f       	sbci	r31, 0xFF	; 255
    56b8:	60 81       	ld	r22, Z
    56ba:	71 81       	ldd	r23, Z+1	; 0x01
    56bc:	82 81       	ldd	r24, Z+2	; 0x02
    56be:	93 81       	ldd	r25, Z+3	; 0x03
    56c0:	20 e0       	ldi	r18, 0x00	; 0
    56c2:	30 e0       	ldi	r19, 0x00	; 0
    56c4:	4a e7       	ldi	r20, 0x7A	; 122
    56c6:	55 e4       	ldi	r21, 0x45	; 69
    56c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56cc:	dc 01       	movw	r26, r24
    56ce:	cb 01       	movw	r24, r22
    56d0:	f8 01       	movw	r30, r16
    56d2:	80 83       	st	Z, r24
    56d4:	91 83       	std	Z+1, r25	; 0x01
    56d6:	a2 83       	std	Z+2, r26	; 0x02
    56d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56da:	fe 01       	movw	r30, r28
    56dc:	e3 5b       	subi	r30, 0xB3	; 179
    56de:	ff 4f       	sbci	r31, 0xFF	; 255
    56e0:	60 81       	ld	r22, Z
    56e2:	71 81       	ldd	r23, Z+1	; 0x01
    56e4:	82 81       	ldd	r24, Z+2	; 0x02
    56e6:	93 81       	ldd	r25, Z+3	; 0x03
    56e8:	20 e0       	ldi	r18, 0x00	; 0
    56ea:	30 e0       	ldi	r19, 0x00	; 0
    56ec:	40 e8       	ldi	r20, 0x80	; 128
    56ee:	5f e3       	ldi	r21, 0x3F	; 63
    56f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56f4:	88 23       	and	r24, r24
    56f6:	44 f4       	brge	.+16     	; 0x5708 <SevenSegment_FromAToH+0x3c4>
		__ticks = 1;
    56f8:	fe 01       	movw	r30, r28
    56fa:	e5 5b       	subi	r30, 0xB5	; 181
    56fc:	ff 4f       	sbci	r31, 0xFF	; 255
    56fe:	81 e0       	ldi	r24, 0x01	; 1
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	91 83       	std	Z+1, r25	; 0x01
    5704:	80 83       	st	Z, r24
    5706:	64 c0       	rjmp	.+200    	; 0x57d0 <SevenSegment_FromAToH+0x48c>
	else if (__tmp > 65535)
    5708:	fe 01       	movw	r30, r28
    570a:	e3 5b       	subi	r30, 0xB3	; 179
    570c:	ff 4f       	sbci	r31, 0xFF	; 255
    570e:	60 81       	ld	r22, Z
    5710:	71 81       	ldd	r23, Z+1	; 0x01
    5712:	82 81       	ldd	r24, Z+2	; 0x02
    5714:	93 81       	ldd	r25, Z+3	; 0x03
    5716:	20 e0       	ldi	r18, 0x00	; 0
    5718:	3f ef       	ldi	r19, 0xFF	; 255
    571a:	4f e7       	ldi	r20, 0x7F	; 127
    571c:	57 e4       	ldi	r21, 0x47	; 71
    571e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5722:	18 16       	cp	r1, r24
    5724:	0c f0       	brlt	.+2      	; 0x5728 <SevenSegment_FromAToH+0x3e4>
    5726:	43 c0       	rjmp	.+134    	; 0x57ae <SevenSegment_FromAToH+0x46a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5728:	fe 01       	movw	r30, r28
    572a:	ef 5a       	subi	r30, 0xAF	; 175
    572c:	ff 4f       	sbci	r31, 0xFF	; 255
    572e:	60 81       	ld	r22, Z
    5730:	71 81       	ldd	r23, Z+1	; 0x01
    5732:	82 81       	ldd	r24, Z+2	; 0x02
    5734:	93 81       	ldd	r25, Z+3	; 0x03
    5736:	20 e0       	ldi	r18, 0x00	; 0
    5738:	30 e0       	ldi	r19, 0x00	; 0
    573a:	40 e2       	ldi	r20, 0x20	; 32
    573c:	51 e4       	ldi	r21, 0x41	; 65
    573e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5742:	dc 01       	movw	r26, r24
    5744:	cb 01       	movw	r24, r22
    5746:	8e 01       	movw	r16, r28
    5748:	05 5b       	subi	r16, 0xB5	; 181
    574a:	1f 4f       	sbci	r17, 0xFF	; 255
    574c:	bc 01       	movw	r22, r24
    574e:	cd 01       	movw	r24, r26
    5750:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5754:	dc 01       	movw	r26, r24
    5756:	cb 01       	movw	r24, r22
    5758:	f8 01       	movw	r30, r16
    575a:	91 83       	std	Z+1, r25	; 0x01
    575c:	80 83       	st	Z, r24
    575e:	1f c0       	rjmp	.+62     	; 0x579e <SevenSegment_FromAToH+0x45a>
    5760:	fe 01       	movw	r30, r28
    5762:	e7 5b       	subi	r30, 0xB7	; 183
    5764:	ff 4f       	sbci	r31, 0xFF	; 255
    5766:	80 e9       	ldi	r24, 0x90	; 144
    5768:	91 e0       	ldi	r25, 0x01	; 1
    576a:	91 83       	std	Z+1, r25	; 0x01
    576c:	80 83       	st	Z, r24
    576e:	fe 01       	movw	r30, r28
    5770:	e7 5b       	subi	r30, 0xB7	; 183
    5772:	ff 4f       	sbci	r31, 0xFF	; 255
    5774:	80 81       	ld	r24, Z
    5776:	91 81       	ldd	r25, Z+1	; 0x01
    5778:	01 97       	sbiw	r24, 0x01	; 1
    577a:	f1 f7       	brne	.-4      	; 0x5778 <SevenSegment_FromAToH+0x434>
    577c:	fe 01       	movw	r30, r28
    577e:	e7 5b       	subi	r30, 0xB7	; 183
    5780:	ff 4f       	sbci	r31, 0xFF	; 255
    5782:	91 83       	std	Z+1, r25	; 0x01
    5784:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5786:	de 01       	movw	r26, r28
    5788:	a5 5b       	subi	r26, 0xB5	; 181
    578a:	bf 4f       	sbci	r27, 0xFF	; 255
    578c:	fe 01       	movw	r30, r28
    578e:	e5 5b       	subi	r30, 0xB5	; 181
    5790:	ff 4f       	sbci	r31, 0xFF	; 255
    5792:	80 81       	ld	r24, Z
    5794:	91 81       	ldd	r25, Z+1	; 0x01
    5796:	01 97       	sbiw	r24, 0x01	; 1
    5798:	11 96       	adiw	r26, 0x01	; 1
    579a:	9c 93       	st	X, r25
    579c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    579e:	fe 01       	movw	r30, r28
    57a0:	e5 5b       	subi	r30, 0xB5	; 181
    57a2:	ff 4f       	sbci	r31, 0xFF	; 255
    57a4:	80 81       	ld	r24, Z
    57a6:	91 81       	ldd	r25, Z+1	; 0x01
    57a8:	00 97       	sbiw	r24, 0x00	; 0
    57aa:	d1 f6       	brne	.-76     	; 0x5760 <SevenSegment_FromAToH+0x41c>
    57ac:	27 c0       	rjmp	.+78     	; 0x57fc <SevenSegment_FromAToH+0x4b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57ae:	8e 01       	movw	r16, r28
    57b0:	05 5b       	subi	r16, 0xB5	; 181
    57b2:	1f 4f       	sbci	r17, 0xFF	; 255
    57b4:	fe 01       	movw	r30, r28
    57b6:	e3 5b       	subi	r30, 0xB3	; 179
    57b8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ba:	60 81       	ld	r22, Z
    57bc:	71 81       	ldd	r23, Z+1	; 0x01
    57be:	82 81       	ldd	r24, Z+2	; 0x02
    57c0:	93 81       	ldd	r25, Z+3	; 0x03
    57c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57c6:	dc 01       	movw	r26, r24
    57c8:	cb 01       	movw	r24, r22
    57ca:	f8 01       	movw	r30, r16
    57cc:	91 83       	std	Z+1, r25	; 0x01
    57ce:	80 83       	st	Z, r24
    57d0:	de 01       	movw	r26, r28
    57d2:	a9 5b       	subi	r26, 0xB9	; 185
    57d4:	bf 4f       	sbci	r27, 0xFF	; 255
    57d6:	fe 01       	movw	r30, r28
    57d8:	e5 5b       	subi	r30, 0xB5	; 181
    57da:	ff 4f       	sbci	r31, 0xFF	; 255
    57dc:	80 81       	ld	r24, Z
    57de:	91 81       	ldd	r25, Z+1	; 0x01
    57e0:	8d 93       	st	X+, r24
    57e2:	9c 93       	st	X, r25
    57e4:	fe 01       	movw	r30, r28
    57e6:	e9 5b       	subi	r30, 0xB9	; 185
    57e8:	ff 4f       	sbci	r31, 0xFF	; 255
    57ea:	80 81       	ld	r24, Z
    57ec:	91 81       	ldd	r25, Z+1	; 0x01
    57ee:	01 97       	sbiw	r24, 0x01	; 1
    57f0:	f1 f7       	brne	.-4      	; 0x57ee <SevenSegment_FromAToH+0x4aa>
    57f2:	fe 01       	movw	r30, r28
    57f4:	e9 5b       	subi	r30, 0xB9	; 185
    57f6:	ff 4f       	sbci	r31, 0xFF	; 255
    57f8:	91 83       	std	Z+1, r25	; 0x01
    57fa:	80 83       	st	Z, r24
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 1, 1, 0, 1); // D
    57fc:	fe 01       	movw	r30, r28
    57fe:	ef 58       	subi	r30, 0x8F	; 143
    5800:	ff 4f       	sbci	r31, 0xFF	; 255
    5802:	80 81       	ld	r24, Z
    5804:	60 e0       	ldi	r22, 0x00	; 0
    5806:	41 e0       	ldi	r20, 0x01	; 1
    5808:	21 e0       	ldi	r18, 0x01	; 1
    580a:	01 e0       	ldi	r16, 0x01	; 1
    580c:	ee 24       	eor	r14, r14
    580e:	e3 94       	inc	r14
    5810:	cc 24       	eor	r12, r12
    5812:	aa 24       	eor	r10, r10
    5814:	a3 94       	inc	r10
    5816:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    581a:	fe 01       	movw	r30, r28
    581c:	ed 5b       	subi	r30, 0xBD	; 189
    581e:	ff 4f       	sbci	r31, 0xFF	; 255
    5820:	80 e0       	ldi	r24, 0x00	; 0
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	a8 e4       	ldi	r26, 0x48	; 72
    5826:	b2 e4       	ldi	r27, 0x42	; 66
    5828:	80 83       	st	Z, r24
    582a:	91 83       	std	Z+1, r25	; 0x01
    582c:	a2 83       	std	Z+2, r26	; 0x02
    582e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5830:	8e 01       	movw	r16, r28
    5832:	01 5c       	subi	r16, 0xC1	; 193
    5834:	1f 4f       	sbci	r17, 0xFF	; 255
    5836:	fe 01       	movw	r30, r28
    5838:	ed 5b       	subi	r30, 0xBD	; 189
    583a:	ff 4f       	sbci	r31, 0xFF	; 255
    583c:	60 81       	ld	r22, Z
    583e:	71 81       	ldd	r23, Z+1	; 0x01
    5840:	82 81       	ldd	r24, Z+2	; 0x02
    5842:	93 81       	ldd	r25, Z+3	; 0x03
    5844:	20 e0       	ldi	r18, 0x00	; 0
    5846:	30 e0       	ldi	r19, 0x00	; 0
    5848:	4a e7       	ldi	r20, 0x7A	; 122
    584a:	55 e4       	ldi	r21, 0x45	; 69
    584c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5850:	dc 01       	movw	r26, r24
    5852:	cb 01       	movw	r24, r22
    5854:	f8 01       	movw	r30, r16
    5856:	80 83       	st	Z, r24
    5858:	91 83       	std	Z+1, r25	; 0x01
    585a:	a2 83       	std	Z+2, r26	; 0x02
    585c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    585e:	fe 01       	movw	r30, r28
    5860:	ff 96       	adiw	r30, 0x3f	; 63
    5862:	60 81       	ld	r22, Z
    5864:	71 81       	ldd	r23, Z+1	; 0x01
    5866:	82 81       	ldd	r24, Z+2	; 0x02
    5868:	93 81       	ldd	r25, Z+3	; 0x03
    586a:	20 e0       	ldi	r18, 0x00	; 0
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	40 e8       	ldi	r20, 0x80	; 128
    5870:	5f e3       	ldi	r21, 0x3F	; 63
    5872:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5876:	88 23       	and	r24, r24
    5878:	2c f4       	brge	.+10     	; 0x5884 <SevenSegment_FromAToH+0x540>
		__ticks = 1;
    587a:	81 e0       	ldi	r24, 0x01	; 1
    587c:	90 e0       	ldi	r25, 0x00	; 0
    587e:	9e af       	std	Y+62, r25	; 0x3e
    5880:	8d af       	std	Y+61, r24	; 0x3d
    5882:	46 c0       	rjmp	.+140    	; 0x5910 <SevenSegment_FromAToH+0x5cc>
	else if (__tmp > 65535)
    5884:	fe 01       	movw	r30, r28
    5886:	ff 96       	adiw	r30, 0x3f	; 63
    5888:	60 81       	ld	r22, Z
    588a:	71 81       	ldd	r23, Z+1	; 0x01
    588c:	82 81       	ldd	r24, Z+2	; 0x02
    588e:	93 81       	ldd	r25, Z+3	; 0x03
    5890:	20 e0       	ldi	r18, 0x00	; 0
    5892:	3f ef       	ldi	r19, 0xFF	; 255
    5894:	4f e7       	ldi	r20, 0x7F	; 127
    5896:	57 e4       	ldi	r21, 0x47	; 71
    5898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    589c:	18 16       	cp	r1, r24
    589e:	64 f5       	brge	.+88     	; 0x58f8 <SevenSegment_FromAToH+0x5b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    58a0:	fe 01       	movw	r30, r28
    58a2:	ed 5b       	subi	r30, 0xBD	; 189
    58a4:	ff 4f       	sbci	r31, 0xFF	; 255
    58a6:	60 81       	ld	r22, Z
    58a8:	71 81       	ldd	r23, Z+1	; 0x01
    58aa:	82 81       	ldd	r24, Z+2	; 0x02
    58ac:	93 81       	ldd	r25, Z+3	; 0x03
    58ae:	20 e0       	ldi	r18, 0x00	; 0
    58b0:	30 e0       	ldi	r19, 0x00	; 0
    58b2:	40 e2       	ldi	r20, 0x20	; 32
    58b4:	51 e4       	ldi	r21, 0x41	; 65
    58b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58ba:	dc 01       	movw	r26, r24
    58bc:	cb 01       	movw	r24, r22
    58be:	bc 01       	movw	r22, r24
    58c0:	cd 01       	movw	r24, r26
    58c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58c6:	dc 01       	movw	r26, r24
    58c8:	cb 01       	movw	r24, r22
    58ca:	9e af       	std	Y+62, r25	; 0x3e
    58cc:	8d af       	std	Y+61, r24	; 0x3d
    58ce:	0f c0       	rjmp	.+30     	; 0x58ee <SevenSegment_FromAToH+0x5aa>
    58d0:	80 e9       	ldi	r24, 0x90	; 144
    58d2:	91 e0       	ldi	r25, 0x01	; 1
    58d4:	9c af       	std	Y+60, r25	; 0x3c
    58d6:	8b af       	std	Y+59, r24	; 0x3b
    58d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    58da:	9c ad       	ldd	r25, Y+60	; 0x3c
    58dc:	01 97       	sbiw	r24, 0x01	; 1
    58de:	f1 f7       	brne	.-4      	; 0x58dc <SevenSegment_FromAToH+0x598>
    58e0:	9c af       	std	Y+60, r25	; 0x3c
    58e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    58e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    58e8:	01 97       	sbiw	r24, 0x01	; 1
    58ea:	9e af       	std	Y+62, r25	; 0x3e
    58ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    58ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    58f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    58f2:	00 97       	sbiw	r24, 0x00	; 0
    58f4:	69 f7       	brne	.-38     	; 0x58d0 <SevenSegment_FromAToH+0x58c>
    58f6:	16 c0       	rjmp	.+44     	; 0x5924 <SevenSegment_FromAToH+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    58f8:	fe 01       	movw	r30, r28
    58fa:	ff 96       	adiw	r30, 0x3f	; 63
    58fc:	60 81       	ld	r22, Z
    58fe:	71 81       	ldd	r23, Z+1	; 0x01
    5900:	82 81       	ldd	r24, Z+2	; 0x02
    5902:	93 81       	ldd	r25, Z+3	; 0x03
    5904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5908:	dc 01       	movw	r26, r24
    590a:	cb 01       	movw	r24, r22
    590c:	9e af       	std	Y+62, r25	; 0x3e
    590e:	8d af       	std	Y+61, r24	; 0x3d
    5910:	8d ad       	ldd	r24, Y+61	; 0x3d
    5912:	9e ad       	ldd	r25, Y+62	; 0x3e
    5914:	9a af       	std	Y+58, r25	; 0x3a
    5916:	89 af       	std	Y+57, r24	; 0x39
    5918:	89 ad       	ldd	r24, Y+57	; 0x39
    591a:	9a ad       	ldd	r25, Y+58	; 0x3a
    591c:	01 97       	sbiw	r24, 0x01	; 1
    591e:	f1 f7       	brne	.-4      	; 0x591c <SevenSegment_FromAToH+0x5d8>
    5920:	9a af       	std	Y+58, r25	; 0x3a
    5922:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 1, 1, 1, 1); // E
    5924:	fe 01       	movw	r30, r28
    5926:	ef 58       	subi	r30, 0x8F	; 143
    5928:	ff 4f       	sbci	r31, 0xFF	; 255
    592a:	80 81       	ld	r24, Z
    592c:	61 e0       	ldi	r22, 0x01	; 1
    592e:	40 e0       	ldi	r20, 0x00	; 0
    5930:	20 e0       	ldi	r18, 0x00	; 0
    5932:	01 e0       	ldi	r16, 0x01	; 1
    5934:	ee 24       	eor	r14, r14
    5936:	e3 94       	inc	r14
    5938:	cc 24       	eor	r12, r12
    593a:	c3 94       	inc	r12
    593c:	aa 24       	eor	r10, r10
    593e:	a3 94       	inc	r10
    5940:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    5944:	80 e0       	ldi	r24, 0x00	; 0
    5946:	90 e0       	ldi	r25, 0x00	; 0
    5948:	a8 e4       	ldi	r26, 0x48	; 72
    594a:	b2 e4       	ldi	r27, 0x42	; 66
    594c:	8d ab       	std	Y+53, r24	; 0x35
    594e:	9e ab       	std	Y+54, r25	; 0x36
    5950:	af ab       	std	Y+55, r26	; 0x37
    5952:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5954:	6d a9       	ldd	r22, Y+53	; 0x35
    5956:	7e a9       	ldd	r23, Y+54	; 0x36
    5958:	8f a9       	ldd	r24, Y+55	; 0x37
    595a:	98 ad       	ldd	r25, Y+56	; 0x38
    595c:	20 e0       	ldi	r18, 0x00	; 0
    595e:	30 e0       	ldi	r19, 0x00	; 0
    5960:	4a e7       	ldi	r20, 0x7A	; 122
    5962:	55 e4       	ldi	r21, 0x45	; 69
    5964:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5968:	dc 01       	movw	r26, r24
    596a:	cb 01       	movw	r24, r22
    596c:	89 ab       	std	Y+49, r24	; 0x31
    596e:	9a ab       	std	Y+50, r25	; 0x32
    5970:	ab ab       	std	Y+51, r26	; 0x33
    5972:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5974:	69 a9       	ldd	r22, Y+49	; 0x31
    5976:	7a a9       	ldd	r23, Y+50	; 0x32
    5978:	8b a9       	ldd	r24, Y+51	; 0x33
    597a:	9c a9       	ldd	r25, Y+52	; 0x34
    597c:	20 e0       	ldi	r18, 0x00	; 0
    597e:	30 e0       	ldi	r19, 0x00	; 0
    5980:	40 e8       	ldi	r20, 0x80	; 128
    5982:	5f e3       	ldi	r21, 0x3F	; 63
    5984:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5988:	88 23       	and	r24, r24
    598a:	2c f4       	brge	.+10     	; 0x5996 <SevenSegment_FromAToH+0x652>
		__ticks = 1;
    598c:	81 e0       	ldi	r24, 0x01	; 1
    598e:	90 e0       	ldi	r25, 0x00	; 0
    5990:	98 ab       	std	Y+48, r25	; 0x30
    5992:	8f a7       	std	Y+47, r24	; 0x2f
    5994:	3f c0       	rjmp	.+126    	; 0x5a14 <SevenSegment_FromAToH+0x6d0>
	else if (__tmp > 65535)
    5996:	69 a9       	ldd	r22, Y+49	; 0x31
    5998:	7a a9       	ldd	r23, Y+50	; 0x32
    599a:	8b a9       	ldd	r24, Y+51	; 0x33
    599c:	9c a9       	ldd	r25, Y+52	; 0x34
    599e:	20 e0       	ldi	r18, 0x00	; 0
    59a0:	3f ef       	ldi	r19, 0xFF	; 255
    59a2:	4f e7       	ldi	r20, 0x7F	; 127
    59a4:	57 e4       	ldi	r21, 0x47	; 71
    59a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    59aa:	18 16       	cp	r1, r24
    59ac:	4c f5       	brge	.+82     	; 0x5a00 <SevenSegment_FromAToH+0x6bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    59ae:	6d a9       	ldd	r22, Y+53	; 0x35
    59b0:	7e a9       	ldd	r23, Y+54	; 0x36
    59b2:	8f a9       	ldd	r24, Y+55	; 0x37
    59b4:	98 ad       	ldd	r25, Y+56	; 0x38
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	30 e0       	ldi	r19, 0x00	; 0
    59ba:	40 e2       	ldi	r20, 0x20	; 32
    59bc:	51 e4       	ldi	r21, 0x41	; 65
    59be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59c2:	dc 01       	movw	r26, r24
    59c4:	cb 01       	movw	r24, r22
    59c6:	bc 01       	movw	r22, r24
    59c8:	cd 01       	movw	r24, r26
    59ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59ce:	dc 01       	movw	r26, r24
    59d0:	cb 01       	movw	r24, r22
    59d2:	98 ab       	std	Y+48, r25	; 0x30
    59d4:	8f a7       	std	Y+47, r24	; 0x2f
    59d6:	0f c0       	rjmp	.+30     	; 0x59f6 <SevenSegment_FromAToH+0x6b2>
    59d8:	80 e9       	ldi	r24, 0x90	; 144
    59da:	91 e0       	ldi	r25, 0x01	; 1
    59dc:	9e a7       	std	Y+46, r25	; 0x2e
    59de:	8d a7       	std	Y+45, r24	; 0x2d
    59e0:	8d a5       	ldd	r24, Y+45	; 0x2d
    59e2:	9e a5       	ldd	r25, Y+46	; 0x2e
    59e4:	01 97       	sbiw	r24, 0x01	; 1
    59e6:	f1 f7       	brne	.-4      	; 0x59e4 <SevenSegment_FromAToH+0x6a0>
    59e8:	9e a7       	std	Y+46, r25	; 0x2e
    59ea:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    59ee:	98 a9       	ldd	r25, Y+48	; 0x30
    59f0:	01 97       	sbiw	r24, 0x01	; 1
    59f2:	98 ab       	std	Y+48, r25	; 0x30
    59f4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    59f8:	98 a9       	ldd	r25, Y+48	; 0x30
    59fa:	00 97       	sbiw	r24, 0x00	; 0
    59fc:	69 f7       	brne	.-38     	; 0x59d8 <SevenSegment_FromAToH+0x694>
    59fe:	14 c0       	rjmp	.+40     	; 0x5a28 <SevenSegment_FromAToH+0x6e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a00:	69 a9       	ldd	r22, Y+49	; 0x31
    5a02:	7a a9       	ldd	r23, Y+50	; 0x32
    5a04:	8b a9       	ldd	r24, Y+51	; 0x33
    5a06:	9c a9       	ldd	r25, Y+52	; 0x34
    5a08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a0c:	dc 01       	movw	r26, r24
    5a0e:	cb 01       	movw	r24, r22
    5a10:	98 ab       	std	Y+48, r25	; 0x30
    5a12:	8f a7       	std	Y+47, r24	; 0x2f
    5a14:	8f a5       	ldd	r24, Y+47	; 0x2f
    5a16:	98 a9       	ldd	r25, Y+48	; 0x30
    5a18:	9c a7       	std	Y+44, r25	; 0x2c
    5a1a:	8b a7       	std	Y+43, r24	; 0x2b
    5a1c:	8b a5       	ldd	r24, Y+43	; 0x2b
    5a1e:	9c a5       	ldd	r25, Y+44	; 0x2c
    5a20:	01 97       	sbiw	r24, 0x01	; 1
    5a22:	f1 f7       	brne	.-4      	; 0x5a20 <SevenSegment_FromAToH+0x6dc>
    5a24:	9c a7       	std	Y+44, r25	; 0x2c
    5a26:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 0, 0, 1, 1, 1); // F
    5a28:	fe 01       	movw	r30, r28
    5a2a:	ef 58       	subi	r30, 0x8F	; 143
    5a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a2e:	80 81       	ld	r24, Z
    5a30:	61 e0       	ldi	r22, 0x01	; 1
    5a32:	40 e0       	ldi	r20, 0x00	; 0
    5a34:	20 e0       	ldi	r18, 0x00	; 0
    5a36:	00 e0       	ldi	r16, 0x00	; 0
    5a38:	ee 24       	eor	r14, r14
    5a3a:	e3 94       	inc	r14
    5a3c:	cc 24       	eor	r12, r12
    5a3e:	c3 94       	inc	r12
    5a40:	aa 24       	eor	r10, r10
    5a42:	a3 94       	inc	r10
    5a44:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    5a48:	80 e0       	ldi	r24, 0x00	; 0
    5a4a:	90 e0       	ldi	r25, 0x00	; 0
    5a4c:	a8 e4       	ldi	r26, 0x48	; 72
    5a4e:	b2 e4       	ldi	r27, 0x42	; 66
    5a50:	8f a3       	std	Y+39, r24	; 0x27
    5a52:	98 a7       	std	Y+40, r25	; 0x28
    5a54:	a9 a7       	std	Y+41, r26	; 0x29
    5a56:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a58:	6f a1       	ldd	r22, Y+39	; 0x27
    5a5a:	78 a5       	ldd	r23, Y+40	; 0x28
    5a5c:	89 a5       	ldd	r24, Y+41	; 0x29
    5a5e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5a60:	20 e0       	ldi	r18, 0x00	; 0
    5a62:	30 e0       	ldi	r19, 0x00	; 0
    5a64:	4a e7       	ldi	r20, 0x7A	; 122
    5a66:	55 e4       	ldi	r21, 0x45	; 69
    5a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a6c:	dc 01       	movw	r26, r24
    5a6e:	cb 01       	movw	r24, r22
    5a70:	8b a3       	std	Y+35, r24	; 0x23
    5a72:	9c a3       	std	Y+36, r25	; 0x24
    5a74:	ad a3       	std	Y+37, r26	; 0x25
    5a76:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5a78:	6b a1       	ldd	r22, Y+35	; 0x23
    5a7a:	7c a1       	ldd	r23, Y+36	; 0x24
    5a7c:	8d a1       	ldd	r24, Y+37	; 0x25
    5a7e:	9e a1       	ldd	r25, Y+38	; 0x26
    5a80:	20 e0       	ldi	r18, 0x00	; 0
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	40 e8       	ldi	r20, 0x80	; 128
    5a86:	5f e3       	ldi	r21, 0x3F	; 63
    5a88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5a8c:	88 23       	and	r24, r24
    5a8e:	2c f4       	brge	.+10     	; 0x5a9a <SevenSegment_FromAToH+0x756>
		__ticks = 1;
    5a90:	81 e0       	ldi	r24, 0x01	; 1
    5a92:	90 e0       	ldi	r25, 0x00	; 0
    5a94:	9a a3       	std	Y+34, r25	; 0x22
    5a96:	89 a3       	std	Y+33, r24	; 0x21
    5a98:	3f c0       	rjmp	.+126    	; 0x5b18 <SevenSegment_FromAToH+0x7d4>
	else if (__tmp > 65535)
    5a9a:	6b a1       	ldd	r22, Y+35	; 0x23
    5a9c:	7c a1       	ldd	r23, Y+36	; 0x24
    5a9e:	8d a1       	ldd	r24, Y+37	; 0x25
    5aa0:	9e a1       	ldd	r25, Y+38	; 0x26
    5aa2:	20 e0       	ldi	r18, 0x00	; 0
    5aa4:	3f ef       	ldi	r19, 0xFF	; 255
    5aa6:	4f e7       	ldi	r20, 0x7F	; 127
    5aa8:	57 e4       	ldi	r21, 0x47	; 71
    5aaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5aae:	18 16       	cp	r1, r24
    5ab0:	4c f5       	brge	.+82     	; 0x5b04 <SevenSegment_FromAToH+0x7c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5ab2:	6f a1       	ldd	r22, Y+39	; 0x27
    5ab4:	78 a5       	ldd	r23, Y+40	; 0x28
    5ab6:	89 a5       	ldd	r24, Y+41	; 0x29
    5ab8:	9a a5       	ldd	r25, Y+42	; 0x2a
    5aba:	20 e0       	ldi	r18, 0x00	; 0
    5abc:	30 e0       	ldi	r19, 0x00	; 0
    5abe:	40 e2       	ldi	r20, 0x20	; 32
    5ac0:	51 e4       	ldi	r21, 0x41	; 65
    5ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ac6:	dc 01       	movw	r26, r24
    5ac8:	cb 01       	movw	r24, r22
    5aca:	bc 01       	movw	r22, r24
    5acc:	cd 01       	movw	r24, r26
    5ace:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ad2:	dc 01       	movw	r26, r24
    5ad4:	cb 01       	movw	r24, r22
    5ad6:	9a a3       	std	Y+34, r25	; 0x22
    5ad8:	89 a3       	std	Y+33, r24	; 0x21
    5ada:	0f c0       	rjmp	.+30     	; 0x5afa <SevenSegment_FromAToH+0x7b6>
    5adc:	80 e9       	ldi	r24, 0x90	; 144
    5ade:	91 e0       	ldi	r25, 0x01	; 1
    5ae0:	98 a3       	std	Y+32, r25	; 0x20
    5ae2:	8f 8f       	std	Y+31, r24	; 0x1f
    5ae4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5ae6:	98 a1       	ldd	r25, Y+32	; 0x20
    5ae8:	01 97       	sbiw	r24, 0x01	; 1
    5aea:	f1 f7       	brne	.-4      	; 0x5ae8 <SevenSegment_FromAToH+0x7a4>
    5aec:	98 a3       	std	Y+32, r25	; 0x20
    5aee:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5af0:	89 a1       	ldd	r24, Y+33	; 0x21
    5af2:	9a a1       	ldd	r25, Y+34	; 0x22
    5af4:	01 97       	sbiw	r24, 0x01	; 1
    5af6:	9a a3       	std	Y+34, r25	; 0x22
    5af8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5afa:	89 a1       	ldd	r24, Y+33	; 0x21
    5afc:	9a a1       	ldd	r25, Y+34	; 0x22
    5afe:	00 97       	sbiw	r24, 0x00	; 0
    5b00:	69 f7       	brne	.-38     	; 0x5adc <SevenSegment_FromAToH+0x798>
    5b02:	14 c0       	rjmp	.+40     	; 0x5b2c <SevenSegment_FromAToH+0x7e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5b04:	6b a1       	ldd	r22, Y+35	; 0x23
    5b06:	7c a1       	ldd	r23, Y+36	; 0x24
    5b08:	8d a1       	ldd	r24, Y+37	; 0x25
    5b0a:	9e a1       	ldd	r25, Y+38	; 0x26
    5b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b10:	dc 01       	movw	r26, r24
    5b12:	cb 01       	movw	r24, r22
    5b14:	9a a3       	std	Y+34, r25	; 0x22
    5b16:	89 a3       	std	Y+33, r24	; 0x21
    5b18:	89 a1       	ldd	r24, Y+33	; 0x21
    5b1a:	9a a1       	ldd	r25, Y+34	; 0x22
    5b1c:	9e 8f       	std	Y+30, r25	; 0x1e
    5b1e:	8d 8f       	std	Y+29, r24	; 0x1d
    5b20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5b22:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5b24:	01 97       	sbiw	r24, 0x01	; 1
    5b26:	f1 f7       	brne	.-4      	; 0x5b24 <SevenSegment_FromAToH+0x7e0>
    5b28:	9e 8f       	std	Y+30, r25	; 0x1e
    5b2a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 1, 0, 1, 1, 1, 1, 0); // G
    5b2c:	fe 01       	movw	r30, r28
    5b2e:	ef 58       	subi	r30, 0x8F	; 143
    5b30:	ff 4f       	sbci	r31, 0xFF	; 255
    5b32:	80 81       	ld	r24, Z
    5b34:	61 e0       	ldi	r22, 0x01	; 1
    5b36:	40 e0       	ldi	r20, 0x00	; 0
    5b38:	21 e0       	ldi	r18, 0x01	; 1
    5b3a:	01 e0       	ldi	r16, 0x01	; 1
    5b3c:	ee 24       	eor	r14, r14
    5b3e:	e3 94       	inc	r14
    5b40:	cc 24       	eor	r12, r12
    5b42:	c3 94       	inc	r12
    5b44:	aa 24       	eor	r10, r10
    5b46:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    5b4a:	80 e0       	ldi	r24, 0x00	; 0
    5b4c:	90 e0       	ldi	r25, 0x00	; 0
    5b4e:	a8 e4       	ldi	r26, 0x48	; 72
    5b50:	b2 e4       	ldi	r27, 0x42	; 66
    5b52:	89 8f       	std	Y+25, r24	; 0x19
    5b54:	9a 8f       	std	Y+26, r25	; 0x1a
    5b56:	ab 8f       	std	Y+27, r26	; 0x1b
    5b58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b5a:	69 8d       	ldd	r22, Y+25	; 0x19
    5b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5b62:	20 e0       	ldi	r18, 0x00	; 0
    5b64:	30 e0       	ldi	r19, 0x00	; 0
    5b66:	4a e7       	ldi	r20, 0x7A	; 122
    5b68:	55 e4       	ldi	r21, 0x45	; 69
    5b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b6e:	dc 01       	movw	r26, r24
    5b70:	cb 01       	movw	r24, r22
    5b72:	8d 8b       	std	Y+21, r24	; 0x15
    5b74:	9e 8b       	std	Y+22, r25	; 0x16
    5b76:	af 8b       	std	Y+23, r26	; 0x17
    5b78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5b7a:	6d 89       	ldd	r22, Y+21	; 0x15
    5b7c:	7e 89       	ldd	r23, Y+22	; 0x16
    5b7e:	8f 89       	ldd	r24, Y+23	; 0x17
    5b80:	98 8d       	ldd	r25, Y+24	; 0x18
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	30 e0       	ldi	r19, 0x00	; 0
    5b86:	40 e8       	ldi	r20, 0x80	; 128
    5b88:	5f e3       	ldi	r21, 0x3F	; 63
    5b8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5b8e:	88 23       	and	r24, r24
    5b90:	2c f4       	brge	.+10     	; 0x5b9c <SevenSegment_FromAToH+0x858>
		__ticks = 1;
    5b92:	81 e0       	ldi	r24, 0x01	; 1
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	9c 8b       	std	Y+20, r25	; 0x14
    5b98:	8b 8b       	std	Y+19, r24	; 0x13
    5b9a:	3f c0       	rjmp	.+126    	; 0x5c1a <SevenSegment_FromAToH+0x8d6>
	else if (__tmp > 65535)
    5b9c:	6d 89       	ldd	r22, Y+21	; 0x15
    5b9e:	7e 89       	ldd	r23, Y+22	; 0x16
    5ba0:	8f 89       	ldd	r24, Y+23	; 0x17
    5ba2:	98 8d       	ldd	r25, Y+24	; 0x18
    5ba4:	20 e0       	ldi	r18, 0x00	; 0
    5ba6:	3f ef       	ldi	r19, 0xFF	; 255
    5ba8:	4f e7       	ldi	r20, 0x7F	; 127
    5baa:	57 e4       	ldi	r21, 0x47	; 71
    5bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5bb0:	18 16       	cp	r1, r24
    5bb2:	4c f5       	brge	.+82     	; 0x5c06 <SevenSegment_FromAToH+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5bb4:	69 8d       	ldd	r22, Y+25	; 0x19
    5bb6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5bbc:	20 e0       	ldi	r18, 0x00	; 0
    5bbe:	30 e0       	ldi	r19, 0x00	; 0
    5bc0:	40 e2       	ldi	r20, 0x20	; 32
    5bc2:	51 e4       	ldi	r21, 0x41	; 65
    5bc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	bc 01       	movw	r22, r24
    5bce:	cd 01       	movw	r24, r26
    5bd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bd4:	dc 01       	movw	r26, r24
    5bd6:	cb 01       	movw	r24, r22
    5bd8:	9c 8b       	std	Y+20, r25	; 0x14
    5bda:	8b 8b       	std	Y+19, r24	; 0x13
    5bdc:	0f c0       	rjmp	.+30     	; 0x5bfc <SevenSegment_FromAToH+0x8b8>
    5bde:	80 e9       	ldi	r24, 0x90	; 144
    5be0:	91 e0       	ldi	r25, 0x01	; 1
    5be2:	9a 8b       	std	Y+18, r25	; 0x12
    5be4:	89 8b       	std	Y+17, r24	; 0x11
    5be6:	89 89       	ldd	r24, Y+17	; 0x11
    5be8:	9a 89       	ldd	r25, Y+18	; 0x12
    5bea:	01 97       	sbiw	r24, 0x01	; 1
    5bec:	f1 f7       	brne	.-4      	; 0x5bea <SevenSegment_FromAToH+0x8a6>
    5bee:	9a 8b       	std	Y+18, r25	; 0x12
    5bf0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bf2:	8b 89       	ldd	r24, Y+19	; 0x13
    5bf4:	9c 89       	ldd	r25, Y+20	; 0x14
    5bf6:	01 97       	sbiw	r24, 0x01	; 1
    5bf8:	9c 8b       	std	Y+20, r25	; 0x14
    5bfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bfc:	8b 89       	ldd	r24, Y+19	; 0x13
    5bfe:	9c 89       	ldd	r25, Y+20	; 0x14
    5c00:	00 97       	sbiw	r24, 0x00	; 0
    5c02:	69 f7       	brne	.-38     	; 0x5bde <SevenSegment_FromAToH+0x89a>
    5c04:	14 c0       	rjmp	.+40     	; 0x5c2e <SevenSegment_FromAToH+0x8ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c06:	6d 89       	ldd	r22, Y+21	; 0x15
    5c08:	7e 89       	ldd	r23, Y+22	; 0x16
    5c0a:	8f 89       	ldd	r24, Y+23	; 0x17
    5c0c:	98 8d       	ldd	r25, Y+24	; 0x18
    5c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c12:	dc 01       	movw	r26, r24
    5c14:	cb 01       	movw	r24, r22
    5c16:	9c 8b       	std	Y+20, r25	; 0x14
    5c18:	8b 8b       	std	Y+19, r24	; 0x13
    5c1a:	8b 89       	ldd	r24, Y+19	; 0x13
    5c1c:	9c 89       	ldd	r25, Y+20	; 0x14
    5c1e:	98 8b       	std	Y+16, r25	; 0x10
    5c20:	8f 87       	std	Y+15, r24	; 0x0f
    5c22:	8f 85       	ldd	r24, Y+15	; 0x0f
    5c24:	98 89       	ldd	r25, Y+16	; 0x10
    5c26:	01 97       	sbiw	r24, 0x01	; 1
    5c28:	f1 f7       	brne	.-4      	; 0x5c26 <SevenSegment_FromAToH+0x8e2>
    5c2a:	98 8b       	std	Y+16, r25	; 0x10
    5c2c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		SevenSegment_Display(Copy_u8PortId, 0, 1, 1, 0, 1, 1, 1); // H
    5c2e:	fe 01       	movw	r30, r28
    5c30:	ef 58       	subi	r30, 0x8F	; 143
    5c32:	ff 4f       	sbci	r31, 0xFF	; 255
    5c34:	80 81       	ld	r24, Z
    5c36:	60 e0       	ldi	r22, 0x00	; 0
    5c38:	41 e0       	ldi	r20, 0x01	; 1
    5c3a:	21 e0       	ldi	r18, 0x01	; 1
    5c3c:	00 e0       	ldi	r16, 0x00	; 0
    5c3e:	ee 24       	eor	r14, r14
    5c40:	e3 94       	inc	r14
    5c42:	cc 24       	eor	r12, r12
    5c44:	c3 94       	inc	r12
    5c46:	aa 24       	eor	r10, r10
    5c48:	a3 94       	inc	r10
    5c4a:	0e 94 ee 20 	call	0x41dc	; 0x41dc <SevenSegment_Display>
    5c4e:	80 e0       	ldi	r24, 0x00	; 0
    5c50:	90 e0       	ldi	r25, 0x00	; 0
    5c52:	a8 e4       	ldi	r26, 0x48	; 72
    5c54:	b2 e4       	ldi	r27, 0x42	; 66
    5c56:	8b 87       	std	Y+11, r24	; 0x0b
    5c58:	9c 87       	std	Y+12, r25	; 0x0c
    5c5a:	ad 87       	std	Y+13, r26	; 0x0d
    5c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    5c60:	7c 85       	ldd	r23, Y+12	; 0x0c
    5c62:	8d 85       	ldd	r24, Y+13	; 0x0d
    5c64:	9e 85       	ldd	r25, Y+14	; 0x0e
    5c66:	20 e0       	ldi	r18, 0x00	; 0
    5c68:	30 e0       	ldi	r19, 0x00	; 0
    5c6a:	4a e7       	ldi	r20, 0x7A	; 122
    5c6c:	55 e4       	ldi	r21, 0x45	; 69
    5c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c72:	dc 01       	movw	r26, r24
    5c74:	cb 01       	movw	r24, r22
    5c76:	8f 83       	std	Y+7, r24	; 0x07
    5c78:	98 87       	std	Y+8, r25	; 0x08
    5c7a:	a9 87       	std	Y+9, r26	; 0x09
    5c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    5c80:	78 85       	ldd	r23, Y+8	; 0x08
    5c82:	89 85       	ldd	r24, Y+9	; 0x09
    5c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    5c86:	20 e0       	ldi	r18, 0x00	; 0
    5c88:	30 e0       	ldi	r19, 0x00	; 0
    5c8a:	40 e8       	ldi	r20, 0x80	; 128
    5c8c:	5f e3       	ldi	r21, 0x3F	; 63
    5c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5c92:	88 23       	and	r24, r24
    5c94:	2c f4       	brge	.+10     	; 0x5ca0 <SevenSegment_FromAToH+0x95c>
		__ticks = 1;
    5c96:	81 e0       	ldi	r24, 0x01	; 1
    5c98:	90 e0       	ldi	r25, 0x00	; 0
    5c9a:	9e 83       	std	Y+6, r25	; 0x06
    5c9c:	8d 83       	std	Y+5, r24	; 0x05
    5c9e:	3f c0       	rjmp	.+126    	; 0x5d1e <SevenSegment_FromAToH+0x9da>
	else if (__tmp > 65535)
    5ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    5ca2:	78 85       	ldd	r23, Y+8	; 0x08
    5ca4:	89 85       	ldd	r24, Y+9	; 0x09
    5ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ca8:	20 e0       	ldi	r18, 0x00	; 0
    5caa:	3f ef       	ldi	r19, 0xFF	; 255
    5cac:	4f e7       	ldi	r20, 0x7F	; 127
    5cae:	57 e4       	ldi	r21, 0x47	; 71
    5cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5cb4:	18 16       	cp	r1, r24
    5cb6:	4c f5       	brge	.+82     	; 0x5d0a <SevenSegment_FromAToH+0x9c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    5cba:	7c 85       	ldd	r23, Y+12	; 0x0c
    5cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    5cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    5cc0:	20 e0       	ldi	r18, 0x00	; 0
    5cc2:	30 e0       	ldi	r19, 0x00	; 0
    5cc4:	40 e2       	ldi	r20, 0x20	; 32
    5cc6:	51 e4       	ldi	r21, 0x41	; 65
    5cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ccc:	dc 01       	movw	r26, r24
    5cce:	cb 01       	movw	r24, r22
    5cd0:	bc 01       	movw	r22, r24
    5cd2:	cd 01       	movw	r24, r26
    5cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5cd8:	dc 01       	movw	r26, r24
    5cda:	cb 01       	movw	r24, r22
    5cdc:	9e 83       	std	Y+6, r25	; 0x06
    5cde:	8d 83       	std	Y+5, r24	; 0x05
    5ce0:	0f c0       	rjmp	.+30     	; 0x5d00 <SevenSegment_FromAToH+0x9bc>
    5ce2:	80 e9       	ldi	r24, 0x90	; 144
    5ce4:	91 e0       	ldi	r25, 0x01	; 1
    5ce6:	9c 83       	std	Y+4, r25	; 0x04
    5ce8:	8b 83       	std	Y+3, r24	; 0x03
    5cea:	8b 81       	ldd	r24, Y+3	; 0x03
    5cec:	9c 81       	ldd	r25, Y+4	; 0x04
    5cee:	01 97       	sbiw	r24, 0x01	; 1
    5cf0:	f1 f7       	brne	.-4      	; 0x5cee <SevenSegment_FromAToH+0x9aa>
    5cf2:	9c 83       	std	Y+4, r25	; 0x04
    5cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    5cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    5cfa:	01 97       	sbiw	r24, 0x01	; 1
    5cfc:	9e 83       	std	Y+6, r25	; 0x06
    5cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d00:	8d 81       	ldd	r24, Y+5	; 0x05
    5d02:	9e 81       	ldd	r25, Y+6	; 0x06
    5d04:	00 97       	sbiw	r24, 0x00	; 0
    5d06:	69 f7       	brne	.-38     	; 0x5ce2 <SevenSegment_FromAToH+0x99e>
    5d08:	31 cb       	rjmp	.-2462   	; 0x536c <SevenSegment_FromAToH+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d0a:	6f 81       	ldd	r22, Y+7	; 0x07
    5d0c:	78 85       	ldd	r23, Y+8	; 0x08
    5d0e:	89 85       	ldd	r24, Y+9	; 0x09
    5d10:	9a 85       	ldd	r25, Y+10	; 0x0a
    5d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d16:	dc 01       	movw	r26, r24
    5d18:	cb 01       	movw	r24, r22
    5d1a:	9e 83       	std	Y+6, r25	; 0x06
    5d1c:	8d 83       	std	Y+5, r24	; 0x05
    5d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    5d20:	9e 81       	ldd	r25, Y+6	; 0x06
    5d22:	9a 83       	std	Y+2, r25	; 0x02
    5d24:	89 83       	std	Y+1, r24	; 0x01
    5d26:	89 81       	ldd	r24, Y+1	; 0x01
    5d28:	9a 81       	ldd	r25, Y+2	; 0x02
    5d2a:	01 97       	sbiw	r24, 0x01	; 1
    5d2c:	f1 f7       	brne	.-4      	; 0x5d2a <SevenSegment_FromAToH+0x9e6>
    5d2e:	9a 83       	std	Y+2, r25	; 0x02
    5d30:	89 83       	std	Y+1, r24	; 0x01
    5d32:	1c cb       	rjmp	.-2504   	; 0x536c <SevenSegment_FromAToH+0x28>

00005d34 <main>:
#include "APP_Includes.h"

int main(void){
    5d34:	df 93       	push	r29
    5d36:	cf 93       	push	r28
    5d38:	0f 92       	push	r0
    5d3a:	cd b7       	in	r28, 0x3d	; 61
    5d3c:	de b7       	in	r29, 0x3e	; 62
	
	u8 RecieveData;
	DIO_voidInit();
    5d3e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <DIO_voidInit>
	UART_Init();
    5d42:	0e 94 8b 06 	call	0xd16	; 0xd16 <UART_Init>
	UART_SendString("Enter R | Y | G | S(To Stop) : \n");
    5d46:	80 e6       	ldi	r24, 0x60	; 96
    5d48:	90 e0       	ldi	r25, 0x00	; 0
    5d4a:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <UART_SendString>
	while(1){
		UART_u8Recieve1ByteData(&RecieveData);
    5d4e:	ce 01       	movw	r24, r28
    5d50:	01 96       	adiw	r24, 0x01	; 1
    5d52:	0e 94 24 07 	call	0xe48	; 0xe48 <UART_u8Recieve1ByteData>

		if(RecieveData == 'R'){
    5d56:	89 81       	ldd	r24, Y+1	; 0x01
    5d58:	82 35       	cpi	r24, 0x52	; 82
    5d5a:	31 f4       	brne	.+12     	; 0x5d68 <main+0x34>
			DIO_u8SetPinValue(0, 0, 1);
    5d5c:	80 e0       	ldi	r24, 0x00	; 0
    5d5e:	60 e0       	ldi	r22, 0x00	; 0
    5d60:	41 e0       	ldi	r20, 0x01	; 1
    5d62:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    5d66:	f3 cf       	rjmp	.-26     	; 0x5d4e <main+0x1a>
		}
		
		else if(RecieveData == 'Y'){
    5d68:	89 81       	ldd	r24, Y+1	; 0x01
    5d6a:	89 35       	cpi	r24, 0x59	; 89
    5d6c:	31 f4       	brne	.+12     	; 0x5d7a <main+0x46>
			DIO_u8SetPinValue(0, 1, 1);
    5d6e:	80 e0       	ldi	r24, 0x00	; 0
    5d70:	61 e0       	ldi	r22, 0x01	; 1
    5d72:	41 e0       	ldi	r20, 0x01	; 1
    5d74:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    5d78:	ea cf       	rjmp	.-44     	; 0x5d4e <main+0x1a>
		}
		
		else if(RecieveData == 'G'){
    5d7a:	89 81       	ldd	r24, Y+1	; 0x01
    5d7c:	87 34       	cpi	r24, 0x47	; 71
    5d7e:	31 f4       	brne	.+12     	; 0x5d8c <main+0x58>
			DIO_u8SetPinValue(0, 2, 1);
    5d80:	80 e0       	ldi	r24, 0x00	; 0
    5d82:	62 e0       	ldi	r22, 0x02	; 2
    5d84:	41 e0       	ldi	r20, 0x01	; 1
    5d86:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    5d8a:	e1 cf       	rjmp	.-62     	; 0x5d4e <main+0x1a>
		}
		
		else if(RecieveData == 'S'){
    5d8c:	89 81       	ldd	r24, Y+1	; 0x01
    5d8e:	83 35       	cpi	r24, 0x53	; 83
    5d90:	f1 f6       	brne	.-68     	; 0x5d4e <main+0x1a>
			DIO_u8SetPinValue(0, 0, 0);
    5d92:	80 e0       	ldi	r24, 0x00	; 0
    5d94:	60 e0       	ldi	r22, 0x00	; 0
    5d96:	40 e0       	ldi	r20, 0x00	; 0
    5d98:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
			DIO_u8SetPinValue(0, 1, 0);
    5d9c:	80 e0       	ldi	r24, 0x00	; 0
    5d9e:	61 e0       	ldi	r22, 0x01	; 1
    5da0:	40 e0       	ldi	r20, 0x00	; 0
    5da2:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
			DIO_u8SetPinValue(0, 2, 0);
    5da6:	80 e0       	ldi	r24, 0x00	; 0
    5da8:	62 e0       	ldi	r22, 0x02	; 2
    5daa:	40 e0       	ldi	r20, 0x00	; 0
    5dac:	0e 94 cf 10 	call	0x219e	; 0x219e <DIO_u8SetPinValue>
    5db0:	ce cf       	rjmp	.-100    	; 0x5d4e <main+0x1a>

00005db2 <__divmodhi4>:
    5db2:	97 fb       	bst	r25, 7
    5db4:	09 2e       	mov	r0, r25
    5db6:	07 26       	eor	r0, r23
    5db8:	0a d0       	rcall	.+20     	; 0x5dce <__divmodhi4_neg1>
    5dba:	77 fd       	sbrc	r23, 7
    5dbc:	04 d0       	rcall	.+8      	; 0x5dc6 <__divmodhi4_neg2>
    5dbe:	2e d0       	rcall	.+92     	; 0x5e1c <__udivmodhi4>
    5dc0:	06 d0       	rcall	.+12     	; 0x5dce <__divmodhi4_neg1>
    5dc2:	00 20       	and	r0, r0
    5dc4:	1a f4       	brpl	.+6      	; 0x5dcc <__divmodhi4_exit>

00005dc6 <__divmodhi4_neg2>:
    5dc6:	70 95       	com	r23
    5dc8:	61 95       	neg	r22
    5dca:	7f 4f       	sbci	r23, 0xFF	; 255

00005dcc <__divmodhi4_exit>:
    5dcc:	08 95       	ret

00005dce <__divmodhi4_neg1>:
    5dce:	f6 f7       	brtc	.-4      	; 0x5dcc <__divmodhi4_exit>
    5dd0:	90 95       	com	r25
    5dd2:	81 95       	neg	r24
    5dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    5dd6:	08 95       	ret

00005dd8 <__udivmodsi4>:
    5dd8:	a1 e2       	ldi	r26, 0x21	; 33
    5dda:	1a 2e       	mov	r1, r26
    5ddc:	aa 1b       	sub	r26, r26
    5dde:	bb 1b       	sub	r27, r27
    5de0:	fd 01       	movw	r30, r26
    5de2:	0d c0       	rjmp	.+26     	; 0x5dfe <__udivmodsi4_ep>

00005de4 <__udivmodsi4_loop>:
    5de4:	aa 1f       	adc	r26, r26
    5de6:	bb 1f       	adc	r27, r27
    5de8:	ee 1f       	adc	r30, r30
    5dea:	ff 1f       	adc	r31, r31
    5dec:	a2 17       	cp	r26, r18
    5dee:	b3 07       	cpc	r27, r19
    5df0:	e4 07       	cpc	r30, r20
    5df2:	f5 07       	cpc	r31, r21
    5df4:	20 f0       	brcs	.+8      	; 0x5dfe <__udivmodsi4_ep>
    5df6:	a2 1b       	sub	r26, r18
    5df8:	b3 0b       	sbc	r27, r19
    5dfa:	e4 0b       	sbc	r30, r20
    5dfc:	f5 0b       	sbc	r31, r21

00005dfe <__udivmodsi4_ep>:
    5dfe:	66 1f       	adc	r22, r22
    5e00:	77 1f       	adc	r23, r23
    5e02:	88 1f       	adc	r24, r24
    5e04:	99 1f       	adc	r25, r25
    5e06:	1a 94       	dec	r1
    5e08:	69 f7       	brne	.-38     	; 0x5de4 <__udivmodsi4_loop>
    5e0a:	60 95       	com	r22
    5e0c:	70 95       	com	r23
    5e0e:	80 95       	com	r24
    5e10:	90 95       	com	r25
    5e12:	9b 01       	movw	r18, r22
    5e14:	ac 01       	movw	r20, r24
    5e16:	bd 01       	movw	r22, r26
    5e18:	cf 01       	movw	r24, r30
    5e1a:	08 95       	ret

00005e1c <__udivmodhi4>:
    5e1c:	aa 1b       	sub	r26, r26
    5e1e:	bb 1b       	sub	r27, r27
    5e20:	51 e1       	ldi	r21, 0x11	; 17
    5e22:	07 c0       	rjmp	.+14     	; 0x5e32 <__udivmodhi4_ep>

00005e24 <__udivmodhi4_loop>:
    5e24:	aa 1f       	adc	r26, r26
    5e26:	bb 1f       	adc	r27, r27
    5e28:	a6 17       	cp	r26, r22
    5e2a:	b7 07       	cpc	r27, r23
    5e2c:	10 f0       	brcs	.+4      	; 0x5e32 <__udivmodhi4_ep>
    5e2e:	a6 1b       	sub	r26, r22
    5e30:	b7 0b       	sbc	r27, r23

00005e32 <__udivmodhi4_ep>:
    5e32:	88 1f       	adc	r24, r24
    5e34:	99 1f       	adc	r25, r25
    5e36:	5a 95       	dec	r21
    5e38:	a9 f7       	brne	.-22     	; 0x5e24 <__udivmodhi4_loop>
    5e3a:	80 95       	com	r24
    5e3c:	90 95       	com	r25
    5e3e:	bc 01       	movw	r22, r24
    5e40:	cd 01       	movw	r24, r26
    5e42:	08 95       	ret

00005e44 <__prologue_saves__>:
    5e44:	2f 92       	push	r2
    5e46:	3f 92       	push	r3
    5e48:	4f 92       	push	r4
    5e4a:	5f 92       	push	r5
    5e4c:	6f 92       	push	r6
    5e4e:	7f 92       	push	r7
    5e50:	8f 92       	push	r8
    5e52:	9f 92       	push	r9
    5e54:	af 92       	push	r10
    5e56:	bf 92       	push	r11
    5e58:	cf 92       	push	r12
    5e5a:	df 92       	push	r13
    5e5c:	ef 92       	push	r14
    5e5e:	ff 92       	push	r15
    5e60:	0f 93       	push	r16
    5e62:	1f 93       	push	r17
    5e64:	cf 93       	push	r28
    5e66:	df 93       	push	r29
    5e68:	cd b7       	in	r28, 0x3d	; 61
    5e6a:	de b7       	in	r29, 0x3e	; 62
    5e6c:	ca 1b       	sub	r28, r26
    5e6e:	db 0b       	sbc	r29, r27
    5e70:	0f b6       	in	r0, 0x3f	; 63
    5e72:	f8 94       	cli
    5e74:	de bf       	out	0x3e, r29	; 62
    5e76:	0f be       	out	0x3f, r0	; 63
    5e78:	cd bf       	out	0x3d, r28	; 61
    5e7a:	09 94       	ijmp

00005e7c <__epilogue_restores__>:
    5e7c:	2a 88       	ldd	r2, Y+18	; 0x12
    5e7e:	39 88       	ldd	r3, Y+17	; 0x11
    5e80:	48 88       	ldd	r4, Y+16	; 0x10
    5e82:	5f 84       	ldd	r5, Y+15	; 0x0f
    5e84:	6e 84       	ldd	r6, Y+14	; 0x0e
    5e86:	7d 84       	ldd	r7, Y+13	; 0x0d
    5e88:	8c 84       	ldd	r8, Y+12	; 0x0c
    5e8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    5e8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    5e8e:	b9 84       	ldd	r11, Y+9	; 0x09
    5e90:	c8 84       	ldd	r12, Y+8	; 0x08
    5e92:	df 80       	ldd	r13, Y+7	; 0x07
    5e94:	ee 80       	ldd	r14, Y+6	; 0x06
    5e96:	fd 80       	ldd	r15, Y+5	; 0x05
    5e98:	0c 81       	ldd	r16, Y+4	; 0x04
    5e9a:	1b 81       	ldd	r17, Y+3	; 0x03
    5e9c:	aa 81       	ldd	r26, Y+2	; 0x02
    5e9e:	b9 81       	ldd	r27, Y+1	; 0x01
    5ea0:	ce 0f       	add	r28, r30
    5ea2:	d1 1d       	adc	r29, r1
    5ea4:	0f b6       	in	r0, 0x3f	; 63
    5ea6:	f8 94       	cli
    5ea8:	de bf       	out	0x3e, r29	; 62
    5eaa:	0f be       	out	0x3f, r0	; 63
    5eac:	cd bf       	out	0x3d, r28	; 61
    5eae:	ed 01       	movw	r28, r26
    5eb0:	08 95       	ret

00005eb2 <_exit>:
    5eb2:	f8 94       	cli

00005eb4 <__stop_program>:
    5eb4:	ff cf       	rjmp	.-2      	; 0x5eb4 <__stop_program>
