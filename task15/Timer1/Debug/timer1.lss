
DIO_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00004a7a  00004b0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800088  00800088  00004b36  2**0
                  ALLOC
  3 .stab         00004eb4  00000000  00000000  00004b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002526  00000000  00000000  000099ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000bf12  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000c052  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000c1c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000de0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ecf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000faa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000fc04  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000fe91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001065f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d3 0c 	jmp	0x19a6	; 0x19a6 <__vector_1>
       8:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__vector_2>
       c:	0c 94 39 0d 	jmp	0x1a72	; 0x1a72 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 d3 06 	jmp	0xda6	; 0xda6 <__vector_10>
      2c:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b8 21 	call	0x4370	; 0x4370 <main>
      8a:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5a 22 	jmp	0x44b4	; 0x44b4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a4 e6       	ldi	r26, 0x64	; 100
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 76 22 	jmp	0x44ec	; 0x44ec <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5a 22 	jmp	0x44b4	; 0x44b4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	84 e6       	ldi	r24, 0x64	; 100
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 76 22 	jmp	0x44ec	; 0x44ec <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6a 22 	jmp	0x44d4	; 0x44d4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 86 22 	jmp	0x450c	; 0x450c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMERS_voidTimer0Init>:

/* Global Pointer To Function for TIMER0 CTC */
static void(*TIMERS_pfTIMER0CTC)(void) = NULL;


void TIMERS_voidTimer0Init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	#elif OC0_MODE == Non_Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
	#endif
	#elif TIMER_MODE == PWM_FAST
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM00_PIN);
     b4e:	a3 e5       	ldi	r26, 0x53	; 83
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e3 e5       	ldi	r30, 0x53	; 83
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_WGM01_PIN);
     b5c:	a3 e5       	ldi	r26, 0x53	; 83
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e3 e5       	ldi	r30, 0x53	; 83
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	88 60       	ori	r24, 0x08	; 8
     b68:	8c 93       	st	X, r24
	#if OC0_MODE == Inverting
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM01);
     b6a:	a3 e5       	ldi	r26, 0x53	; 83
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e3 e5       	ldi	r30, 0x53	; 83
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_COM00);
     b78:	a3 e5       	ldi	r26, 0x53	; 83
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e3 e5       	ldi	r30, 0x53	; 83
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 61       	ori	r24, 0x10	; 16
     b84:	8c 93       	st	X, r24
	#endif
	#endif
	
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS00_PIN);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	8e 7f       	andi	r24, 0xFE	; 254
     b92:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS01_PIN);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR0_REG, TIMERS_TCCR0_CS02_PIN);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8b 7f       	andi	r24, 0xFB	; 251
     bae:	8c 93       	st	X, r24
}
     bb0:	cf 91       	pop	r28
     bb2:	df 91       	pop	r29
     bb4:	08 95       	ret

00000bb6 <TIMERS_voidTimer1Init>:

void TIMERS_voidTimer1Init(void){
     bb6:	df 93       	push	r29
     bb8:	cf 93       	push	r28
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
	/* Select Timer1 Mode => PWM Fact(14) */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM11);
     bbe:	af e4       	ldi	r26, 0x4F	; 79
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	ef e4       	ldi	r30, 0x4F	; 79
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	82 60       	ori	r24, 0x02	; 2
     bca:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_WGM10);
     bcc:	af e4       	ldi	r26, 0x4F	; 79
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ef e4       	ldi	r30, 0x4F	; 79
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	8e 7f       	andi	r24, 0xFE	; 254
     bd8:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM12);
     bda:	ae e4       	ldi	r26, 0x4E	; 78
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ee e4       	ldi	r30, 0x4E	; 78
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 60       	ori	r24, 0x08	; 8
     be6:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMER1_WGM13);
     be8:	ae e4       	ldi	r26, 0x4E	; 78
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	ee e4       	ldi	r30, 0x4E	; 78
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 61       	ori	r24, 0x10	; 16
     bf4:	8c 93       	st	X, r24
	
	/* Select HW Action on OCA1 pin => Non- Inverting */
	SET_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A1);
     bf6:	af e4       	ldi	r26, 0x4F	; 79
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e4       	ldi	r30, 0x4F	; 79
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1A_REG, TIMER1_COM1A0);
     c04:	af e4       	ldi	r26, 0x4F	; 79
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ef e4       	ldi	r30, 0x4F	; 79
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8f 7b       	andi	r24, 0xBF	; 191
     c10:	8c 93       	st	X, r24
	
	/* Set Top Value in ICR1 */
	TIMERS_u16_ICR1_REG = 19999;
     c12:	e6 e4       	ldi	r30, 0x46	; 70
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	8f e1       	ldi	r24, 0x1F	; 31
     c18:	9e e4       	ldi	r25, 0x4E	; 78
     c1a:	91 83       	std	Z+1, r25	; 0x01
     c1c:	80 83       	st	Z, r24
	
	/* Set Angle Of Servo Motor */
	TIMERS_u16_OCR1A_REG = 499;
     c1e:	ea e4       	ldi	r30, 0x4A	; 74
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	83 ef       	ldi	r24, 0xF3	; 243
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	80 83       	st	Z, r24
	
	/* Set Prescaler Value => clk / 8 */
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS00_PIN);
     c2a:	ae e4       	ldi	r26, 0x4E	; 78
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	ee e4       	ldi	r30, 0x4E	; 78
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	8e 7f       	andi	r24, 0xFE	; 254
     c36:	8c 93       	st	X, r24
	SET_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS01_PIN);
     c38:	ae e4       	ldi	r26, 0x4E	; 78
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	ee e4       	ldi	r30, 0x4E	; 78
     c3e:	f0 e0       	ldi	r31, 0x00	; 0
     c40:	80 81       	ld	r24, Z
     c42:	82 60       	ori	r24, 0x02	; 2
     c44:	8c 93       	st	X, r24
	CLR_BIT(TIMERS_u8_TCCR1B_REG, TIMERS_TCCR0_CS02_PIN);
     c46:	ae e4       	ldi	r26, 0x4E	; 78
     c48:	b0 e0       	ldi	r27, 0x00	; 0
     c4a:	ee e4       	ldi	r30, 0x4E	; 78
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	80 81       	ld	r24, Z
     c50:	8b 7f       	andi	r24, 0xFB	; 251
     c52:	8c 93       	st	X, r24
}
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <TIMERS_u8TIMER0SetCallBack>:


u8 TIMERS_u8TIMER0SetCallBack(void(*Copy_pf)(void)){
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	00 d0       	rcall	.+0      	; 0xc60 <TIMERS_u8TIMER0SetCallBack+0x6>
     c60:	0f 92       	push	r0
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
     c66:	9b 83       	std	Y+3, r25	; 0x03
     c68:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
     c6e:	8a 81       	ldd	r24, Y+2	; 0x02
     c70:	9b 81       	ldd	r25, Y+3	; 0x03
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	39 f0       	breq	.+14     	; 0xc84 <TIMERS_u8TIMER0SetCallBack+0x2a>
		TIMERS_pfTIMER0OVF = Copy_pf;
     c76:	8a 81       	ldd	r24, Y+2	; 0x02
     c78:	9b 81       	ldd	r25, Y+3	; 0x03
     c7a:	90 93 89 00 	sts	0x0089, r25
     c7e:	80 93 88 00 	sts	0x0088, r24
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <TIMERS_u8TIMER0SetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     c84:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     c86:	89 81       	ldd	r24, Y+1	; 0x01
}
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <TIMERS_u8TIMER0CTCSetCallBack>:


u8 TIMERS_u8TIMER0CTCSetCallBack(void(*Copy_pf)(void)){
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <TIMERS_u8TIMER0CTCSetCallBack+0x6>
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	9b 83       	std	Y+3, r25	; 0x03
     ca2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL){
     ca8:	8a 81       	ldd	r24, Y+2	; 0x02
     caa:	9b 81       	ldd	r25, Y+3	; 0x03
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	39 f0       	breq	.+14     	; 0xcbe <TIMERS_u8TIMER0CTCSetCallBack+0x2a>
		TIMERS_pfTIMER0CTC = Copy_pf;
     cb0:	8a 81       	ldd	r24, Y+2	; 0x02
     cb2:	9b 81       	ldd	r25, Y+3	; 0x03
     cb4:	90 93 8b 00 	sts	0x008B, r25
     cb8:	80 93 8a 00 	sts	0x008A, r24
     cbc:	01 c0       	rjmp	.+2      	; 0xcc0 <TIMERS_u8TIMER0CTCSetCallBack+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
     cbe:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
}
     cc2:	0f 90       	pop	r0
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	cf 91       	pop	r28
     cca:	df 91       	pop	r29
     ccc:	08 95       	ret

00000cce <TIMERS_voidTIMER0SetCompareMatchValue>:


void TIMERS_voidTIMER0SetCompareMatchValue(u8 Copy_u8OCR0Value){
     cce:	df 93       	push	r29
     cd0:	cf 93       	push	r28
     cd2:	0f 92       	push	r0
     cd4:	cd b7       	in	r28, 0x3d	; 61
     cd6:	de b7       	in	r29, 0x3e	; 62
     cd8:	89 83       	std	Y+1, r24	; 0x01

	TIMERS_u8_OCR0_REG = Copy_u8OCR0Value;
     cda:	ec e5       	ldi	r30, 0x5C	; 92
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	80 83       	st	Z, r24
	
}
     ce2:	0f 90       	pop	r0
     ce4:	cf 91       	pop	r28
     ce6:	df 91       	pop	r29
     ce8:	08 95       	ret

00000cea <TIMERS_voidTIMER1SetCompareMatchValueA>:

void TIMERS_voidTIMER1SetCompareMatchValueA(u16 Copy_u8OCR1Value){
     cea:	df 93       	push	r29
     cec:	cf 93       	push	r28
     cee:	00 d0       	rcall	.+0      	; 0xcf0 <TIMERS_voidTIMER1SetCompareMatchValueA+0x6>
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	9a 83       	std	Y+2, r25	; 0x02
     cf6:	89 83       	std	Y+1, r24	; 0x01
	TIMERS_u16_OCR1A_REG = Copy_u8OCR1Value;
     cf8:	ea e4       	ldi	r30, 0x4A	; 74
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	9a 81       	ldd	r25, Y+2	; 0x02
     d00:	91 83       	std	Z+1, r25	; 0x01
     d02:	80 83       	st	Z, r24
}
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <__vector_11>:

/********************** ISR Of Timer0 Overflow ************************/

void __vector_11(void)		__attribute__((signal));

void __vector_11(void){
     d0e:	1f 92       	push	r1
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	2f 93       	push	r18
     d1a:	3f 93       	push	r19
     d1c:	4f 93       	push	r20
     d1e:	5f 93       	push	r21
     d20:	6f 93       	push	r22
     d22:	7f 93       	push	r23
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	af 93       	push	r26
     d2a:	bf 93       	push	r27
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
     d30:	df 93       	push	r29
     d32:	cf 93       	push	r28
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterOVF = 0;
	Local_u16CounterOVF++;
     d38:	80 91 8c 00 	lds	r24, 0x008C
     d3c:	90 91 8d 00 	lds	r25, 0x008D
     d40:	01 96       	adiw	r24, 0x01	; 1
     d42:	90 93 8d 00 	sts	0x008D, r25
     d46:	80 93 8c 00 	sts	0x008C, r24
	if(Local_u16CounterOVF == 3907){
     d4a:	80 91 8c 00 	lds	r24, 0x008C
     d4e:	90 91 8d 00 	lds	r25, 0x008D
     d52:	2f e0       	ldi	r18, 0x0F	; 15
     d54:	83 34       	cpi	r24, 0x43	; 67
     d56:	92 07       	cpc	r25, r18
     d58:	99 f4       	brne	.+38     	; 0xd80 <__vector_11+0x72>
		/* Update Preload Value */
		TIMERS_u8_TCNT0_REG = 192;
     d5a:	e2 e5       	ldi	r30, 0x52	; 82
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 ec       	ldi	r24, 0xC0	; 192
     d60:	80 83       	st	Z, r24
		
		/* Clear Overflow Counter */
		Local_u16CounterOVF = 0;
     d62:	10 92 8d 00 	sts	0x008D, r1
     d66:	10 92 8c 00 	sts	0x008C, r1
		
		/* Call App Function */
		if(TIMERS_pfTIMER0OVF != NULL){
     d6a:	80 91 88 00 	lds	r24, 0x0088
     d6e:	90 91 89 00 	lds	r25, 0x0089
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	29 f0       	breq	.+10     	; 0xd80 <__vector_11+0x72>
			TIMERS_pfTIMER0OVF();
     d76:	e0 91 88 00 	lds	r30, 0x0088
     d7a:	f0 91 89 00 	lds	r31, 0x0089
     d7e:	09 95       	icall
		}
	}
}
     d80:	cf 91       	pop	r28
     d82:	df 91       	pop	r29
     d84:	ff 91       	pop	r31
     d86:	ef 91       	pop	r30
     d88:	bf 91       	pop	r27
     d8a:	af 91       	pop	r26
     d8c:	9f 91       	pop	r25
     d8e:	8f 91       	pop	r24
     d90:	7f 91       	pop	r23
     d92:	6f 91       	pop	r22
     d94:	5f 91       	pop	r21
     d96:	4f 91       	pop	r20
     d98:	3f 91       	pop	r19
     d9a:	2f 91       	pop	r18
     d9c:	0f 90       	pop	r0
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	0f 90       	pop	r0
     da2:	1f 90       	pop	r1
     da4:	18 95       	reti

00000da6 <__vector_10>:

/********************** ISR Of Timer0 CTC ************************/

void __vector_10(void)		__attribute__((signal));

void __vector_10(void){
     da6:	1f 92       	push	r1
     da8:	0f 92       	push	r0
     daa:	0f b6       	in	r0, 0x3f	; 63
     dac:	0f 92       	push	r0
     dae:	11 24       	eor	r1, r1
     db0:	2f 93       	push	r18
     db2:	3f 93       	push	r19
     db4:	4f 93       	push	r20
     db6:	5f 93       	push	r21
     db8:	6f 93       	push	r22
     dba:	7f 93       	push	r23
     dbc:	8f 93       	push	r24
     dbe:	9f 93       	push	r25
     dc0:	af 93       	push	r26
     dc2:	bf 93       	push	r27
     dc4:	ef 93       	push	r30
     dc6:	ff 93       	push	r31
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16CounterCTC = 0;
	Local_u16CounterCTC++;
     dd0:	80 91 8e 00 	lds	r24, 0x008E
     dd4:	90 91 8f 00 	lds	r25, 0x008F
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	90 93 8f 00 	sts	0x008F, r25
     dde:	80 93 8e 00 	sts	0x008E, r24
	if(Local_u16CounterCTC == 10000){
     de2:	80 91 8e 00 	lds	r24, 0x008E
     de6:	90 91 8f 00 	lds	r25, 0x008F
     dea:	27 e2       	ldi	r18, 0x27	; 39
     dec:	80 31       	cpi	r24, 0x10	; 16
     dee:	92 07       	cpc	r25, r18
     df0:	79 f4       	brne	.+30     	; 0xe10 <__vector_10+0x6a>
		Local_u16CounterCTC = 0;
     df2:	10 92 8f 00 	sts	0x008F, r1
     df6:	10 92 8e 00 	sts	0x008E, r1
		/* Call App Function */
		if(TIMERS_pfTIMER0CTC != NULL){
     dfa:	80 91 8a 00 	lds	r24, 0x008A
     dfe:	90 91 8b 00 	lds	r25, 0x008B
     e02:	00 97       	sbiw	r24, 0x00	; 0
     e04:	29 f0       	breq	.+10     	; 0xe10 <__vector_10+0x6a>
			TIMERS_pfTIMER0CTC();
     e06:	e0 91 8a 00 	lds	r30, 0x008A
     e0a:	f0 91 8b 00 	lds	r31, 0x008B
     e0e:	09 95       	icall
		}
	}
}
     e10:	cf 91       	pop	r28
     e12:	df 91       	pop	r29
     e14:	ff 91       	pop	r31
     e16:	ef 91       	pop	r30
     e18:	bf 91       	pop	r27
     e1a:	af 91       	pop	r26
     e1c:	9f 91       	pop	r25
     e1e:	8f 91       	pop	r24
     e20:	7f 91       	pop	r23
     e22:	6f 91       	pop	r22
     e24:	5f 91       	pop	r21
     e26:	4f 91       	pop	r20
     e28:	3f 91       	pop	r19
     e2a:	2f 91       	pop	r18
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <Switch_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";
#include "Switch_Private.h";
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){
     e36:	df 93       	push	r29
     e38:	cf 93       	push	r28
     e3a:	00 d0       	rcall	.+0      	; 0xe3c <Switch_Init+0x6>
     e3c:	00 d0       	rcall	.+0      	; 0xe3e <Switch_Init+0x8>
     e3e:	0f 92       	push	r0
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	9c 83       	std	Y+4, r25	; 0x04
     e46:	8b 83       	std	Y+3, r24	; 0x03
     e48:	6d 83       	std	Y+5, r22	; 0x05

	for(int i = 0; i < Switchf_Num; i++){
     e4a:	1a 82       	std	Y+2, r1	; 0x02
     e4c:	19 82       	std	Y+1, r1	; 0x01
     e4e:	50 c0       	rjmp	.+160    	; 0xef0 <Switch_Init+0xba>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
     e50:	29 81       	ldd	r18, Y+1	; 0x01
     e52:	3a 81       	ldd	r19, Y+2	; 0x02
     e54:	c9 01       	movw	r24, r18
     e56:	88 0f       	add	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	28 0f       	add	r18, r24
     e5c:	39 1f       	adc	r19, r25
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	9c 81       	ldd	r25, Y+4	; 0x04
     e62:	fc 01       	movw	r30, r24
     e64:	e2 0f       	add	r30, r18
     e66:	f3 1f       	adc	r31, r19
     e68:	40 81       	ld	r20, Z
     e6a:	29 81       	ldd	r18, Y+1	; 0x01
     e6c:	3a 81       	ldd	r19, Y+2	; 0x02
     e6e:	c9 01       	movw	r24, r18
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	28 0f       	add	r18, r24
     e76:	39 1f       	adc	r19, r25
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	9c 81       	ldd	r25, Y+4	; 0x04
     e7c:	fc 01       	movw	r30, r24
     e7e:	e2 0f       	add	r30, r18
     e80:	f3 1f       	adc	r31, r19
     e82:	91 81       	ldd	r25, Z+1	; 0x01
     e84:	84 2f       	mov	r24, r20
     e86:	69 2f       	mov	r22, r25
     e88:	40 e0       	ldi	r20, 0x00	; 0
     e8a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
     e8e:	29 81       	ldd	r18, Y+1	; 0x01
     e90:	3a 81       	ldd	r19, Y+2	; 0x02
     e92:	c9 01       	movw	r24, r18
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	28 0f       	add	r18, r24
     e9a:	39 1f       	adc	r19, r25
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	fc 01       	movw	r30, r24
     ea2:	e2 0f       	add	r30, r18
     ea4:	f3 1f       	adc	r31, r19
     ea6:	50 81       	ld	r21, Z
     ea8:	29 81       	ldd	r18, Y+1	; 0x01
     eaa:	3a 81       	ldd	r19, Y+2	; 0x02
     eac:	c9 01       	movw	r24, r18
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	28 0f       	add	r18, r24
     eb4:	39 1f       	adc	r19, r25
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	fc 01       	movw	r30, r24
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	41 81       	ldd	r20, Z+1	; 0x01
     ec2:	29 81       	ldd	r18, Y+1	; 0x01
     ec4:	3a 81       	ldd	r19, Y+2	; 0x02
     ec6:	c9 01       	movw	r24, r18
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	28 0f       	add	r18, r24
     ece:	39 1f       	adc	r19, r25
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	fc 01       	movw	r30, r24
     ed6:	e2 0f       	add	r30, r18
     ed8:	f3 1f       	adc	r31, r19
     eda:	92 81       	ldd	r25, Z+2	; 0x02
     edc:	85 2f       	mov	r24, r21
     ede:	64 2f       	mov	r22, r20
     ee0:	49 2f       	mov	r20, r25
     ee2:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
#include "Switch_Config.h";


void Switch_Init(Switch * Arr, u8 Switchf_Num){

	for(int i = 0; i < Switchf_Num; i++){
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	9a 83       	std	Y+2, r25	; 0x02
     eee:	89 83       	std	Y+1, r24	; 0x01
     ef0:	8d 81       	ldd	r24, Y+5	; 0x05
     ef2:	28 2f       	mov	r18, r24
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	89 81       	ldd	r24, Y+1	; 0x01
     ef8:	9a 81       	ldd	r25, Y+2	; 0x02
     efa:	82 17       	cp	r24, r18
     efc:	93 07       	cpc	r25, r19
     efe:	0c f4       	brge	.+2      	; 0xf02 <Switch_Init+0xcc>
     f00:	a7 cf       	rjmp	.-178    	; 0xe50 <Switch_Init+0x1a>
		DIO_u8SetPinDirection(Arr[i].Switch_Port, Arr[i].Switch_Pin, DIO_u8_INPUT);
		DIO_u8SetPinValue(Arr[i].Switch_Port, Arr[i].Switch_Pin, Arr[i].Switch_State);
	}

}
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <Switch_GetValue>:


void Switch_GetValue(Switch *Arr ,u8 *ptr_Value){
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <Switch_GetValue+0x6>
     f18:	00 d0       	rcall	.+0      	; 0xf1a <Switch_GetValue+0x8>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
     f22:	7c 83       	std	Y+4, r23	; 0x04
     f24:	6b 83       	std	Y+3, r22	; 0x03
	DIO_u8GetPinValue(Arr->Switch_Port, Arr->Switch_Pin, ptr_Value);
     f26:	e9 81       	ldd	r30, Y+1	; 0x01
     f28:	fa 81       	ldd	r31, Y+2	; 0x02
     f2a:	80 81       	ld	r24, Z
     f2c:	e9 81       	ldd	r30, Y+1	; 0x01
     f2e:	fa 81       	ldd	r31, Y+2	; 0x02
     f30:	91 81       	ldd	r25, Z+1	; 0x01
     f32:	2b 81       	ldd	r18, Y+3	; 0x03
     f34:	3c 81       	ldd	r19, Y+4	; 0x04
     f36:	69 2f       	mov	r22, r25
     f38:	a9 01       	movw	r20, r18
     f3a:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_u8GetPinValue>
}
     f3e:	0f 90       	pop	r0
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	cf 91       	pop	r28
     f48:	df 91       	pop	r29
     f4a:	08 95       	ret

00000f4c <LCD_setPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void LCD_setPinDirection(u8 port_num, u8 pin_num, LCD_PinDirectionType direction)
{
     f4c:	df 93       	push	r29
     f4e:	cf 93       	push	r28
     f50:	00 d0       	rcall	.+0      	; 0xf52 <LCD_setPinDirection+0x6>
     f52:	00 d0       	rcall	.+0      	; 0xf54 <LCD_setPinDirection+0x8>
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	89 83       	std	Y+1, r24	; 0x01
     f5c:	6a 83       	std	Y+2, r22	; 0x02
     f5e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f60:	8a 81       	ldd	r24, Y+2	; 0x02
     f62:	88 30       	cpi	r24, 0x08	; 8
     f64:	08 f0       	brcs	.+2      	; 0xf68 <LCD_setPinDirection+0x1c>
     f66:	d5 c0       	rjmp	.+426    	; 0x1112 <LCD_setPinDirection+0x1c6>
     f68:	89 81       	ldd	r24, Y+1	; 0x01
     f6a:	84 30       	cpi	r24, 0x04	; 4
     f6c:	08 f0       	brcs	.+2      	; 0xf70 <LCD_setPinDirection+0x24>
     f6e:	d1 c0       	rjmp	.+418    	; 0x1112 <LCD_setPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f70:	89 81       	ldd	r24, Y+1	; 0x01
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	3d 83       	std	Y+5, r19	; 0x05
     f78:	2c 83       	std	Y+4, r18	; 0x04
     f7a:	8c 81       	ldd	r24, Y+4	; 0x04
     f7c:	9d 81       	ldd	r25, Y+5	; 0x05
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	91 05       	cpc	r25, r1
     f82:	09 f4       	brne	.+2      	; 0xf86 <LCD_setPinDirection+0x3a>
     f84:	43 c0       	rjmp	.+134    	; 0x100c <LCD_setPinDirection+0xc0>
     f86:	2c 81       	ldd	r18, Y+4	; 0x04
     f88:	3d 81       	ldd	r19, Y+5	; 0x05
     f8a:	22 30       	cpi	r18, 0x02	; 2
     f8c:	31 05       	cpc	r19, r1
     f8e:	2c f4       	brge	.+10     	; 0xf9a <LCD_setPinDirection+0x4e>
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	9d 81       	ldd	r25, Y+5	; 0x05
     f94:	00 97       	sbiw	r24, 0x00	; 0
     f96:	71 f0       	breq	.+28     	; 0xfb4 <LCD_setPinDirection+0x68>
     f98:	bc c0       	rjmp	.+376    	; 0x1112 <LCD_setPinDirection+0x1c6>
     f9a:	2c 81       	ldd	r18, Y+4	; 0x04
     f9c:	3d 81       	ldd	r19, Y+5	; 0x05
     f9e:	22 30       	cpi	r18, 0x02	; 2
     fa0:	31 05       	cpc	r19, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <LCD_setPinDirection+0x5a>
     fa4:	5f c0       	rjmp	.+190    	; 0x1064 <LCD_setPinDirection+0x118>
     fa6:	8c 81       	ldd	r24, Y+4	; 0x04
     fa8:	9d 81       	ldd	r25, Y+5	; 0x05
     faa:	83 30       	cpi	r24, 0x03	; 3
     fac:	91 05       	cpc	r25, r1
     fae:	09 f4       	brne	.+2      	; 0xfb2 <LCD_setPinDirection+0x66>
     fb0:	85 c0       	rjmp	.+266    	; 0x10bc <LCD_setPinDirection+0x170>
     fb2:	af c0       	rjmp	.+350    	; 0x1112 <LCD_setPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	a1 f4       	brne	.+40     	; 0xfe2 <LCD_setPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     fba:	aa e3       	ldi	r26, 0x3A	; 58
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	ea e3       	ldi	r30, 0x3A	; 58
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8a 81       	ldd	r24, Y+2	; 0x02
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <LCD_setPinDirection+0x8c>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <LCD_setPinDirection+0x88>
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	98 c0       	rjmp	.+304    	; 0x1112 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRA,pin_num);
     fe2:	aa e3       	ldi	r26, 0x3A	; 58
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	ea e3       	ldi	r30, 0x3A	; 58
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <LCD_setPinDirection+0xb4>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <LCD_setPinDirection+0xb0>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	83 c0       	rjmp	.+262    	; 0x1112 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    100c:	8b 81       	ldd	r24, Y+3	; 0x03
    100e:	81 30       	cpi	r24, 0x01	; 1
    1010:	a1 f4       	brne	.+40     	; 0x103a <LCD_setPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1012:	a7 e3       	ldi	r26, 0x37	; 55
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	e7 e3       	ldi	r30, 0x37	; 55
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	48 2f       	mov	r20, r24
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	28 2f       	mov	r18, r24
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	90 e0       	ldi	r25, 0x00	; 0
    1028:	02 2e       	mov	r0, r18
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <LCD_setPinDirection+0xe4>
    102c:	88 0f       	add	r24, r24
    102e:	99 1f       	adc	r25, r25
    1030:	0a 94       	dec	r0
    1032:	e2 f7       	brpl	.-8      	; 0x102c <LCD_setPinDirection+0xe0>
    1034:	84 2b       	or	r24, r20
    1036:	8c 93       	st	X, r24
    1038:	6c c0       	rjmp	.+216    	; 0x1112 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRB,pin_num);
    103a:	a7 e3       	ldi	r26, 0x37	; 55
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e7 e3       	ldi	r30, 0x37	; 55
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	48 2f       	mov	r20, r24
    1046:	8a 81       	ldd	r24, Y+2	; 0x02
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <LCD_setPinDirection+0x10c>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <LCD_setPinDirection+0x108>
    105c:	80 95       	com	r24
    105e:	84 23       	and	r24, r20
    1060:	8c 93       	st	X, r24
    1062:	57 c0       	rjmp	.+174    	; 0x1112 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	a1 f4       	brne	.+40     	; 0x1092 <LCD_setPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    106a:	a4 e3       	ldi	r26, 0x34	; 52
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	8a 81       	ldd	r24, Y+2	; 0x02
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	02 2e       	mov	r0, r18
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <LCD_setPinDirection+0x13c>
    1084:	88 0f       	add	r24, r24
    1086:	99 1f       	adc	r25, r25
    1088:	0a 94       	dec	r0
    108a:	e2 f7       	brpl	.-8      	; 0x1084 <LCD_setPinDirection+0x138>
    108c:	84 2b       	or	r24, r20
    108e:	8c 93       	st	X, r24
    1090:	40 c0       	rjmp	.+128    	; 0x1112 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRC,pin_num);
    1092:	a4 e3       	ldi	r26, 0x34	; 52
    1094:	b0 e0       	ldi	r27, 0x00	; 0
    1096:	e4 e3       	ldi	r30, 0x34	; 52
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	48 2f       	mov	r20, r24
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	28 2f       	mov	r18, r24
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	81 e0       	ldi	r24, 0x01	; 1
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	02 2e       	mov	r0, r18
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <LCD_setPinDirection+0x164>
    10ac:	88 0f       	add	r24, r24
    10ae:	99 1f       	adc	r25, r25
    10b0:	0a 94       	dec	r0
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <LCD_setPinDirection+0x160>
    10b4:	80 95       	com	r24
    10b6:	84 23       	and	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	2b c0       	rjmp	.+86     	; 0x1112 <LCD_setPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	81 30       	cpi	r24, 0x01	; 1
    10c0:	a1 f4       	brne	.+40     	; 0x10ea <LCD_setPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10c2:	a1 e3       	ldi	r26, 0x31	; 49
    10c4:	b0 e0       	ldi	r27, 0x00	; 0
    10c6:	e1 e3       	ldi	r30, 0x31	; 49
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	48 2f       	mov	r20, r24
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	02 2e       	mov	r0, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <LCD_setPinDirection+0x194>
    10dc:	88 0f       	add	r24, r24
    10de:	99 1f       	adc	r25, r25
    10e0:	0a 94       	dec	r0
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <LCD_setPinDirection+0x190>
    10e4:	84 2b       	or	r24, r20
    10e6:	8c 93       	st	X, r24
    10e8:	14 c0       	rjmp	.+40     	; 0x1112 <LCD_setPinDirection+0x1c6>
			}
			else
			{
				CLR_BIT(DDRD,pin_num);
    10ea:	a1 e3       	ldi	r26, 0x31	; 49
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e1 e3       	ldi	r30, 0x31	; 49
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <LCD_setPinDirection+0x1bc>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <LCD_setPinDirection+0x1b8>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <LCD_setPinValue>:

void LCD_setPinValue(u8 port_num, u8 pin_num, u8 value)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	00 d0       	rcall	.+0      	; 0x1128 <LCD_setPinValue+0x6>
    1128:	00 d0       	rcall	.+0      	; 0x112a <LCD_setPinValue+0x8>
    112a:	0f 92       	push	r0
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	89 83       	std	Y+1, r24	; 0x01
    1132:	6a 83       	std	Y+2, r22	; 0x02
    1134:	4b 83       	std	Y+3, r20	; 0x03

	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1136:	8a 81       	ldd	r24, Y+2	; 0x02
    1138:	88 30       	cpi	r24, 0x08	; 8
    113a:	08 f0       	brcs	.+2      	; 0x113e <LCD_setPinValue+0x1c>
    113c:	d5 c0       	rjmp	.+426    	; 0x12e8 <LCD_setPinValue+0x1c6>
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	84 30       	cpi	r24, 0x04	; 4
    1142:	08 f0       	brcs	.+2      	; 0x1146 <LCD_setPinValue+0x24>
    1144:	d1 c0       	rjmp	.+418    	; 0x12e8 <LCD_setPinValue+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1146:	89 81       	ldd	r24, Y+1	; 0x01
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	3d 83       	std	Y+5, r19	; 0x05
    114e:	2c 83       	std	Y+4, r18	; 0x04
    1150:	8c 81       	ldd	r24, Y+4	; 0x04
    1152:	9d 81       	ldd	r25, Y+5	; 0x05
    1154:	81 30       	cpi	r24, 0x01	; 1
    1156:	91 05       	cpc	r25, r1
    1158:	09 f4       	brne	.+2      	; 0x115c <LCD_setPinValue+0x3a>
    115a:	43 c0       	rjmp	.+134    	; 0x11e2 <LCD_setPinValue+0xc0>
    115c:	2c 81       	ldd	r18, Y+4	; 0x04
    115e:	3d 81       	ldd	r19, Y+5	; 0x05
    1160:	22 30       	cpi	r18, 0x02	; 2
    1162:	31 05       	cpc	r19, r1
    1164:	2c f4       	brge	.+10     	; 0x1170 <LCD_setPinValue+0x4e>
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	00 97       	sbiw	r24, 0x00	; 0
    116c:	71 f0       	breq	.+28     	; 0x118a <LCD_setPinValue+0x68>
    116e:	bc c0       	rjmp	.+376    	; 0x12e8 <LCD_setPinValue+0x1c6>
    1170:	2c 81       	ldd	r18, Y+4	; 0x04
    1172:	3d 81       	ldd	r19, Y+5	; 0x05
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	09 f4       	brne	.+2      	; 0x117c <LCD_setPinValue+0x5a>
    117a:	5f c0       	rjmp	.+190    	; 0x123a <LCD_setPinValue+0x118>
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	83 30       	cpi	r24, 0x03	; 3
    1182:	91 05       	cpc	r25, r1
    1184:	09 f4       	brne	.+2      	; 0x1188 <LCD_setPinValue+0x66>
    1186:	85 c0       	rjmp	.+266    	; 0x1292 <LCD_setPinValue+0x170>
    1188:	af c0       	rjmp	.+350    	; 0x12e8 <LCD_setPinValue+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	81 30       	cpi	r24, 0x01	; 1
    118e:	a1 f4       	brne	.+40     	; 0x11b8 <LCD_setPinValue+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1190:	ab e3       	ldi	r26, 0x3B	; 59
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	eb e3       	ldi	r30, 0x3B	; 59
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	48 2f       	mov	r20, r24
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	28 2f       	mov	r18, r24
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	02 2e       	mov	r0, r18
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <LCD_setPinValue+0x8c>
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	0a 94       	dec	r0
    11b0:	e2 f7       	brpl	.-8      	; 0x11aa <LCD_setPinValue+0x88>
    11b2:	84 2b       	or	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	98 c0       	rjmp	.+304    	; 0x12e8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTA,pin_num);
    11b8:	ab e3       	ldi	r26, 0x3B	; 59
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	eb e3       	ldi	r30, 0x3B	; 59
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <LCD_setPinValue+0xb4>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <LCD_setPinValue+0xb0>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	83 c0       	rjmp	.+262    	; 0x12e8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	a1 f4       	brne	.+40     	; 0x1210 <LCD_setPinValue+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11e8:	a8 e3       	ldi	r26, 0x38	; 56
    11ea:	b0 e0       	ldi	r27, 0x00	; 0
    11ec:	e8 e3       	ldi	r30, 0x38	; 56
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	80 81       	ld	r24, Z
    11f2:	48 2f       	mov	r20, r24
    11f4:	8a 81       	ldd	r24, Y+2	; 0x02
    11f6:	28 2f       	mov	r18, r24
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	81 e0       	ldi	r24, 0x01	; 1
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	02 2e       	mov	r0, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <LCD_setPinValue+0xe4>
    1202:	88 0f       	add	r24, r24
    1204:	99 1f       	adc	r25, r25
    1206:	0a 94       	dec	r0
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <LCD_setPinValue+0xe0>
    120a:	84 2b       	or	r24, r20
    120c:	8c 93       	st	X, r24
    120e:	6c c0       	rjmp	.+216    	; 0x12e8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTB,pin_num);
    1210:	a8 e3       	ldi	r26, 0x38	; 56
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e8 e3       	ldi	r30, 0x38	; 56
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	48 2f       	mov	r20, r24
    121c:	8a 81       	ldd	r24, Y+2	; 0x02
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	81 e0       	ldi	r24, 0x01	; 1
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 2e       	mov	r0, r18
    1228:	02 c0       	rjmp	.+4      	; 0x122e <LCD_setPinValue+0x10c>
    122a:	88 0f       	add	r24, r24
    122c:	99 1f       	adc	r25, r25
    122e:	0a 94       	dec	r0
    1230:	e2 f7       	brpl	.-8      	; 0x122a <LCD_setPinValue+0x108>
    1232:	80 95       	com	r24
    1234:	84 23       	and	r24, r20
    1236:	8c 93       	st	X, r24
    1238:	57 c0       	rjmp	.+174    	; 0x12e8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	a1 f4       	brne	.+40     	; 0x1268 <LCD_setPinValue+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1240:	a5 e3       	ldi	r26, 0x35	; 53
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e5 e3       	ldi	r30, 0x35	; 53
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	48 2f       	mov	r20, r24
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	02 2e       	mov	r0, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <LCD_setPinValue+0x13c>
    125a:	88 0f       	add	r24, r24
    125c:	99 1f       	adc	r25, r25
    125e:	0a 94       	dec	r0
    1260:	e2 f7       	brpl	.-8      	; 0x125a <LCD_setPinValue+0x138>
    1262:	84 2b       	or	r24, r20
    1264:	8c 93       	st	X, r24
    1266:	40 c0       	rjmp	.+128    	; 0x12e8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTC,pin_num);
    1268:	a5 e3       	ldi	r26, 0x35	; 53
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e5 e3       	ldi	r30, 0x35	; 53
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	48 2f       	mov	r20, r24
    1274:	8a 81       	ldd	r24, Y+2	; 0x02
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	02 2e       	mov	r0, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <LCD_setPinValue+0x164>
    1282:	88 0f       	add	r24, r24
    1284:	99 1f       	adc	r25, r25
    1286:	0a 94       	dec	r0
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <LCD_setPinValue+0x160>
    128a:	80 95       	com	r24
    128c:	84 23       	and	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	2b c0       	rjmp	.+86     	; 0x12e8 <LCD_setPinValue+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	a1 f4       	brne	.+40     	; 0x12c0 <LCD_setPinValue+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1298:	a2 e3       	ldi	r26, 0x32	; 50
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e2 e3       	ldi	r30, 0x32	; 50
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	48 2f       	mov	r20, r24
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	28 2f       	mov	r18, r24
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	81 e0       	ldi	r24, 0x01	; 1
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	02 2e       	mov	r0, r18
    12b0:	02 c0       	rjmp	.+4      	; 0x12b6 <LCD_setPinValue+0x194>
    12b2:	88 0f       	add	r24, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	0a 94       	dec	r0
    12b8:	e2 f7       	brpl	.-8      	; 0x12b2 <LCD_setPinValue+0x190>
    12ba:	84 2b       	or	r24, r20
    12bc:	8c 93       	st	X, r24
    12be:	14 c0       	rjmp	.+40     	; 0x12e8 <LCD_setPinValue+0x1c6>
			}
			else
			{
				CLR_BIT(PORTD,pin_num);
    12c0:	a2 e3       	ldi	r26, 0x32	; 50
    12c2:	b0 e0       	ldi	r27, 0x00	; 0
    12c4:	e2 e3       	ldi	r30, 0x32	; 50
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	48 2f       	mov	r20, r24
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
    12ce:	28 2f       	mov	r18, r24
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	02 2e       	mov	r0, r18
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <LCD_setPinValue+0x1bc>
    12da:	88 0f       	add	r24, r24
    12dc:	99 1f       	adc	r25, r25
    12de:	0a 94       	dec	r0
    12e0:	e2 f7       	brpl	.-8      	; 0x12da <LCD_setPinValue+0x1b8>
    12e2:	80 95       	com	r24
    12e4:	84 23       	and	r24, r20
    12e6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12e8:	0f 90       	pop	r0
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <LCD_getPinValue>:


u8 LCD_getPinValue(u8 port_num, u8 pin_num)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <LCD_getPinValue+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <LCD_getPinValue+0x8>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	8a 83       	std	Y+2, r24	; 0x02
    1308:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = LOGIC_LOW;
    130a:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	88 30       	cpi	r24, 0x08	; 8
    1310:	08 f0       	brcs	.+2      	; 0x1314 <LCD_getPinValue+0x1c>
    1312:	84 c0       	rjmp	.+264    	; 0x141c <LCD_getPinValue+0x124>
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	84 30       	cpi	r24, 0x04	; 4
    1318:	08 f0       	brcs	.+2      	; 0x131c <LCD_getPinValue+0x24>
    131a:	80 c0       	rjmp	.+256    	; 0x141c <LCD_getPinValue+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	3d 83       	std	Y+5, r19	; 0x05
    1324:	2c 83       	std	Y+4, r18	; 0x04
    1326:	4c 81       	ldd	r20, Y+4	; 0x04
    1328:	5d 81       	ldd	r21, Y+5	; 0x05
    132a:	41 30       	cpi	r20, 0x01	; 1
    132c:	51 05       	cpc	r21, r1
    132e:	79 f1       	breq	.+94     	; 0x138e <LCD_getPinValue+0x96>
    1330:	8c 81       	ldd	r24, Y+4	; 0x04
    1332:	9d 81       	ldd	r25, Y+5	; 0x05
    1334:	82 30       	cpi	r24, 0x02	; 2
    1336:	91 05       	cpc	r25, r1
    1338:	34 f4       	brge	.+12     	; 0x1346 <LCD_getPinValue+0x4e>
    133a:	2c 81       	ldd	r18, Y+4	; 0x04
    133c:	3d 81       	ldd	r19, Y+5	; 0x05
    133e:	21 15       	cp	r18, r1
    1340:	31 05       	cpc	r19, r1
    1342:	69 f0       	breq	.+26     	; 0x135e <LCD_getPinValue+0x66>
    1344:	6b c0       	rjmp	.+214    	; 0x141c <LCD_getPinValue+0x124>
    1346:	4c 81       	ldd	r20, Y+4	; 0x04
    1348:	5d 81       	ldd	r21, Y+5	; 0x05
    134a:	42 30       	cpi	r20, 0x02	; 2
    134c:	51 05       	cpc	r21, r1
    134e:	b9 f1       	breq	.+110    	; 0x13be <LCD_getPinValue+0xc6>
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	83 30       	cpi	r24, 0x03	; 3
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <LCD_getPinValue+0x64>
    135a:	49 c0       	rjmp	.+146    	; 0x13ee <LCD_getPinValue+0xf6>
    135c:	5f c0       	rjmp	.+190    	; 0x141c <LCD_getPinValue+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    135e:	e9 e3       	ldi	r30, 0x39	; 57
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	a9 01       	movw	r20, r18
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <LCD_getPinValue+0x7e>
    1372:	55 95       	asr	r21
    1374:	47 95       	ror	r20
    1376:	8a 95       	dec	r24
    1378:	e2 f7       	brpl	.-8      	; 0x1372 <LCD_getPinValue+0x7a>
    137a:	ca 01       	movw	r24, r20
    137c:	81 70       	andi	r24, 0x01	; 1
    137e:	90 70       	andi	r25, 0x00	; 0
    1380:	88 23       	and	r24, r24
    1382:	19 f0       	breq	.+6      	; 0x138a <LCD_getPinValue+0x92>
			{
				pin_value = LOGIC_HIGH;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	89 83       	std	Y+1, r24	; 0x01
    1388:	49 c0       	rjmp	.+146    	; 0x141c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    138a:	19 82       	std	Y+1, r1	; 0x01
    138c:	47 c0       	rjmp	.+142    	; 0x141c <LCD_getPinValue+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    138e:	e6 e3       	ldi	r30, 0x36	; 54
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	88 2f       	mov	r24, r24
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a9 01       	movw	r20, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <LCD_getPinValue+0xae>
    13a2:	55 95       	asr	r21
    13a4:	47 95       	ror	r20
    13a6:	8a 95       	dec	r24
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <LCD_getPinValue+0xaa>
    13aa:	ca 01       	movw	r24, r20
    13ac:	81 70       	andi	r24, 0x01	; 1
    13ae:	90 70       	andi	r25, 0x00	; 0
    13b0:	88 23       	and	r24, r24
    13b2:	19 f0       	breq	.+6      	; 0x13ba <LCD_getPinValue+0xc2>
			{
				pin_value = LOGIC_HIGH;
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	89 83       	std	Y+1, r24	; 0x01
    13b8:	31 c0       	rjmp	.+98     	; 0x141c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13ba:	19 82       	std	Y+1, r1	; 0x01
    13bc:	2f c0       	rjmp	.+94     	; 0x141c <LCD_getPinValue+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13be:	e3 e3       	ldi	r30, 0x33	; 51
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 2f       	mov	r24, r24
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	a9 01       	movw	r20, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <LCD_getPinValue+0xde>
    13d2:	55 95       	asr	r21
    13d4:	47 95       	ror	r20
    13d6:	8a 95       	dec	r24
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <LCD_getPinValue+0xda>
    13da:	ca 01       	movw	r24, r20
    13dc:	81 70       	andi	r24, 0x01	; 1
    13de:	90 70       	andi	r25, 0x00	; 0
    13e0:	88 23       	and	r24, r24
    13e2:	19 f0       	breq	.+6      	; 0x13ea <LCD_getPinValue+0xf2>
			{
				pin_value = LOGIC_HIGH;
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	89 83       	std	Y+1, r24	; 0x01
    13e8:	19 c0       	rjmp	.+50     	; 0x141c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13ea:	19 82       	std	Y+1, r1	; 0x01
    13ec:	17 c0       	rjmp	.+46     	; 0x141c <LCD_getPinValue+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13ee:	e0 e3       	ldi	r30, 0x30	; 48
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	88 2f       	mov	r24, r24
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a9 01       	movw	r20, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <LCD_getPinValue+0x10e>
    1402:	55 95       	asr	r21
    1404:	47 95       	ror	r20
    1406:	8a 95       	dec	r24
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <LCD_getPinValue+0x10a>
    140a:	ca 01       	movw	r24, r20
    140c:	81 70       	andi	r24, 0x01	; 1
    140e:	90 70       	andi	r25, 0x00	; 0
    1410:	88 23       	and	r24, r24
    1412:	19 f0       	breq	.+6      	; 0x141a <LCD_getPinValue+0x122>
			{
				pin_value = LOGIC_HIGH;
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01
    1418:	01 c0       	rjmp	.+2      	; 0x141c <LCD_getPinValue+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    141a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	cf 91       	pop	r28
    142a:	df 91       	pop	r29
    142c:	08 95       	ret

0000142e <LCD_setPortDirection>:


void LCD_setPortDirection(u8 port_num, LCD_PortDirectionType direction)
{
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	00 d0       	rcall	.+0      	; 0x1434 <LCD_setPortDirection+0x6>
    1434:	00 d0       	rcall	.+0      	; 0x1436 <LCD_setPortDirection+0x8>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	84 30       	cpi	r24, 0x04	; 4
    1442:	90 f5       	brcc	.+100    	; 0x14a8 <LCD_setPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	28 2f       	mov	r18, r24
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	3c 83       	std	Y+4, r19	; 0x04
    144c:	2b 83       	std	Y+3, r18	; 0x03
    144e:	8b 81       	ldd	r24, Y+3	; 0x03
    1450:	9c 81       	ldd	r25, Y+4	; 0x04
    1452:	81 30       	cpi	r24, 0x01	; 1
    1454:	91 05       	cpc	r25, r1
    1456:	d1 f0       	breq	.+52     	; 0x148c <LCD_setPortDirection+0x5e>
    1458:	2b 81       	ldd	r18, Y+3	; 0x03
    145a:	3c 81       	ldd	r19, Y+4	; 0x04
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	31 05       	cpc	r19, r1
    1460:	2c f4       	brge	.+10     	; 0x146c <LCD_setPortDirection+0x3e>
    1462:	8b 81       	ldd	r24, Y+3	; 0x03
    1464:	9c 81       	ldd	r25, Y+4	; 0x04
    1466:	00 97       	sbiw	r24, 0x00	; 0
    1468:	61 f0       	breq	.+24     	; 0x1482 <LCD_setPortDirection+0x54>
    146a:	1e c0       	rjmp	.+60     	; 0x14a8 <LCD_setPortDirection+0x7a>
    146c:	2b 81       	ldd	r18, Y+3	; 0x03
    146e:	3c 81       	ldd	r19, Y+4	; 0x04
    1470:	22 30       	cpi	r18, 0x02	; 2
    1472:	31 05       	cpc	r19, r1
    1474:	81 f0       	breq	.+32     	; 0x1496 <LCD_setPortDirection+0x68>
    1476:	8b 81       	ldd	r24, Y+3	; 0x03
    1478:	9c 81       	ldd	r25, Y+4	; 0x04
    147a:	83 30       	cpi	r24, 0x03	; 3
    147c:	91 05       	cpc	r25, r1
    147e:	81 f0       	breq	.+32     	; 0x14a0 <LCD_setPortDirection+0x72>
    1480:	13 c0       	rjmp	.+38     	; 0x14a8 <LCD_setPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1482:	ea e3       	ldi	r30, 0x3A	; 58
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 83       	st	Z, r24
    148a:	0e c0       	rjmp	.+28     	; 0x14a8 <LCD_setPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    148c:	e7 e3       	ldi	r30, 0x37	; 55
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	80 83       	st	Z, r24
    1494:	09 c0       	rjmp	.+18     	; 0x14a8 <LCD_setPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1496:	e4 e3       	ldi	r30, 0x34	; 52
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8a 81       	ldd	r24, Y+2	; 0x02
    149c:	80 83       	st	Z, r24
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <LCD_setPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14a0:	e1 e3       	ldi	r30, 0x31	; 49
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	80 83       	st	Z, r24
			break;
		}
	}
}
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	08 95       	ret

000014b6 <LCD_setPortValue>:


void LCD_setPortValue(u8 port_num, u8 value)
{
    14b6:	df 93       	push	r29
    14b8:	cf 93       	push	r28
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <LCD_setPortValue+0x6>
    14bc:	00 d0       	rcall	.+0      	; 0x14be <LCD_setPortValue+0x8>
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
    14c2:	89 83       	std	Y+1, r24	; 0x01
    14c4:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	84 30       	cpi	r24, 0x04	; 4
    14ca:	90 f5       	brcc	.+100    	; 0x1530 <LCD_setPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	3c 83       	std	Y+4, r19	; 0x04
    14d4:	2b 83       	std	Y+3, r18	; 0x03
    14d6:	8b 81       	ldd	r24, Y+3	; 0x03
    14d8:	9c 81       	ldd	r25, Y+4	; 0x04
    14da:	81 30       	cpi	r24, 0x01	; 1
    14dc:	91 05       	cpc	r25, r1
    14de:	d1 f0       	breq	.+52     	; 0x1514 <LCD_setPortValue+0x5e>
    14e0:	2b 81       	ldd	r18, Y+3	; 0x03
    14e2:	3c 81       	ldd	r19, Y+4	; 0x04
    14e4:	22 30       	cpi	r18, 0x02	; 2
    14e6:	31 05       	cpc	r19, r1
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <LCD_setPortValue+0x3e>
    14ea:	8b 81       	ldd	r24, Y+3	; 0x03
    14ec:	9c 81       	ldd	r25, Y+4	; 0x04
    14ee:	00 97       	sbiw	r24, 0x00	; 0
    14f0:	61 f0       	breq	.+24     	; 0x150a <LCD_setPortValue+0x54>
    14f2:	1e c0       	rjmp	.+60     	; 0x1530 <LCD_setPortValue+0x7a>
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	22 30       	cpi	r18, 0x02	; 2
    14fa:	31 05       	cpc	r19, r1
    14fc:	81 f0       	breq	.+32     	; 0x151e <LCD_setPortValue+0x68>
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	83 30       	cpi	r24, 0x03	; 3
    1504:	91 05       	cpc	r25, r1
    1506:	81 f0       	breq	.+32     	; 0x1528 <LCD_setPortValue+0x72>
    1508:	13 c0       	rjmp	.+38     	; 0x1530 <LCD_setPortValue+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    150a:	eb e3       	ldi	r30, 0x3B	; 59
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	8a 81       	ldd	r24, Y+2	; 0x02
    1510:	80 83       	st	Z, r24
    1512:	0e c0       	rjmp	.+28     	; 0x1530 <LCD_setPortValue+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1514:	e8 e3       	ldi	r30, 0x38	; 56
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	8a 81       	ldd	r24, Y+2	; 0x02
    151a:	80 83       	st	Z, r24
    151c:	09 c0       	rjmp	.+18     	; 0x1530 <LCD_setPortValue+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    151e:	e5 e3       	ldi	r30, 0x35	; 53
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	8a 81       	ldd	r24, Y+2	; 0x02
    1524:	80 83       	st	Z, r24
    1526:	04 c0       	rjmp	.+8      	; 0x1530 <LCD_setPortValue+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1528:	e2 e3       	ldi	r30, 0x32	; 50
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	8a 81       	ldd	r24, Y+2	; 0x02
    152e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <LCD_getPortValue>:


u8 LCD_getPortValue(u8 port_num)
{
    153e:	df 93       	push	r29
    1540:	cf 93       	push	r28
    1542:	00 d0       	rcall	.+0      	; 0x1544 <LCD_getPortValue+0x6>
    1544:	00 d0       	rcall	.+0      	; 0x1546 <LCD_getPortValue+0x8>
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	8a 83       	std	Y+2, r24	; 0x02
	u8 value = LOGIC_LOW;
    154c:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS)
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	84 30       	cpi	r24, 0x04	; 4
    1552:	90 f5       	brcc	.+100    	; 0x15b8 <LCD_getPortValue+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1554:	8a 81       	ldd	r24, Y+2	; 0x02
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	3c 83       	std	Y+4, r19	; 0x04
    155c:	2b 83       	std	Y+3, r18	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	91 05       	cpc	r25, r1
    1566:	d1 f0       	breq	.+52     	; 0x159c <LCD_getPortValue+0x5e>
    1568:	2b 81       	ldd	r18, Y+3	; 0x03
    156a:	3c 81       	ldd	r19, Y+4	; 0x04
    156c:	22 30       	cpi	r18, 0x02	; 2
    156e:	31 05       	cpc	r19, r1
    1570:	2c f4       	brge	.+10     	; 0x157c <LCD_getPortValue+0x3e>
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	00 97       	sbiw	r24, 0x00	; 0
    1578:	61 f0       	breq	.+24     	; 0x1592 <LCD_getPortValue+0x54>
    157a:	1e c0       	rjmp	.+60     	; 0x15b8 <LCD_getPortValue+0x7a>
    157c:	2b 81       	ldd	r18, Y+3	; 0x03
    157e:	3c 81       	ldd	r19, Y+4	; 0x04
    1580:	22 30       	cpi	r18, 0x02	; 2
    1582:	31 05       	cpc	r19, r1
    1584:	81 f0       	breq	.+32     	; 0x15a6 <LCD_getPortValue+0x68>
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	83 30       	cpi	r24, 0x03	; 3
    158c:	91 05       	cpc	r25, r1
    158e:	81 f0       	breq	.+32     	; 0x15b0 <LCD_getPortValue+0x72>
    1590:	13 c0       	rjmp	.+38     	; 0x15b8 <LCD_getPortValue+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1592:	e9 e3       	ldi	r30, 0x39	; 57
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	89 83       	std	Y+1, r24	; 0x01
    159a:	0e c0       	rjmp	.+28     	; 0x15b8 <LCD_getPortValue+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    159c:	e6 e3       	ldi	r30, 0x36	; 54
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	89 83       	std	Y+1, r24	; 0x01
    15a4:	09 c0       	rjmp	.+18     	; 0x15b8 <LCD_getPortValue+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    15a6:	e3 e3       	ldi	r30, 0x33	; 51
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	04 c0       	rjmp	.+8      	; 0x15b8 <LCD_getPortValue+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    15b0:	e0 e3       	ldi	r30, 0x30	; 48
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    15b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ba:	0f 90       	pop	r0
    15bc:	0f 90       	pop	r0
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	cf 91       	pop	r28
    15c4:	df 91       	pop	r29
    15c6:	08 95       	ret

000015c8 <EXTI_voidEnable_GIE>:
#include "../../LIB/BIT_MATH.h";
#include "../../LIB/STD_TYPES.h";


/* Enable GIE (Enable Global Interrupt) */
void EXTI_voidEnable_GIE(void){
    15c8:	df 93       	push	r29
    15ca:	cf 93       	push	r28
    15cc:	cd b7       	in	r28, 0x3d	; 61
    15ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    15d0:	af e5       	ldi	r26, 0x5F	; 95
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	ef e5       	ldi	r30, 0x5F	; 95
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	80 68       	ori	r24, 0x80	; 128
    15dc:	8c 93       	st	X, r24
}
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <EXTI_voidDisable_GIE>:

/* Disable GIE (Disable Global Interrupt) */
void EXTI_voidDisable_GIE(void){
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_SREG, EXTI_SREG_GIE_PIN);
    15ec:	af e5       	ldi	r26, 0x5F	; 95
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	ef e5       	ldi	r30, 0x5F	; 95
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	8f 77       	andi	r24, 0x7F	; 127
    15f8:	8c 93       	st	X, r24
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <setCallBack>:
/* Global Poiter */

void (*EXTI[3])(void) = {NULL, NULL, NULL};


void setCallBack(void(*ptf)(void), u8 EXTI_Index){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	00 d0       	rcall	.+0      	; 0x1606 <setCallBack+0x6>
    1606:	0f 92       	push	r0
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	6b 83       	std	Y+3, r22	; 0x03
	EXTI[EXTI_Index] = ptf;
    1612:	8b 81       	ldd	r24, Y+3	; 0x03
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	fc 01       	movw	r30, r24
    161e:	e0 57       	subi	r30, 0x70	; 112
    1620:	ff 4f       	sbci	r31, 0xFF	; 255
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	91 83       	std	Z+1, r25	; 0x01
    1628:	80 83       	st	Z, r24
}
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <EXTI0_LowLevel_MODE>:

/* EXTI0 Modes */
void EXTI0_LowLevel_MODE(void){
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    163e:	a5 e5       	ldi	r26, 0x55	; 85
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e5       	ldi	r30, 0x55	; 85
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	8e 7f       	andi	r24, 0xFE	; 254
    164a:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    164c:	a5 e5       	ldi	r26, 0x55	; 85
    164e:	b0 e0       	ldi	r27, 0x00	; 0
    1650:	e5 e5       	ldi	r30, 0x55	; 85
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	8d 7f       	andi	r24, 0xFD	; 253
    1658:	8c 93       	st	X, r24
}
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <EXTI0_FALLING_MODE>:

void EXTI0_FALLING_MODE(void){
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1668:	a5 e5       	ldi	r26, 0x55	; 85
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	e5 e5       	ldi	r30, 0x55	; 85
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	82 60       	ori	r24, 0x02	; 2
    1674:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    1676:	a5 e5       	ldi	r26, 0x55	; 85
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e5 e5       	ldi	r30, 0x55	; 85
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8e 7f       	andi	r24, 0xFE	; 254
    1682:	8c 93       	st	X, r24
}
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <EXTI0_AnyLogicalChange_MODE>:

void EXTI0_AnyLogicalChange_MODE(void){
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    1692:	a5 e5       	ldi	r26, 0x55	; 85
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e5 e5       	ldi	r30, 0x55	; 85
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8d 7f       	andi	r24, 0xFD	; 253
    169e:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    16a0:	a5 e5       	ldi	r26, 0x55	; 85
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e5 e5       	ldi	r30, 0x55	; 85
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	81 60       	ori	r24, 0x01	; 1
    16ac:	8c 93       	st	X, r24
}
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	08 95       	ret

000016b4 <EXTI0_RISING_MODE>:

void EXTI0_RISING_MODE(void){
    16b4:	df 93       	push	r29
    16b6:	cf 93       	push	r28
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC01);
    16bc:	a5 e5       	ldi	r26, 0x55	; 85
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e5 e5       	ldi	r30, 0x55	; 85
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	82 60       	ori	r24, 0x02	; 2
    16c8:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC00);
    16ca:	a5 e5       	ldi	r26, 0x55	; 85
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e5 e5       	ldi	r30, 0x55	; 85
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	81 60       	ori	r24, 0x01	; 1
    16d6:	8c 93       	st	X, r24
}
    16d8:	cf 91       	pop	r28
    16da:	df 91       	pop	r29
    16dc:	08 95       	ret

000016de <EXTI1_LowLevel_MODE>:

/**********************************************************/


/* EXTI1 Modes */
void EXTI1_LowLevel_MODE(void){
    16de:	df 93       	push	r29
    16e0:	cf 93       	push	r28
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    16e6:	a5 e5       	ldi	r26, 0x55	; 85
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	e5 e5       	ldi	r30, 0x55	; 85
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	8b 7f       	andi	r24, 0xFB	; 251
    16f2:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    16f4:	a5 e5       	ldi	r26, 0x55	; 85
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e5 e5       	ldi	r30, 0x55	; 85
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	87 7f       	andi	r24, 0xF7	; 247
    1700:	8c 93       	st	X, r24
}
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <EXTI1_FALLING_MODE>:

void EXTI1_FALLING_MODE(void){
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	cd b7       	in	r28, 0x3d	; 61
    170e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1710:	a5 e5       	ldi	r26, 0x55	; 85
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e5 e5       	ldi	r30, 0x55	; 85
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	88 60       	ori	r24, 0x08	; 8
    171c:	8c 93       	st	X, r24
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    171e:	a5 e5       	ldi	r26, 0x55	; 85
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e5 e5       	ldi	r30, 0x55	; 85
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	8b 7f       	andi	r24, 0xFB	; 251
    172a:	8c 93       	st	X, r24
}
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	08 95       	ret

00001732 <EXTI1_AnyLogicalChange_MODE>:

void EXTI1_AnyLogicalChange_MODE(void){
    1732:	df 93       	push	r29
    1734:	cf 93       	push	r28
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    173a:	a5 e5       	ldi	r26, 0x55	; 85
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e5 e5       	ldi	r30, 0x55	; 85
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	87 7f       	andi	r24, 0xF7	; 247
    1746:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1748:	a5 e5       	ldi	r26, 0x55	; 85
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e5 e5       	ldi	r30, 0x55	; 85
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	84 60       	ori	r24, 0x04	; 4
    1754:	8c 93       	st	X, r24
}
    1756:	cf 91       	pop	r28
    1758:	df 91       	pop	r29
    175a:	08 95       	ret

0000175c <EXTI1_RISING_MODE>:

void EXTI1_RISING_MODE(void){
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC11);
    1764:	a5 e5       	ldi	r26, 0x55	; 85
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e5 e5       	ldi	r30, 0x55	; 85
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	88 60       	ori	r24, 0x08	; 8
    1770:	8c 93       	st	X, r24
	SET_BIT(EXTI_u8_MCUCR, EXTI_u8_ISC10);
    1772:	a5 e5       	ldi	r26, 0x55	; 85
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e5 e5       	ldi	r30, 0x55	; 85
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	84 60       	ori	r24, 0x04	; 4
    177e:	8c 93       	st	X, r24
}
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <EXTI2_RISING_MODE>:

/**********************************************************/

/* EXTI2 Modes */

void EXTI2_RISING_MODE(void){
    1786:	df 93       	push	r29
    1788:	cf 93       	push	r28
    178a:	cd b7       	in	r28, 0x3d	; 61
    178c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    178e:	a4 e5       	ldi	r26, 0x54	; 84
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	e4 e5       	ldi	r30, 0x54	; 84
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	80 81       	ld	r24, Z
    1798:	80 64       	ori	r24, 0x40	; 64
    179a:	8c 93       	st	X, r24
}
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <EXTI2_FALLING_MODE>:

void EXTI2_FALLING_MODE(void){
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	cd b7       	in	r28, 0x3d	; 61
    17a8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(EXTI_u8_MCUCSR, EXTI_u8_ISC6);
    17aa:	a4 e5       	ldi	r26, 0x54	; 84
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e4 e5       	ldi	r30, 0x54	; 84
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	8f 7b       	andi	r24, 0xBF	; 191
    17b6:	8c 93       	st	X, r24
}
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <EXTI_voidEXTI0Enable>:

/**********************************************************/

void EXTI_voidEXTI0Enable(void){
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI0_AnyLogicalChange_MODE();
    17c6:	0e 94 45 0b 	call	0x168a	; 0x168a <EXTI0_AnyLogicalChange_MODE>

	/* Enable EXTI0 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    17ca:	ab e5       	ldi	r26, 0x5B	; 91
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	eb e5       	ldi	r30, 0x5B	; 91
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	80 64       	ori	r24, 0x40	; 64
    17d6:	8c 93       	st	X, r24
}
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <EXTI_voidEXTI1Enable>:

void EXTI_voidEXTI1Enable(void){
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62

	/* Selected Mode */
	EXTI1_AnyLogicalChange_MODE();
    17e6:	0e 94 99 0b 	call	0x1732	; 0x1732 <EXTI1_AnyLogicalChange_MODE>

	/* Enable EXTI1 PIE */
	SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    17ea:	ab e5       	ldi	r26, 0x5B	; 91
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	eb e5       	ldi	r30, 0x5B	; 91
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	80 68       	ori	r24, 0x80	; 128
    17f6:	8c 93       	st	X, r24
}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <EXTI_voidEnable>:


void EXTI_voidEnable(u8 Copy_u8_EXTI_Index, u8 Copy_u8_EXTI_Mode){
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	2a 97       	sbiw	r28, 0x0a	; 10
    1808:	0f b6       	in	r0, 0x3f	; 63
    180a:	f8 94       	cli
    180c:	de bf       	out	0x3e, r29	; 62
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	cd bf       	out	0x3d, r28	; 61
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8_EXTI_Index){
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3a 87       	std	Y+10, r19	; 0x0a
    181e:	29 87       	std	Y+9, r18	; 0x09
    1820:	89 85       	ldd	r24, Y+9	; 0x09
    1822:	9a 85       	ldd	r25, Y+10	; 0x0a
    1824:	81 30       	cpi	r24, 0x01	; 1
    1826:	91 05       	cpc	r25, r1
    1828:	e9 f1       	breq	.+122    	; 0x18a4 <EXTI_voidEnable+0xa6>
    182a:	29 85       	ldd	r18, Y+9	; 0x09
    182c:	3a 85       	ldd	r19, Y+10	; 0x0a
    182e:	22 30       	cpi	r18, 0x02	; 2
    1830:	31 05       	cpc	r19, r1
    1832:	09 f4       	brne	.+2      	; 0x1836 <EXTI_voidEnable+0x38>
    1834:	69 c0       	rjmp	.+210    	; 0x1908 <EXTI_voidEnable+0x10a>
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	00 97       	sbiw	r24, 0x00	; 0
    183c:	09 f0       	breq	.+2      	; 0x1840 <EXTI_voidEnable+0x42>
    183e:	7f c0       	rjmp	.+254    	; 0x193e <EXTI_voidEnable+0x140>
		case EXTI0_Index:
			/* Enable EXTI0 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    1840:	ab e5       	ldi	r26, 0x5B	; 91
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	eb e5       	ldi	r30, 0x5B	; 91
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	80 64       	ori	r24, 0x40	; 64
    184c:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	28 2f       	mov	r18, r24
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	38 87       	std	Y+8, r19	; 0x08
    1856:	2f 83       	std	Y+7, r18	; 0x07
    1858:	8f 81       	ldd	r24, Y+7	; 0x07
    185a:	98 85       	ldd	r25, Y+8	; 0x08
    185c:	81 30       	cpi	r24, 0x01	; 1
    185e:	91 05       	cpc	r25, r1
    1860:	c1 f0       	breq	.+48     	; 0x1892 <EXTI_voidEnable+0x94>
    1862:	2f 81       	ldd	r18, Y+7	; 0x07
    1864:	38 85       	ldd	r19, Y+8	; 0x08
    1866:	22 30       	cpi	r18, 0x02	; 2
    1868:	31 05       	cpc	r19, r1
    186a:	2c f4       	brge	.+10     	; 0x1876 <EXTI_voidEnable+0x78>
    186c:	8f 81       	ldd	r24, Y+7	; 0x07
    186e:	98 85       	ldd	r25, Y+8	; 0x08
    1870:	00 97       	sbiw	r24, 0x00	; 0
    1872:	61 f0       	breq	.+24     	; 0x188c <EXTI_voidEnable+0x8e>
    1874:	64 c0       	rjmp	.+200    	; 0x193e <EXTI_voidEnable+0x140>
    1876:	2f 81       	ldd	r18, Y+7	; 0x07
    1878:	38 85       	ldd	r19, Y+8	; 0x08
    187a:	22 30       	cpi	r18, 0x02	; 2
    187c:	31 05       	cpc	r19, r1
    187e:	61 f0       	breq	.+24     	; 0x1898 <EXTI_voidEnable+0x9a>
    1880:	8f 81       	ldd	r24, Y+7	; 0x07
    1882:	98 85       	ldd	r25, Y+8	; 0x08
    1884:	83 30       	cpi	r24, 0x03	; 3
    1886:	91 05       	cpc	r25, r1
    1888:	51 f0       	breq	.+20     	; 0x189e <EXTI_voidEnable+0xa0>
    188a:	59 c0       	rjmp	.+178    	; 0x193e <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI0_LowLevel_MODE();
    188c:	0e 94 1b 0b 	call	0x1636	; 0x1636 <EXTI0_LowLevel_MODE>
    1890:	56 c0       	rjmp	.+172    	; 0x193e <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI0_FALLING_MODE();
    1892:	0e 94 30 0b 	call	0x1660	; 0x1660 <EXTI0_FALLING_MODE>
    1896:	53 c0       	rjmp	.+166    	; 0x193e <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI0_AnyLogicalChange_MODE();
    1898:	0e 94 45 0b 	call	0x168a	; 0x168a <EXTI0_AnyLogicalChange_MODE>
    189c:	50 c0       	rjmp	.+160    	; 0x193e <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI0_RISING_MODE();
    189e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <EXTI0_RISING_MODE>
    18a2:	4d c0       	rjmp	.+154    	; 0x193e <EXTI_voidEnable+0x140>
			}
			break;

		case EXTI1_Index:
			/* Enable EXTI1 PIE */
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    18a4:	ab e5       	ldi	r26, 0x5B	; 91
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	eb e5       	ldi	r30, 0x5B	; 91
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 68       	ori	r24, 0x80	; 128
    18b0:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    18b2:	8a 81       	ldd	r24, Y+2	; 0x02
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	3e 83       	std	Y+6, r19	; 0x06
    18ba:	2d 83       	std	Y+5, r18	; 0x05
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	81 30       	cpi	r24, 0x01	; 1
    18c2:	91 05       	cpc	r25, r1
    18c4:	c1 f0       	breq	.+48     	; 0x18f6 <EXTI_voidEnable+0xf8>
    18c6:	2d 81       	ldd	r18, Y+5	; 0x05
    18c8:	3e 81       	ldd	r19, Y+6	; 0x06
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	2c f4       	brge	.+10     	; 0x18da <EXTI_voidEnable+0xdc>
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	00 97       	sbiw	r24, 0x00	; 0
    18d6:	61 f0       	breq	.+24     	; 0x18f0 <EXTI_voidEnable+0xf2>
    18d8:	32 c0       	rjmp	.+100    	; 0x193e <EXTI_voidEnable+0x140>
    18da:	2d 81       	ldd	r18, Y+5	; 0x05
    18dc:	3e 81       	ldd	r19, Y+6	; 0x06
    18de:	22 30       	cpi	r18, 0x02	; 2
    18e0:	31 05       	cpc	r19, r1
    18e2:	61 f0       	breq	.+24     	; 0x18fc <EXTI_voidEnable+0xfe>
    18e4:	8d 81       	ldd	r24, Y+5	; 0x05
    18e6:	9e 81       	ldd	r25, Y+6	; 0x06
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	91 05       	cpc	r25, r1
    18ec:	51 f0       	breq	.+20     	; 0x1902 <EXTI_voidEnable+0x104>
    18ee:	27 c0       	rjmp	.+78     	; 0x193e <EXTI_voidEnable+0x140>
				case Low_Level_Mode:
					EXTI1_LowLevel_MODE();
    18f0:	0e 94 6f 0b 	call	0x16de	; 0x16de <EXTI1_LowLevel_MODE>
    18f4:	24 c0       	rjmp	.+72     	; 0x193e <EXTI_voidEnable+0x140>
					break;

				case Falling_Mode:
					EXTI1_FALLING_MODE();
    18f6:	0e 94 84 0b 	call	0x1708	; 0x1708 <EXTI1_FALLING_MODE>
    18fa:	21 c0       	rjmp	.+66     	; 0x193e <EXTI_voidEnable+0x140>
					break;

				case Any_Logical_Change_Mode:
					EXTI1_AnyLogicalChange_MODE();
    18fc:	0e 94 99 0b 	call	0x1732	; 0x1732 <EXTI1_AnyLogicalChange_MODE>
    1900:	1e c0       	rjmp	.+60     	; 0x193e <EXTI_voidEnable+0x140>
					break;

				case Rising_Mode:
					EXTI1_RISING_MODE();
    1902:	0e 94 ae 0b 	call	0x175c	; 0x175c <EXTI1_RISING_MODE>
    1906:	1b c0       	rjmp	.+54     	; 0x193e <EXTI_voidEnable+0x140>
					break;
			}
			break;
		case EXTI2_Index:
			SET_BIT(EXTI_u8_GICR, EXTI_u8_Enable2_Pin);
    1908:	ab e5       	ldi	r26, 0x5B	; 91
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	eb e5       	ldi	r30, 0x5B	; 91
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	80 62       	ori	r24, 0x20	; 32
    1914:	8c 93       	st	X, r24
			switch(Copy_u8_EXTI_Mode){
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	3c 83       	std	Y+4, r19	; 0x04
    191e:	2b 83       	std	Y+3, r18	; 0x03
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	91 05       	cpc	r25, r1
    1928:	41 f0       	breq	.+16     	; 0x193a <EXTI_voidEnable+0x13c>
    192a:	2b 81       	ldd	r18, Y+3	; 0x03
    192c:	3c 81       	ldd	r19, Y+4	; 0x04
    192e:	23 30       	cpi	r18, 0x03	; 3
    1930:	31 05       	cpc	r19, r1
    1932:	29 f4       	brne	.+10     	; 0x193e <EXTI_voidEnable+0x140>
				case Rising_Mode:
					EXTI2_RISING_MODE();
    1934:	0e 94 c3 0b 	call	0x1786	; 0x1786 <EXTI2_RISING_MODE>
    1938:	02 c0       	rjmp	.+4      	; 0x193e <EXTI_voidEnable+0x140>
					break;
				case Falling_Mode:
					EXTI2_FALLING_MODE();
    193a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <EXTI2_FALLING_MODE>
					break;
			}
			break;
	}

}
    193e:	2a 96       	adiw	r28, 0x0a	; 10
    1940:	0f b6       	in	r0, 0x3f	; 63
    1942:	f8 94       	cli
    1944:	de bf       	out	0x3e, r29	; 62
    1946:	0f be       	out	0x3f, r0	; 63
    1948:	cd bf       	out	0x3d, r28	; 61
    194a:	cf 91       	pop	r28
    194c:	df 91       	pop	r29
    194e:	08 95       	ret

00001950 <EXTI_voidDisable>:

void EXTI_voidDisable(u8 Copy_u8_EXTI_Index){
    1950:	df 93       	push	r29
    1952:	cf 93       	push	r28
    1954:	00 d0       	rcall	.+0      	; 0x1956 <EXTI_voidDisable+0x6>
    1956:	0f 92       	push	r0
    1958:	cd b7       	in	r28, 0x3d	; 61
    195a:	de b7       	in	r29, 0x3e	; 62
    195c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTI_Index){
    195e:	89 81       	ldd	r24, Y+1	; 0x01
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	3b 83       	std	Y+3, r19	; 0x03
    1966:	2a 83       	std	Y+2, r18	; 0x02
    1968:	8a 81       	ldd	r24, Y+2	; 0x02
    196a:	9b 81       	ldd	r25, Y+3	; 0x03
    196c:	00 97       	sbiw	r24, 0x00	; 0
    196e:	31 f0       	breq	.+12     	; 0x197c <EXTI_voidDisable+0x2c>
    1970:	2a 81       	ldd	r18, Y+2	; 0x02
    1972:	3b 81       	ldd	r19, Y+3	; 0x03
    1974:	21 30       	cpi	r18, 0x01	; 1
    1976:	31 05       	cpc	r19, r1
    1978:	49 f0       	breq	.+18     	; 0x198c <EXTI_voidDisable+0x3c>
    197a:	0f c0       	rjmp	.+30     	; 0x199a <EXTI_voidDisable+0x4a>
		case EXTI0_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable0_Pin);
    197c:	ab e5       	ldi	r26, 0x5B	; 91
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	eb e5       	ldi	r30, 0x5B	; 91
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	8f 7b       	andi	r24, 0xBF	; 191
    1988:	8c 93       	st	X, r24
    198a:	07 c0       	rjmp	.+14     	; 0x199a <EXTI_voidDisable+0x4a>
			break;

		case EXTI1_Index:
			CLR_BIT(EXTI_u8_GICR, EXTI_u8_Enable1_Pin);
    198c:	ab e5       	ldi	r26, 0x5B	; 91
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	eb e5       	ldi	r30, 0x5B	; 91
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 77       	andi	r24, 0x7F	; 127
    1998:	8c 93       	st	X, r24
			break;
	}
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	cf 91       	pop	r28
    19a2:	df 91       	pop	r29
    19a4:	08 95       	ret

000019a6 <__vector_1>:

// EXTI 0

void __vector_1(void) __attribute__((signal));

void __vector_1(void){
    19a6:	1f 92       	push	r1
    19a8:	0f 92       	push	r0
    19aa:	0f b6       	in	r0, 0x3f	; 63
    19ac:	0f 92       	push	r0
    19ae:	11 24       	eor	r1, r1
    19b0:	2f 93       	push	r18
    19b2:	3f 93       	push	r19
    19b4:	4f 93       	push	r20
    19b6:	5f 93       	push	r21
    19b8:	6f 93       	push	r22
    19ba:	7f 93       	push	r23
    19bc:	8f 93       	push	r24
    19be:	9f 93       	push	r25
    19c0:	af 93       	push	r26
    19c2:	bf 93       	push	r27
    19c4:	ef 93       	push	r30
    19c6:	ff 93       	push	r31
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI0_Index] != NULL){
    19d0:	80 91 90 00 	lds	r24, 0x0090
    19d4:	90 91 91 00 	lds	r25, 0x0091
    19d8:	00 97       	sbiw	r24, 0x00	; 0
    19da:	29 f0       	breq	.+10     	; 0x19e6 <__vector_1+0x40>
		EXTI[0]();
    19dc:	e0 91 90 00 	lds	r30, 0x0090
    19e0:	f0 91 91 00 	lds	r31, 0x0091
    19e4:	09 95       	icall
	}

}
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	ff 91       	pop	r31
    19ec:	ef 91       	pop	r30
    19ee:	bf 91       	pop	r27
    19f0:	af 91       	pop	r26
    19f2:	9f 91       	pop	r25
    19f4:	8f 91       	pop	r24
    19f6:	7f 91       	pop	r23
    19f8:	6f 91       	pop	r22
    19fa:	5f 91       	pop	r21
    19fc:	4f 91       	pop	r20
    19fe:	3f 91       	pop	r19
    1a00:	2f 91       	pop	r18
    1a02:	0f 90       	pop	r0
    1a04:	0f be       	out	0x3f, r0	; 63
    1a06:	0f 90       	pop	r0
    1a08:	1f 90       	pop	r1
    1a0a:	18 95       	reti

00001a0c <__vector_2>:


// EXTI 1
void __vector_2(void) __attribute__((signal));

void __vector_2(void){
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	0f 92       	push	r0
    1a14:	11 24       	eor	r1, r1
    1a16:	2f 93       	push	r18
    1a18:	3f 93       	push	r19
    1a1a:	4f 93       	push	r20
    1a1c:	5f 93       	push	r21
    1a1e:	6f 93       	push	r22
    1a20:	7f 93       	push	r23
    1a22:	8f 93       	push	r24
    1a24:	9f 93       	push	r25
    1a26:	af 93       	push	r26
    1a28:	bf 93       	push	r27
    1a2a:	ef 93       	push	r30
    1a2c:	ff 93       	push	r31
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI1_Index] != NULL){
    1a36:	80 91 92 00 	lds	r24, 0x0092
    1a3a:	90 91 93 00 	lds	r25, 0x0093
    1a3e:	00 97       	sbiw	r24, 0x00	; 0
    1a40:	29 f0       	breq	.+10     	; 0x1a4c <__vector_2+0x40>
			EXTI[1]();
    1a42:	e0 91 92 00 	lds	r30, 0x0092
    1a46:	f0 91 93 00 	lds	r31, 0x0093
    1a4a:	09 95       	icall
	}

}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	ff 91       	pop	r31
    1a52:	ef 91       	pop	r30
    1a54:	bf 91       	pop	r27
    1a56:	af 91       	pop	r26
    1a58:	9f 91       	pop	r25
    1a5a:	8f 91       	pop	r24
    1a5c:	7f 91       	pop	r23
    1a5e:	6f 91       	pop	r22
    1a60:	5f 91       	pop	r21
    1a62:	4f 91       	pop	r20
    1a64:	3f 91       	pop	r19
    1a66:	2f 91       	pop	r18
    1a68:	0f 90       	pop	r0
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	0f 90       	pop	r0
    1a6e:	1f 90       	pop	r1
    1a70:	18 95       	reti

00001a72 <__vector_3>:


// EXTI 2
void __vector_3(void) __attribute__((signal));

void __vector_3(void){
    1a72:	1f 92       	push	r1
    1a74:	0f 92       	push	r0
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	0f 92       	push	r0
    1a7a:	11 24       	eor	r1, r1
    1a7c:	2f 93       	push	r18
    1a7e:	3f 93       	push	r19
    1a80:	4f 93       	push	r20
    1a82:	5f 93       	push	r21
    1a84:	6f 93       	push	r22
    1a86:	7f 93       	push	r23
    1a88:	8f 93       	push	r24
    1a8a:	9f 93       	push	r25
    1a8c:	af 93       	push	r26
    1a8e:	bf 93       	push	r27
    1a90:	ef 93       	push	r30
    1a92:	ff 93       	push	r31
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62

	if(EXTI[EXTI2_Index] != NULL){
    1a9c:	80 91 94 00 	lds	r24, 0x0094
    1aa0:	90 91 95 00 	lds	r25, 0x0095
    1aa4:	00 97       	sbiw	r24, 0x00	; 0
    1aa6:	29 f0       	breq	.+10     	; 0x1ab2 <__vector_3+0x40>
			EXTI[2]();
    1aa8:	e0 91 94 00 	lds	r30, 0x0094
    1aac:	f0 91 95 00 	lds	r31, 0x0095
    1ab0:	09 95       	icall
	}

}
    1ab2:	cf 91       	pop	r28
    1ab4:	df 91       	pop	r29
    1ab6:	ff 91       	pop	r31
    1ab8:	ef 91       	pop	r30
    1aba:	bf 91       	pop	r27
    1abc:	af 91       	pop	r26
    1abe:	9f 91       	pop	r25
    1ac0:	8f 91       	pop	r24
    1ac2:	7f 91       	pop	r23
    1ac4:	6f 91       	pop	r22
    1ac6:	5f 91       	pop	r21
    1ac8:	4f 91       	pop	r20
    1aca:	3f 91       	pop	r19
    1acc:	2f 91       	pop	r18
    1ace:	0f 90       	pop	r0
    1ad0:	0f be       	out	0x3f, r0	; 63
    1ad2:	0f 90       	pop	r0
    1ad4:	1f 90       	pop	r1
    1ad6:	18 95       	reti

00001ad8 <DIO_voidInit>:

#include "DIO_Private.h"
#include "DIO_Config.h"

void DIO_voidInit(void)
{
    1ad8:	df 93       	push	r29
    1ada:	cf 93       	push	r28
    1adc:	cd b7       	in	r28, 0x3d	; 61
    1ade:	de b7       	in	r29, 0x3e	; 62
	DIO_u8_DDRA_REG = Conc(DIO_u8_PA7_INITIAL_DIRECTION, DIO_u8_PA6_INITIAL_DIRECTION, DIO_u8_PA5_INITIAL_DIRECTION, DIO_u8_PA4_INITIAL_DIRECTION, DIO_u8_PA3_INITIAL_DIRECTION, DIO_u8_PA2_INITIAL_DIRECTION, DIO_u8_PA1_INITIAL_DIRECTION, DIO_u8_PA0_INITIAL_DIRECTION);
    1ae0:	ea e3       	ldi	r30, 0x3A	; 58
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	10 82       	st	Z, r1
	DIO_u8_DDRB_REG = Conc(DIO_u8_PB7_INITIAL_DIRECTION, DIO_u8_PB6_INITIAL_DIRECTION, DIO_u8_PB5_INITIAL_DIRECTION, DIO_u8_PB4_INITIAL_DIRECTION, DIO_u8_PB3_INITIAL_DIRECTION, DIO_u8_PB2_INITIAL_DIRECTION, DIO_u8_PB1_INITIAL_DIRECTION, DIO_u8_PB0_INITIAL_DIRECTION);
    1ae6:	e7 e3       	ldi	r30, 0x37	; 55
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	10 82       	st	Z, r1
	DIO_u8_DDRC_REG = Conc(DIO_u8_PC7_INITIAL_DIRECTION, DIO_u8_PC6_INITIAL_DIRECTION, DIO_u8_PC5_INITIAL_DIRECTION, DIO_u8_PC4_INITIAL_DIRECTION, DIO_u8_PC3_INITIAL_DIRECTION, DIO_u8_PC2_INITIAL_DIRECTION, DIO_u8_PC1_INITIAL_DIRECTION, DIO_u8_PC0_INITIAL_DIRECTION);
    1aec:	e4 e3       	ldi	r30, 0x34	; 52
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	80 83       	st	Z, r24
	DIO_u8_DDRD_REG = Conc(DIO_u8_PD7_INITIAL_DIRECTION, DIO_u8_PD6_INITIAL_DIRECTION, DIO_u8_PD5_INITIAL_DIRECTION, DIO_u8_PD4_INITIAL_DIRECTION, DIO_u8_PD3_INITIAL_DIRECTION, DIO_u8_PD2_INITIAL_DIRECTION, DIO_u8_PD1_INITIAL_DIRECTION, DIO_u8_PD0_INITIAL_DIRECTION);
    1af4:	e1 e3       	ldi	r30, 0x31	; 49
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 e3       	ldi	r24, 0x30	; 48
    1afa:	80 83       	st	Z, r24


	DIO_u8_PORTA_REG = Conc(DIO_u8_PA0_INITIAL_VALUE, DIO_u8_PA1_INITIAL_VALUE, DIO_u8_PA2_INITIAL_VALUE, DIO_u8_PA3_INITIAL_VALUE, DIO_u8_PA4_INITIAL_VALUE, DIO_u8_PA5_INITIAL_VALUE, DIO_u8_PA6_INITIAL_VALUE, DIO_u8_PA7_INITIAL_VALUE);
    1afc:	eb e3       	ldi	r30, 0x3B	; 59
    1afe:	f0 e0       	ldi	r31, 0x00	; 0
    1b00:	10 82       	st	Z, r1
	DIO_u8_PORTB_REG = Conc(DIO_u8_PB0_INITIAL_VALUE, DIO_u8_PB1_INITIAL_VALUE, DIO_u8_PB2_INITIAL_VALUE, DIO_u8_PB3_INITIAL_VALUE, DIO_u8_PB4_INITIAL_VALUE, DIO_u8_PB5_INITIAL_VALUE, DIO_u8_PB6_INITIAL_VALUE, DIO_u8_PB7_INITIAL_VALUE);
    1b02:	e8 e3       	ldi	r30, 0x38	; 56
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	10 82       	st	Z, r1
	DIO_u8_PORTC_REG = Conc(DIO_u8_PC0_INITIAL_VALUE, DIO_u8_PC1_INITIAL_VALUE, DIO_u8_PC2_INITIAL_VALUE, DIO_u8_PC3_INITIAL_VALUE, DIO_u8_PC4_INITIAL_VALUE, DIO_u8_PC5_INITIAL_VALUE, DIO_u8_PC6_INITIAL_VALUE, DIO_u8_PC7_INITIAL_VALUE);
    1b08:	e5 e3       	ldi	r30, 0x35	; 53
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	10 82       	st	Z, r1
	DIO_u8_PORTD_REG = Conc(DIO_u8_PD0_INITIAL_VALUE, DIO_u8_PD1_INITIAL_VALUE, DIO_u8_PD2_INITIAL_VALUE, DIO_u8_PD3_INITIAL_VALUE, DIO_u8_PD4_INITIAL_VALUE, DIO_u8_PD5_INITIAL_VALUE, DIO_u8_PD6_INITIAL_VALUE, DIO_u8_PD7_INITIAL_VALUE);
    1b0e:	e2 e3       	ldi	r30, 0x32	; 50
    1b10:	f0 e0       	ldi	r31, 0x00	; 0
    1b12:	10 82       	st	Z, r1

}
    1b14:	cf 91       	pop	r28
    1b16:	df 91       	pop	r29
    1b18:	08 95       	ret

00001b1a <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinDirection)
{
    1b1a:	df 93       	push	r29
    1b1c:	cf 93       	push	r28
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	2e 97       	sbiw	r28, 0x0e	; 14
    1b24:	0f b6       	in	r0, 0x3f	; 63
    1b26:	f8 94       	cli
    1b28:	de bf       	out	0x3e, r29	; 62
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	cd bf       	out	0x3d, r28	; 61
    1b2e:	8a 83       	std	Y+2, r24	; 0x02
    1b30:	6b 83       	std	Y+3, r22	; 0x03
    1b32:	4c 83       	std	Y+4, r20	; 0x04

	u8 Local_u8ErrorState = STD_TYPES_OK;
    1b34:	81 e0       	ldi	r24, 0x01	; 1
    1b36:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinDirection == DIO_u8_OUTPUT || Copy_u8PinDirection == DIO_u8_INPUT))
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	08 f0       	brcs	.+2      	; 0x1b40 <DIO_u8SetPinDirection+0x26>
    1b3e:	0c c1       	rjmp	.+536    	; 0x1d58 <DIO_u8SetPinDirection+0x23e>
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	88 30       	cpi	r24, 0x08	; 8
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <DIO_u8SetPinDirection+0x2e>
    1b46:	08 c1       	rjmp	.+528    	; 0x1d58 <DIO_u8SetPinDirection+0x23e>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	81 30       	cpi	r24, 0x01	; 1
    1b4c:	21 f0       	breq	.+8      	; 0x1b56 <DIO_u8SetPinDirection+0x3c>
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	88 23       	and	r24, r24
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <DIO_u8SetPinDirection+0x3c>
    1b54:	01 c1       	rjmp	.+514    	; 0x1d58 <DIO_u8SetPinDirection+0x23e>
	{

		switch (Copy_u8PortId)
    1b56:	8a 81       	ldd	r24, Y+2	; 0x02
    1b58:	28 2f       	mov	r18, r24
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	3e 87       	std	Y+14, r19	; 0x0e
    1b5e:	2d 87       	std	Y+13, r18	; 0x0d
    1b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	91 05       	cpc	r25, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <DIO_u8SetPinDirection+0x52>
    1b6a:	4f c0       	rjmp	.+158    	; 0x1c0a <DIO_u8SetPinDirection+0xf0>
    1b6c:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b6e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b70:	22 30       	cpi	r18, 0x02	; 2
    1b72:	31 05       	cpc	r19, r1
    1b74:	2c f4       	brge	.+10     	; 0x1b80 <DIO_u8SetPinDirection+0x66>
    1b76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b7a:	00 97       	sbiw	r24, 0x00	; 0
    1b7c:	71 f0       	breq	.+28     	; 0x1b9a <DIO_u8SetPinDirection+0x80>
    1b7e:	ed c0       	rjmp	.+474    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
    1b80:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b82:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b84:	22 30       	cpi	r18, 0x02	; 2
    1b86:	31 05       	cpc	r19, r1
    1b88:	09 f4       	brne	.+2      	; 0x1b8c <DIO_u8SetPinDirection+0x72>
    1b8a:	77 c0       	rjmp	.+238    	; 0x1c7a <DIO_u8SetPinDirection+0x160>
    1b8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b90:	83 30       	cpi	r24, 0x03	; 3
    1b92:	91 05       	cpc	r25, r1
    1b94:	09 f4       	brne	.+2      	; 0x1b98 <DIO_u8SetPinDirection+0x7e>
    1b96:	a9 c0       	rjmp	.+338    	; 0x1cea <DIO_u8SetPinDirection+0x1d0>
    1b98:	e0 c0       	rjmp	.+448    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection)
    1b9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9c:	28 2f       	mov	r18, r24
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	3c 87       	std	Y+12, r19	; 0x0c
    1ba2:	2b 87       	std	Y+11, r18	; 0x0b
    1ba4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ba6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ba8:	00 97       	sbiw	r24, 0x00	; 0
    1baa:	d1 f0       	breq	.+52     	; 0x1be0 <DIO_u8SetPinDirection+0xc6>
    1bac:	2b 85       	ldd	r18, Y+11	; 0x0b
    1bae:	3c 85       	ldd	r19, Y+12	; 0x0c
    1bb0:	21 30       	cpi	r18, 0x01	; 1
    1bb2:	31 05       	cpc	r19, r1
    1bb4:	09 f0       	breq	.+2      	; 0x1bb8 <DIO_u8SetPinDirection+0x9e>
    1bb6:	d1 c0       	rjmp	.+418    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1bb8:	aa e3       	ldi	r26, 0x3A	; 58
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	ea e3       	ldi	r30, 0x3A	; 58
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	48 2f       	mov	r20, r24
    1bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 2e       	mov	r0, r18
    1bd0:	02 c0       	rjmp	.+4      	; 0x1bd6 <DIO_u8SetPinDirection+0xbc>
    1bd2:	88 0f       	add	r24, r24
    1bd4:	99 1f       	adc	r25, r25
    1bd6:	0a 94       	dec	r0
    1bd8:	e2 f7       	brpl	.-8      	; 0x1bd2 <DIO_u8SetPinDirection+0xb8>
    1bda:	84 2b       	or	r24, r20
    1bdc:	8c 93       	st	X, r24
    1bde:	bd c0       	rjmp	.+378    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
    1be0:	aa e3       	ldi	r26, 0x3A	; 58
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	ea e3       	ldi	r30, 0x3A	; 58
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	48 2f       	mov	r20, r24
    1bec:	8b 81       	ldd	r24, Y+3	; 0x03
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <DIO_u8SetPinDirection+0xe4>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <DIO_u8SetPinDirection+0xe0>
    1c02:	80 95       	com	r24
    1c04:	84 23       	and	r24, r20
    1c06:	8c 93       	st	X, r24
    1c08:	a8 c0       	rjmp	.+336    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection)
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	3a 87       	std	Y+10, r19	; 0x0a
    1c12:	29 87       	std	Y+9, r18	; 0x09
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c18:	00 97       	sbiw	r24, 0x00	; 0
    1c1a:	d1 f0       	breq	.+52     	; 0x1c50 <DIO_u8SetPinDirection+0x136>
    1c1c:	29 85       	ldd	r18, Y+9	; 0x09
    1c1e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1c20:	21 30       	cpi	r18, 0x01	; 1
    1c22:	31 05       	cpc	r19, r1
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <DIO_u8SetPinDirection+0x10e>
    1c26:	99 c0       	rjmp	.+306    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1c28:	a7 e3       	ldi	r26, 0x37	; 55
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	e7 e3       	ldi	r30, 0x37	; 55
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	48 2f       	mov	r20, r24
    1c34:	8b 81       	ldd	r24, Y+3	; 0x03
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	02 2e       	mov	r0, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <DIO_u8SetPinDirection+0x12c>
    1c42:	88 0f       	add	r24, r24
    1c44:	99 1f       	adc	r25, r25
    1c46:	0a 94       	dec	r0
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <DIO_u8SetPinDirection+0x128>
    1c4a:	84 2b       	or	r24, r20
    1c4c:	8c 93       	st	X, r24
    1c4e:	85 c0       	rjmp	.+266    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
    1c50:	a7 e3       	ldi	r26, 0x37	; 55
    1c52:	b0 e0       	ldi	r27, 0x00	; 0
    1c54:	e7 e3       	ldi	r30, 0x37	; 55
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	80 81       	ld	r24, Z
    1c5a:	48 2f       	mov	r20, r24
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	02 2e       	mov	r0, r18
    1c68:	02 c0       	rjmp	.+4      	; 0x1c6e <DIO_u8SetPinDirection+0x154>
    1c6a:	88 0f       	add	r24, r24
    1c6c:	99 1f       	adc	r25, r25
    1c6e:	0a 94       	dec	r0
    1c70:	e2 f7       	brpl	.-8      	; 0x1c6a <DIO_u8SetPinDirection+0x150>
    1c72:	80 95       	com	r24
    1c74:	84 23       	and	r24, r20
    1c76:	8c 93       	st	X, r24
    1c78:	70 c0       	rjmp	.+224    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection)
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	38 87       	std	Y+8, r19	; 0x08
    1c82:	2f 83       	std	Y+7, r18	; 0x07
    1c84:	8f 81       	ldd	r24, Y+7	; 0x07
    1c86:	98 85       	ldd	r25, Y+8	; 0x08
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	d1 f0       	breq	.+52     	; 0x1cc0 <DIO_u8SetPinDirection+0x1a6>
    1c8c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c8e:	38 85       	ldd	r19, Y+8	; 0x08
    1c90:	21 30       	cpi	r18, 0x01	; 1
    1c92:	31 05       	cpc	r19, r1
    1c94:	09 f0       	breq	.+2      	; 0x1c98 <DIO_u8SetPinDirection+0x17e>
    1c96:	61 c0       	rjmp	.+194    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1c98:	a4 e3       	ldi	r26, 0x34	; 52
    1c9a:	b0 e0       	ldi	r27, 0x00	; 0
    1c9c:	e4 e3       	ldi	r30, 0x34	; 52
    1c9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ca0:	80 81       	ld	r24, Z
    1ca2:	48 2f       	mov	r20, r24
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	28 2f       	mov	r18, r24
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	02 2e       	mov	r0, r18
    1cb0:	02 c0       	rjmp	.+4      	; 0x1cb6 <DIO_u8SetPinDirection+0x19c>
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	0a 94       	dec	r0
    1cb8:	e2 f7       	brpl	.-8      	; 0x1cb2 <DIO_u8SetPinDirection+0x198>
    1cba:	84 2b       	or	r24, r20
    1cbc:	8c 93       	st	X, r24
    1cbe:	4d c0       	rjmp	.+154    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
    1cc0:	a4 e3       	ldi	r26, 0x34	; 52
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	e4 e3       	ldi	r30, 0x34	; 52
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 2e       	mov	r0, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <DIO_u8SetPinDirection+0x1c4>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <DIO_u8SetPinDirection+0x1c0>
    1ce2:	80 95       	com	r24
    1ce4:	84 23       	and	r24, r20
    1ce6:	8c 93       	st	X, r24
    1ce8:	38 c0       	rjmp	.+112    	; 0x1d5a <DIO_u8SetPinDirection+0x240>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection)
    1cea:	8c 81       	ldd	r24, Y+4	; 0x04
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	3e 83       	std	Y+6, r19	; 0x06
    1cf2:	2d 83       	std	Y+5, r18	; 0x05
    1cf4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf8:	00 97       	sbiw	r24, 0x00	; 0
    1cfa:	c9 f0       	breq	.+50     	; 0x1d2e <DIO_u8SetPinDirection+0x214>
    1cfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1d00:	21 30       	cpi	r18, 0x01	; 1
    1d02:	31 05       	cpc	r19, r1
    1d04:	51 f5       	brne	.+84     	; 0x1d5a <DIO_u8SetPinDirection+0x240>
			{
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1d06:	a1 e3       	ldi	r26, 0x31	; 49
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e1 e3       	ldi	r30, 0x31	; 49
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	48 2f       	mov	r20, r24
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	28 2f       	mov	r18, r24
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	02 2e       	mov	r0, r18
    1d1e:	02 c0       	rjmp	.+4      	; 0x1d24 <DIO_u8SetPinDirection+0x20a>
    1d20:	88 0f       	add	r24, r24
    1d22:	99 1f       	adc	r25, r25
    1d24:	0a 94       	dec	r0
    1d26:	e2 f7       	brpl	.-8      	; 0x1d20 <DIO_u8SetPinDirection+0x206>
    1d28:	84 2b       	or	r24, r20
    1d2a:	8c 93       	st	X, r24
    1d2c:	16 c0       	rjmp	.+44     	; 0x1d5a <DIO_u8SetPinDirection+0x240>
				break;

			case DIO_u8_INPUT:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
    1d2e:	a1 e3       	ldi	r26, 0x31	; 49
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e1 e3       	ldi	r30, 0x31	; 49
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	48 2f       	mov	r20, r24
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	28 2f       	mov	r18, r24
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	02 2e       	mov	r0, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <DIO_u8SetPinDirection+0x232>
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <DIO_u8SetPinDirection+0x22e>
    1d50:	80 95       	com	r24
    1d52:	84 23       	and	r24, r20
    1d54:	8c 93       	st	X, r24
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <DIO_u8SetPinDirection+0x240>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1d58:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d5c:	2e 96       	adiw	r28, 0x0e	; 14
    1d5e:	0f b6       	in	r0, 0x3f	; 63
    1d60:	f8 94       	cli
    1d62:	de bf       	out	0x3e, r29	; 62
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	cd bf       	out	0x3d, r28	; 61
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	08 95       	ret

00001d6e <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue)
{
    1d6e:	df 93       	push	r29
    1d70:	cf 93       	push	r28
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	2f 97       	sbiw	r28, 0x0f	; 15
    1d78:	0f b6       	in	r0, 0x3f	; 63
    1d7a:	f8 94       	cli
    1d7c:	de bf       	out	0x3e, r29	; 62
    1d7e:	0f be       	out	0x3f, r0	; 63
    1d80:	cd bf       	out	0x3d, r28	; 61
    1d82:	8b 83       	std	Y+3, r24	; 0x03
    1d84:	6c 83       	std	Y+4, r22	; 0x04
    1d86:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	8a 83       	std	Y+2, r24	; 0x02

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && (Copy_u8PinValue == DIO_u8_LOW || Copy_u8PinValue == DIO_u8_HIGH))
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	84 30       	cpi	r24, 0x04	; 4
    1d90:	08 f0       	brcs	.+2      	; 0x1d94 <DIO_u8SetPinValue+0x26>
    1d92:	13 c1       	rjmp	.+550    	; 0x1fba <DIO_u8SetPinValue+0x24c>
    1d94:	8c 81       	ldd	r24, Y+4	; 0x04
    1d96:	88 30       	cpi	r24, 0x08	; 8
    1d98:	08 f0       	brcs	.+2      	; 0x1d9c <DIO_u8SetPinValue+0x2e>
    1d9a:	0f c1       	rjmp	.+542    	; 0x1fba <DIO_u8SetPinValue+0x24c>
    1d9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9e:	88 23       	and	r24, r24
    1da0:	21 f0       	breq	.+8      	; 0x1daa <DIO_u8SetPinValue+0x3c>
    1da2:	8d 81       	ldd	r24, Y+5	; 0x05
    1da4:	81 30       	cpi	r24, 0x01	; 1
    1da6:	09 f0       	breq	.+2      	; 0x1daa <DIO_u8SetPinValue+0x3c>
    1da8:	08 c1       	rjmp	.+528    	; 0x1fba <DIO_u8SetPinValue+0x24c>
	{
		switch (Copy_u8PortId)
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	3f 87       	std	Y+15, r19	; 0x0f
    1db2:	2e 87       	std	Y+14, r18	; 0x0e
    1db4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1db6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	91 05       	cpc	r25, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <DIO_u8SetPinValue+0x52>
    1dbe:	50 c0       	rjmp	.+160    	; 0x1e60 <DIO_u8SetPinValue+0xf2>
    1dc0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1dc2:	3f 85       	ldd	r19, Y+15	; 0x0f
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <DIO_u8SetPinValue+0x66>
    1dca:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dcc:	9f 85       	ldd	r25, Y+15	; 0x0f
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	71 f0       	breq	.+28     	; 0x1dee <DIO_u8SetPinValue+0x80>
    1dd2:	f4 c0       	rjmp	.+488    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
    1dd4:	2e 85       	ldd	r18, Y+14	; 0x0e
    1dd6:	3f 85       	ldd	r19, Y+15	; 0x0f
    1dd8:	22 30       	cpi	r18, 0x02	; 2
    1dda:	31 05       	cpc	r19, r1
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <DIO_u8SetPinValue+0x72>
    1dde:	79 c0       	rjmp	.+242    	; 0x1ed2 <DIO_u8SetPinValue+0x164>
    1de0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1de2:	9f 85       	ldd	r25, Y+15	; 0x0f
    1de4:	83 30       	cpi	r24, 0x03	; 3
    1de6:	91 05       	cpc	r25, r1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <DIO_u8SetPinValue+0x7e>
    1dea:	ad c0       	rjmp	.+346    	; 0x1f46 <DIO_u8SetPinValue+0x1d8>
    1dec:	e7 c0       	rjmp	.+462    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue)
    1dee:	8d 81       	ldd	r24, Y+5	; 0x05
    1df0:	28 2f       	mov	r18, r24
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	3d 87       	std	Y+13, r19	; 0x0d
    1df6:	2c 87       	std	Y+12, r18	; 0x0c
    1df8:	8c 85       	ldd	r24, Y+12	; 0x0c
    1dfa:	9d 85       	ldd	r25, Y+13	; 0x0d
    1dfc:	00 97       	sbiw	r24, 0x00	; 0
    1dfe:	c9 f0       	breq	.+50     	; 0x1e32 <DIO_u8SetPinValue+0xc4>
    1e00:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e02:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e04:	21 30       	cpi	r18, 0x01	; 1
    1e06:	31 05       	cpc	r19, r1
    1e08:	49 f5       	brne	.+82     	; 0x1e5c <DIO_u8SetPinValue+0xee>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1e0a:	ab e3       	ldi	r26, 0x3B	; 59
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	eb e3       	ldi	r30, 0x3B	; 59
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	48 2f       	mov	r20, r24
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	28 2f       	mov	r18, r24
    1e1a:	30 e0       	ldi	r19, 0x00	; 0
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	02 2e       	mov	r0, r18
    1e22:	02 c0       	rjmp	.+4      	; 0x1e28 <DIO_u8SetPinValue+0xba>
    1e24:	88 0f       	add	r24, r24
    1e26:	99 1f       	adc	r25, r25
    1e28:	0a 94       	dec	r0
    1e2a:	e2 f7       	brpl	.-8      	; 0x1e24 <DIO_u8SetPinValue+0xb6>
    1e2c:	84 2b       	or	r24, r20
    1e2e:	8c 93       	st	X, r24
    1e30:	c5 c0       	rjmp	.+394    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1e32:	ab e3       	ldi	r26, 0x3B	; 59
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	eb e3       	ldi	r30, 0x3B	; 59
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	48 2f       	mov	r20, r24
    1e3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e40:	28 2f       	mov	r18, r24
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	81 e0       	ldi	r24, 0x01	; 1
    1e46:	90 e0       	ldi	r25, 0x00	; 0
    1e48:	02 2e       	mov	r0, r18
    1e4a:	02 c0       	rjmp	.+4      	; 0x1e50 <DIO_u8SetPinValue+0xe2>
    1e4c:	88 0f       	add	r24, r24
    1e4e:	99 1f       	adc	r25, r25
    1e50:	0a 94       	dec	r0
    1e52:	e2 f7       	brpl	.-8      	; 0x1e4c <DIO_u8SetPinValue+0xde>
    1e54:	80 95       	com	r24
    1e56:	84 23       	and	r24, r20
    1e58:	8c 93       	st	X, r24
    1e5a:	b0 c0       	rjmp	.+352    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1e5c:	1a 82       	std	Y+2, r1	; 0x02
    1e5e:	ae c0       	rjmp	.+348    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PinValue)
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	28 2f       	mov	r18, r24
    1e64:	30 e0       	ldi	r19, 0x00	; 0
    1e66:	3b 87       	std	Y+11, r19	; 0x0b
    1e68:	2a 87       	std	Y+10, r18	; 0x0a
    1e6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e6c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e6e:	00 97       	sbiw	r24, 0x00	; 0
    1e70:	c9 f0       	breq	.+50     	; 0x1ea4 <DIO_u8SetPinValue+0x136>
    1e72:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e74:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e76:	21 30       	cpi	r18, 0x01	; 1
    1e78:	31 05       	cpc	r19, r1
    1e7a:	49 f5       	brne	.+82     	; 0x1ece <DIO_u8SetPinValue+0x160>
			{

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1e7c:	a8 e3       	ldi	r26, 0x38	; 56
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e8 e3       	ldi	r30, 0x38	; 56
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 2e       	mov	r0, r18
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <DIO_u8SetPinValue+0x12c>
    1e96:	88 0f       	add	r24, r24
    1e98:	99 1f       	adc	r25, r25
    1e9a:	0a 94       	dec	r0
    1e9c:	e2 f7       	brpl	.-8      	; 0x1e96 <DIO_u8SetPinValue+0x128>
    1e9e:	84 2b       	or	r24, r20
    1ea0:	8c 93       	st	X, r24
    1ea2:	8c c0       	rjmp	.+280    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    1ea4:	a8 e3       	ldi	r26, 0x38	; 56
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e8 e3       	ldi	r30, 0x38	; 56
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <DIO_u8SetPinValue+0x154>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <DIO_u8SetPinValue+0x150>
    1ec6:	80 95       	com	r24
    1ec8:	84 23       	and	r24, r20
    1eca:	8c 93       	st	X, r24
    1ecc:	77 c0       	rjmp	.+238    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1ece:	1a 82       	std	Y+2, r1	; 0x02
    1ed0:	75 c0       	rjmp	.+234    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PinValue)
    1ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ed4:	28 2f       	mov	r18, r24
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	39 87       	std	Y+9, r19	; 0x09
    1eda:	28 87       	std	Y+8, r18	; 0x08
    1edc:	88 85       	ldd	r24, Y+8	; 0x08
    1ede:	99 85       	ldd	r25, Y+9	; 0x09
    1ee0:	00 97       	sbiw	r24, 0x00	; 0
    1ee2:	31 f0       	breq	.+12     	; 0x1ef0 <DIO_u8SetPinValue+0x182>
    1ee4:	28 85       	ldd	r18, Y+8	; 0x08
    1ee6:	39 85       	ldd	r19, Y+9	; 0x09
    1ee8:	21 30       	cpi	r18, 0x01	; 1
    1eea:	31 05       	cpc	r19, r1
    1eec:	b1 f0       	breq	.+44     	; 0x1f1a <DIO_u8SetPinValue+0x1ac>
    1eee:	29 c0       	rjmp	.+82     	; 0x1f42 <DIO_u8SetPinValue+0x1d4>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1ef0:	a5 e3       	ldi	r26, 0x35	; 53
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e5 e3       	ldi	r30, 0x35	; 53
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	48 2f       	mov	r20, r24
    1efc:	8c 81       	ldd	r24, Y+4	; 0x04
    1efe:	28 2f       	mov	r18, r24
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	02 2e       	mov	r0, r18
    1f08:	02 c0       	rjmp	.+4      	; 0x1f0e <DIO_u8SetPinValue+0x1a0>
    1f0a:	88 0f       	add	r24, r24
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	0a 94       	dec	r0
    1f10:	e2 f7       	brpl	.-8      	; 0x1f0a <DIO_u8SetPinValue+0x19c>
    1f12:	80 95       	com	r24
    1f14:	84 23       	and	r24, r20
    1f16:	8c 93       	st	X, r24
    1f18:	51 c0       	rjmp	.+162    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1f1a:	a5 e3       	ldi	r26, 0x35	; 53
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e5 e3       	ldi	r30, 0x35	; 53
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 81       	ld	r24, Z
    1f24:	48 2f       	mov	r20, r24
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	28 2f       	mov	r18, r24
    1f2a:	30 e0       	ldi	r19, 0x00	; 0
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	02 2e       	mov	r0, r18
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <DIO_u8SetPinValue+0x1ca>
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	0a 94       	dec	r0
    1f3a:	e2 f7       	brpl	.-8      	; 0x1f34 <DIO_u8SetPinValue+0x1c6>
    1f3c:	84 2b       	or	r24, r20
    1f3e:	8c 93       	st	X, r24
    1f40:	3d c0       	rjmp	.+122    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1f42:	1a 82       	std	Y+2, r1	; 0x02
    1f44:	3b c0       	rjmp	.+118    	; 0x1fbc <DIO_u8SetPinValue+0x24e>
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PinValue)
    1f46:	8d 81       	ldd	r24, Y+5	; 0x05
    1f48:	28 2f       	mov	r18, r24
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	3f 83       	std	Y+7, r19	; 0x07
    1f4e:	2e 83       	std	Y+6, r18	; 0x06
    1f50:	8e 81       	ldd	r24, Y+6	; 0x06
    1f52:	9f 81       	ldd	r25, Y+7	; 0x07
    1f54:	00 97       	sbiw	r24, 0x00	; 0
    1f56:	31 f0       	breq	.+12     	; 0x1f64 <DIO_u8SetPinValue+0x1f6>
    1f58:	2e 81       	ldd	r18, Y+6	; 0x06
    1f5a:	3f 81       	ldd	r19, Y+7	; 0x07
    1f5c:	21 30       	cpi	r18, 0x01	; 1
    1f5e:	31 05       	cpc	r19, r1
    1f60:	b1 f0       	breq	.+44     	; 0x1f8e <DIO_u8SetPinValue+0x220>
    1f62:	29 c0       	rjmp	.+82     	; 0x1fb6 <DIO_u8SetPinValue+0x248>
			{
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1f64:	a5 e3       	ldi	r26, 0x35	; 53
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e5 e3       	ldi	r30, 0x35	; 53
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8c 81       	ldd	r24, Y+4	; 0x04
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <DIO_u8SetPinValue+0x214>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <DIO_u8SetPinValue+0x210>
    1f86:	80 95       	com	r24
    1f88:	84 23       	and	r24, r20
    1f8a:	8c 93       	st	X, r24
    1f8c:	17 c0       	rjmp	.+46     	; 0x1fbc <DIO_u8SetPinValue+0x24e>
				break;

			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1f8e:	a2 e3       	ldi	r26, 0x32	; 50
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e2 e3       	ldi	r30, 0x32	; 50
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	02 2e       	mov	r0, r18
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <DIO_u8SetPinValue+0x23e>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	0a 94       	dec	r0
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <DIO_u8SetPinValue+0x23a>
    1fb0:	84 2b       	or	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	03 c0       	rjmp	.+6      	; 0x1fbc <DIO_u8SetPinValue+0x24e>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
    1fb6:	1a 82       	std	Y+2, r1	; 0x02
    1fb8:	01 c0       	rjmp	.+2      	; 0x1fbc <DIO_u8SetPinValue+0x24e>
		}
	}

	else
	{
		u8 Local_u8ErrorState = STD_TYPES_NOK;
    1fba:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1fbe:	2f 96       	adiw	r28, 0x0f	; 15
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	f8 94       	cli
    1fc4:	de bf       	out	0x3e, r29	; 62
    1fc6:	0f be       	out	0x3f, r0	; 63
    1fc8:	cd bf       	out	0x3d, r28	; 61
    1fca:	cf 91       	pop	r28
    1fcc:	df 91       	pop	r29
    1fce:	08 95       	ret

00001fd0 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 *Copy_pu8ReturnedPinValue)
{
    1fd0:	df 93       	push	r29
    1fd2:	cf 93       	push	r28
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	28 97       	sbiw	r28, 0x08	; 8
    1fda:	0f b6       	in	r0, 0x3f	; 63
    1fdc:	f8 94       	cli
    1fde:	de bf       	out	0x3e, r29	; 62
    1fe0:	0f be       	out	0x3f, r0	; 63
    1fe2:	cd bf       	out	0x3d, r28	; 61
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
    1fe6:	6c 83       	std	Y+4, r22	; 0x04
    1fe8:	5e 83       	std	Y+6, r21	; 0x06
    1fea:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8PinValue;

	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_u8PinId <= DIO_u8_PIN7 && Copy_pu8ReturnedPinValue != NULL)
    1ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff2:	84 30       	cpi	r24, 0x04	; 4
    1ff4:	08 f0       	brcs	.+2      	; 0x1ff8 <DIO_u8GetPinValue+0x28>
    1ff6:	9f c0       	rjmp	.+318    	; 0x2136 <DIO_u8GetPinValue+0x166>
    1ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffa:	88 30       	cpi	r24, 0x08	; 8
    1ffc:	08 f0       	brcs	.+2      	; 0x2000 <DIO_u8GetPinValue+0x30>
    1ffe:	9b c0       	rjmp	.+310    	; 0x2136 <DIO_u8GetPinValue+0x166>
    2000:	8d 81       	ldd	r24, Y+5	; 0x05
    2002:	9e 81       	ldd	r25, Y+6	; 0x06
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	09 f4       	brne	.+2      	; 0x200a <DIO_u8GetPinValue+0x3a>
    2008:	96 c0       	rjmp	.+300    	; 0x2136 <DIO_u8GetPinValue+0x166>
	{

		switch (Copy_u8PortId)
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	28 2f       	mov	r18, r24
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	38 87       	std	Y+8, r19	; 0x08
    2012:	2f 83       	std	Y+7, r18	; 0x07
    2014:	4f 81       	ldd	r20, Y+7	; 0x07
    2016:	58 85       	ldd	r21, Y+8	; 0x08
    2018:	41 30       	cpi	r20, 0x01	; 1
    201a:	51 05       	cpc	r21, r1
    201c:	a9 f1       	breq	.+106    	; 0x2088 <DIO_u8GetPinValue+0xb8>
    201e:	8f 81       	ldd	r24, Y+7	; 0x07
    2020:	98 85       	ldd	r25, Y+8	; 0x08
    2022:	82 30       	cpi	r24, 0x02	; 2
    2024:	91 05       	cpc	r25, r1
    2026:	34 f4       	brge	.+12     	; 0x2034 <DIO_u8GetPinValue+0x64>
    2028:	2f 81       	ldd	r18, Y+7	; 0x07
    202a:	38 85       	ldd	r19, Y+8	; 0x08
    202c:	21 15       	cp	r18, r1
    202e:	31 05       	cpc	r19, r1
    2030:	71 f0       	breq	.+28     	; 0x204e <DIO_u8GetPinValue+0x7e>
    2032:	82 c0       	rjmp	.+260    	; 0x2138 <DIO_u8GetPinValue+0x168>
    2034:	4f 81       	ldd	r20, Y+7	; 0x07
    2036:	58 85       	ldd	r21, Y+8	; 0x08
    2038:	42 30       	cpi	r20, 0x02	; 2
    203a:	51 05       	cpc	r21, r1
    203c:	09 f4       	brne	.+2      	; 0x2040 <DIO_u8GetPinValue+0x70>
    203e:	41 c0       	rjmp	.+130    	; 0x20c2 <DIO_u8GetPinValue+0xf2>
    2040:	8f 81       	ldd	r24, Y+7	; 0x07
    2042:	98 85       	ldd	r25, Y+8	; 0x08
    2044:	83 30       	cpi	r24, 0x03	; 3
    2046:	91 05       	cpc	r25, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <DIO_u8GetPinValue+0x7c>
    204a:	58 c0       	rjmp	.+176    	; 0x20fc <DIO_u8GetPinValue+0x12c>
    204c:	75 c0       	rjmp	.+234    	; 0x2138 <DIO_u8GetPinValue+0x168>
		{
		case DIO_u8_PORTA:
			Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG, Copy_u8PinId);
    204e:	e9 e3       	ldi	r30, 0x39	; 57
    2050:	f0 e0       	ldi	r31, 0x00	; 0
    2052:	80 81       	ld	r24, Z
    2054:	28 2f       	mov	r18, r24
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	8c 81       	ldd	r24, Y+4	; 0x04
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a9 01       	movw	r20, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <DIO_u8GetPinValue+0x96>
    2062:	55 95       	asr	r21
    2064:	47 95       	ror	r20
    2066:	8a 95       	dec	r24
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <DIO_u8GetPinValue+0x92>
    206a:	ca 01       	movw	r24, r20
    206c:	81 70       	andi	r24, 0x01	; 1
    206e:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	88 23       	and	r24, r24
    2074:	21 f4       	brne	.+8      	; 0x207e <DIO_u8GetPinValue+0xae>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2076:	ed 81       	ldd	r30, Y+5	; 0x05
    2078:	fe 81       	ldd	r31, Y+6	; 0x06
    207a:	10 82       	st	Z, r1
    207c:	5d c0       	rjmp	.+186    	; 0x2138 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    207e:	ed 81       	ldd	r30, Y+5	; 0x05
    2080:	fe 81       	ldd	r31, Y+6	; 0x06
    2082:	81 e0       	ldi	r24, 0x01	; 1
    2084:	80 83       	st	Z, r24
    2086:	58 c0       	rjmp	.+176    	; 0x2138 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTB:
			Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG, Copy_u8PinId);
    2088:	e6 e3       	ldi	r30, 0x36	; 54
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	8c 81       	ldd	r24, Y+4	; 0x04
    2094:	88 2f       	mov	r24, r24
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	a9 01       	movw	r20, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <DIO_u8GetPinValue+0xd0>
    209c:	55 95       	asr	r21
    209e:	47 95       	ror	r20
    20a0:	8a 95       	dec	r24
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <DIO_u8GetPinValue+0xcc>
    20a4:	ca 01       	movw	r24, r20
    20a6:	81 70       	andi	r24, 0x01	; 1
    20a8:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	88 23       	and	r24, r24
    20ae:	21 f4       	brne	.+8      	; 0x20b8 <DIO_u8GetPinValue+0xe8>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    20b0:	ed 81       	ldd	r30, Y+5	; 0x05
    20b2:	fe 81       	ldd	r31, Y+6	; 0x06
    20b4:	10 82       	st	Z, r1
    20b6:	40 c0       	rjmp	.+128    	; 0x2138 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    20b8:	ed 81       	ldd	r30, Y+5	; 0x05
    20ba:	fe 81       	ldd	r31, Y+6	; 0x06
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	80 83       	st	Z, r24
    20c0:	3b c0       	rjmp	.+118    	; 0x2138 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTC:
			Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG, Copy_u8PinId);
    20c2:	e3 e3       	ldi	r30, 0x33	; 51
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	8c 81       	ldd	r24, Y+4	; 0x04
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a9 01       	movw	r20, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <DIO_u8GetPinValue+0x10a>
    20d6:	55 95       	asr	r21
    20d8:	47 95       	ror	r20
    20da:	8a 95       	dec	r24
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <DIO_u8GetPinValue+0x106>
    20de:	ca 01       	movw	r24, r20
    20e0:	81 70       	andi	r24, 0x01	; 1
    20e2:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	88 23       	and	r24, r24
    20e8:	21 f4       	brne	.+8      	; 0x20f2 <DIO_u8GetPinValue+0x122>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    20ea:	ed 81       	ldd	r30, Y+5	; 0x05
    20ec:	fe 81       	ldd	r31, Y+6	; 0x06
    20ee:	10 82       	st	Z, r1
    20f0:	23 c0       	rjmp	.+70     	; 0x2138 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    20f2:	ed 81       	ldd	r30, Y+5	; 0x05
    20f4:	fe 81       	ldd	r31, Y+6	; 0x06
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	80 83       	st	Z, r24
    20fa:	1e c0       	rjmp	.+60     	; 0x2138 <DIO_u8GetPinValue+0x168>
			}
			break;

		case DIO_u8_PORTD:
			Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG, Copy_u8PinId);
    20fc:	e0 e3       	ldi	r30, 0x30	; 48
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	8c 81       	ldd	r24, Y+4	; 0x04
    2108:	88 2f       	mov	r24, r24
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	a9 01       	movw	r20, r18
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <DIO_u8GetPinValue+0x144>
    2110:	55 95       	asr	r21
    2112:	47 95       	ror	r20
    2114:	8a 95       	dec	r24
    2116:	e2 f7       	brpl	.-8      	; 0x2110 <DIO_u8GetPinValue+0x140>
    2118:	ca 01       	movw	r24, r20
    211a:	81 70       	andi	r24, 0x01	; 1
    211c:	89 83       	std	Y+1, r24	; 0x01
			if (Local_u8PinValue == DIO_u8_LOW)
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	88 23       	and	r24, r24
    2122:	21 f4       	brne	.+8      	; 0x212c <DIO_u8GetPinValue+0x15c>
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    2124:	ed 81       	ldd	r30, Y+5	; 0x05
    2126:	fe 81       	ldd	r31, Y+6	; 0x06
    2128:	10 82       	st	Z, r1
    212a:	06 c0       	rjmp	.+12     	; 0x2138 <DIO_u8GetPinValue+0x168>
			}

			else
			{
				*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    212c:	ed 81       	ldd	r30, Y+5	; 0x05
    212e:	fe 81       	ldd	r31, Y+6	; 0x06
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	80 83       	st	Z, r24
    2134:	01 c0       	rjmp	.+2      	; 0x2138 <DIO_u8GetPinValue+0x168>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2136:	1a 82       	std	Y+2, r1	; 0x02
	}

	return Local_u8ErrorState;
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
}
    213a:	28 96       	adiw	r28, 0x08	; 8
    213c:	0f b6       	in	r0, 0x3f	; 63
    213e:	f8 94       	cli
    2140:	de bf       	out	0x3e, r29	; 62
    2142:	0f be       	out	0x3f, r0	; 63
    2144:	cd bf       	out	0x3d, r28	; 61
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	08 95       	ret

0000214c <DIO_getPinValueWithoutPointer>:


u8 DIO_getPinValueWithoutPointer(u8 port_num, u8 pin_num)
{
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <DIO_getPinValueWithoutPointer+0x6>
    2152:	00 d0       	rcall	.+0      	; 0x2154 <DIO_getPinValueWithoutPointer+0x8>
    2154:	0f 92       	push	r0
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
    215a:	8a 83       	std	Y+2, r24	; 0x02
    215c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pin_value = DIO_u8_LOW;
    215e:	19 82       	std	Y+1, r1	; 0x01


	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	88 30       	cpi	r24, 0x08	; 8
    2164:	08 f0       	brcs	.+2      	; 0x2168 <DIO_getPinValueWithoutPointer+0x1c>
    2166:	6b c0       	rjmp	.+214    	; 0x223e <DIO_getPinValueWithoutPointer+0xf2>
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	84 30       	cpi	r24, 0x04	; 4
    216c:	08 f0       	brcs	.+2      	; 0x2170 <DIO_getPinValueWithoutPointer+0x24>
    216e:	67 c0       	rjmp	.+206    	; 0x223e <DIO_getPinValueWithoutPointer+0xf2>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch (port_num)
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	3d 83       	std	Y+5, r19	; 0x05
    2178:	2c 83       	std	Y+4, r18	; 0x04
    217a:	4c 81       	ldd	r20, Y+4	; 0x04
    217c:	5d 81       	ldd	r21, Y+5	; 0x05
    217e:	41 30       	cpi	r20, 0x01	; 1
    2180:	51 05       	cpc	r21, r1
    2182:	41 f1       	breq	.+80     	; 0x21d4 <DIO_getPinValueWithoutPointer+0x88>
    2184:	8c 81       	ldd	r24, Y+4	; 0x04
    2186:	9d 81       	ldd	r25, Y+5	; 0x05
    2188:	82 30       	cpi	r24, 0x02	; 2
    218a:	91 05       	cpc	r25, r1
    218c:	34 f4       	brge	.+12     	; 0x219a <DIO_getPinValueWithoutPointer+0x4e>
    218e:	2c 81       	ldd	r18, Y+4	; 0x04
    2190:	3d 81       	ldd	r19, Y+5	; 0x05
    2192:	21 15       	cp	r18, r1
    2194:	31 05       	cpc	r19, r1
    2196:	61 f0       	breq	.+24     	; 0x21b0 <DIO_getPinValueWithoutPointer+0x64>
    2198:	52 c0       	rjmp	.+164    	; 0x223e <DIO_getPinValueWithoutPointer+0xf2>
    219a:	4c 81       	ldd	r20, Y+4	; 0x04
    219c:	5d 81       	ldd	r21, Y+5	; 0x05
    219e:	42 30       	cpi	r20, 0x02	; 2
    21a0:	51 05       	cpc	r21, r1
    21a2:	51 f1       	breq	.+84     	; 0x21f8 <DIO_getPinValueWithoutPointer+0xac>
    21a4:	8c 81       	ldd	r24, Y+4	; 0x04
    21a6:	9d 81       	ldd	r25, Y+5	; 0x05
    21a8:	83 30       	cpi	r24, 0x03	; 3
    21aa:	91 05       	cpc	r25, r1
    21ac:	b9 f1       	breq	.+110    	; 0x221c <DIO_getPinValueWithoutPointer+0xd0>
    21ae:	47 c0       	rjmp	.+142    	; 0x223e <DIO_getPinValueWithoutPointer+0xf2>
				{
				case DIO_u8_PORTA:
					pin_value = GET_BIT(DIO_u8_PINA_REG, pin_num);
    21b0:	e9 e3       	ldi	r30, 0x39	; 57
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	28 2f       	mov	r18, r24
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a9 01       	movw	r20, r18
    21c2:	02 c0       	rjmp	.+4      	; 0x21c8 <DIO_getPinValueWithoutPointer+0x7c>
    21c4:	55 95       	asr	r21
    21c6:	47 95       	ror	r20
    21c8:	8a 95       	dec	r24
    21ca:	e2 f7       	brpl	.-8      	; 0x21c4 <DIO_getPinValueWithoutPointer+0x78>
    21cc:	ca 01       	movw	r24, r20
    21ce:	81 70       	andi	r24, 0x01	; 1
    21d0:	89 83       	std	Y+1, r24	; 0x01
    21d2:	35 c0       	rjmp	.+106    	; 0x223e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTB:
					pin_value = GET_BIT(DIO_u8_PINB_REG, pin_num);
    21d4:	e6 e3       	ldi	r30, 0x36	; 54
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	88 2f       	mov	r24, r24
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	a9 01       	movw	r20, r18
    21e6:	02 c0       	rjmp	.+4      	; 0x21ec <DIO_getPinValueWithoutPointer+0xa0>
    21e8:	55 95       	asr	r21
    21ea:	47 95       	ror	r20
    21ec:	8a 95       	dec	r24
    21ee:	e2 f7       	brpl	.-8      	; 0x21e8 <DIO_getPinValueWithoutPointer+0x9c>
    21f0:	ca 01       	movw	r24, r20
    21f2:	81 70       	andi	r24, 0x01	; 1
    21f4:	89 83       	std	Y+1, r24	; 0x01
    21f6:	23 c0       	rjmp	.+70     	; 0x223e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTC:
					pin_value = GET_BIT(DIO_u8_PINC_REG, pin_num);
    21f8:	e3 e3       	ldi	r30, 0x33	; 51
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	8b 81       	ldd	r24, Y+3	; 0x03
    2204:	88 2f       	mov	r24, r24
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a9 01       	movw	r20, r18
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <DIO_getPinValueWithoutPointer+0xc4>
    220c:	55 95       	asr	r21
    220e:	47 95       	ror	r20
    2210:	8a 95       	dec	r24
    2212:	e2 f7       	brpl	.-8      	; 0x220c <DIO_getPinValueWithoutPointer+0xc0>
    2214:	ca 01       	movw	r24, r20
    2216:	81 70       	andi	r24, 0x01	; 1
    2218:	89 83       	std	Y+1, r24	; 0x01
    221a:	11 c0       	rjmp	.+34     	; 0x223e <DIO_getPinValueWithoutPointer+0xf2>
					break;

				case DIO_u8_PORTD:
					pin_value = GET_BIT(DIO_u8_PIND_REG, pin_num);
    221c:	e0 e3       	ldi	r30, 0x30	; 48
    221e:	f0 e0       	ldi	r31, 0x00	; 0
    2220:	80 81       	ld	r24, Z
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	88 2f       	mov	r24, r24
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	a9 01       	movw	r20, r18
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <DIO_getPinValueWithoutPointer+0xe8>
    2230:	55 95       	asr	r21
    2232:	47 95       	ror	r20
    2234:	8a 95       	dec	r24
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <DIO_getPinValueWithoutPointer+0xe4>
    2238:	ca 01       	movw	r24, r20
    223a:	81 70       	andi	r24, 0x01	; 1
    223c:	89 83       	std	Y+1, r24	; 0x01
					break;
				}
	}

	return pin_value;
    223e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <DIO_u8SetPortDirection>:




u8 DIO_u8SetPortDirection(u8 Copy_u8PortId, u8 Copy_u8PortDirection)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	2d 97       	sbiw	r28, 0x0d	; 13
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8PortId)
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	28 2f       	mov	r18, r24
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	3c 87       	std	Y+12, r19	; 0x0c
    2270:	2b 87       	std	Y+11, r18	; 0x0b
    2272:	8b 85       	ldd	r24, Y+11	; 0x0b
    2274:	9c 85       	ldd	r25, Y+12	; 0x0c
    2276:	81 30       	cpi	r24, 0x01	; 1
    2278:	91 05       	cpc	r25, r1
    227a:	71 f1       	breq	.+92     	; 0x22d8 <DIO_u8SetPortDirection+0x88>
    227c:	2b 85       	ldd	r18, Y+11	; 0x0b
    227e:	3c 85       	ldd	r19, Y+12	; 0x0c
    2280:	22 30       	cpi	r18, 0x02	; 2
    2282:	31 05       	cpc	r19, r1
    2284:	2c f4       	brge	.+10     	; 0x2290 <DIO_u8SetPortDirection+0x40>
    2286:	8b 85       	ldd	r24, Y+11	; 0x0b
    2288:	9c 85       	ldd	r25, Y+12	; 0x0c
    228a:	00 97       	sbiw	r24, 0x00	; 0
    228c:	69 f0       	breq	.+26     	; 0x22a8 <DIO_u8SetPortDirection+0x58>
    228e:	6b c0       	rjmp	.+214    	; 0x2366 <DIO_u8SetPortDirection+0x116>
    2290:	2b 85       	ldd	r18, Y+11	; 0x0b
    2292:	3c 85       	ldd	r19, Y+12	; 0x0c
    2294:	22 30       	cpi	r18, 0x02	; 2
    2296:	31 05       	cpc	r19, r1
    2298:	b9 f1       	breq	.+110    	; 0x2308 <DIO_u8SetPortDirection+0xb8>
    229a:	8b 85       	ldd	r24, Y+11	; 0x0b
    229c:	9c 85       	ldd	r25, Y+12	; 0x0c
    229e:	83 30       	cpi	r24, 0x03	; 3
    22a0:	91 05       	cpc	r25, r1
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <DIO_u8SetPortDirection+0x56>
    22a4:	49 c0       	rjmp	.+146    	; 0x2338 <DIO_u8SetPortDirection+0xe8>
    22a6:	5f c0       	rjmp	.+190    	; 0x2366 <DIO_u8SetPortDirection+0x116>
	{
	case DIO_u8_PORTA:
		switch (Copy_u8PortDirection)
    22a8:	8a 81       	ldd	r24, Y+2	; 0x02
    22aa:	28 2f       	mov	r18, r24
    22ac:	30 e0       	ldi	r19, 0x00	; 0
    22ae:	3a 87       	std	Y+10, r19	; 0x0a
    22b0:	29 87       	std	Y+9, r18	; 0x09
    22b2:	89 85       	ldd	r24, Y+9	; 0x09
    22b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b6:	00 97       	sbiw	r24, 0x00	; 0
    22b8:	31 f0       	breq	.+12     	; 0x22c6 <DIO_u8SetPortDirection+0x76>
    22ba:	29 85       	ldd	r18, Y+9	; 0x09
    22bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    22be:	21 30       	cpi	r18, 0x01	; 1
    22c0:	31 05       	cpc	r19, r1
    22c2:	29 f0       	breq	.+10     	; 0x22ce <DIO_u8SetPortDirection+0x7e>
    22c4:	50 c0       	rjmp	.+160    	; 0x2366 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRA_REG = DIO_u8PortLow;
    22c6:	ea e3       	ldi	r30, 0x3A	; 58
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	10 82       	st	Z, r1
    22cc:	4c c0       	rjmp	.+152    	; 0x2366 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRA_REG = DIO_u8PortHigh;
    22ce:	ea e3       	ldi	r30, 0x3A	; 58
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	8f ef       	ldi	r24, 0xFF	; 255
    22d4:	80 83       	st	Z, r24
    22d6:	47 c0       	rjmp	.+142    	; 0x2366 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTB:
		switch (Copy_u8PortDirection)
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	28 2f       	mov	r18, r24
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	38 87       	std	Y+8, r19	; 0x08
    22e0:	2f 83       	std	Y+7, r18	; 0x07
    22e2:	8f 81       	ldd	r24, Y+7	; 0x07
    22e4:	98 85       	ldd	r25, Y+8	; 0x08
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	31 f0       	breq	.+12     	; 0x22f6 <DIO_u8SetPortDirection+0xa6>
    22ea:	2f 81       	ldd	r18, Y+7	; 0x07
    22ec:	38 85       	ldd	r19, Y+8	; 0x08
    22ee:	21 30       	cpi	r18, 0x01	; 1
    22f0:	31 05       	cpc	r19, r1
    22f2:	29 f0       	breq	.+10     	; 0x22fe <DIO_u8SetPortDirection+0xae>
    22f4:	38 c0       	rjmp	.+112    	; 0x2366 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRB_REG = DIO_u8PortLow;
    22f6:	e7 e3       	ldi	r30, 0x37	; 55
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	10 82       	st	Z, r1
    22fc:	34 c0       	rjmp	.+104    	; 0x2366 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRB_REG = DIO_u8PortHigh;
    22fe:	e7 e3       	ldi	r30, 0x37	; 55
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	8f ef       	ldi	r24, 0xFF	; 255
    2304:	80 83       	st	Z, r24
    2306:	2f c0       	rjmp	.+94     	; 0x2366 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTC:
		switch (Copy_u8PortDirection)
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	3e 83       	std	Y+6, r19	; 0x06
    2310:	2d 83       	std	Y+5, r18	; 0x05
    2312:	8d 81       	ldd	r24, Y+5	; 0x05
    2314:	9e 81       	ldd	r25, Y+6	; 0x06
    2316:	00 97       	sbiw	r24, 0x00	; 0
    2318:	31 f0       	breq	.+12     	; 0x2326 <DIO_u8SetPortDirection+0xd6>
    231a:	2d 81       	ldd	r18, Y+5	; 0x05
    231c:	3e 81       	ldd	r19, Y+6	; 0x06
    231e:	21 30       	cpi	r18, 0x01	; 1
    2320:	31 05       	cpc	r19, r1
    2322:	29 f0       	breq	.+10     	; 0x232e <DIO_u8SetPortDirection+0xde>
    2324:	20 c0       	rjmp	.+64     	; 0x2366 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRC_REG = DIO_u8PortLow;
    2326:	e4 e3       	ldi	r30, 0x34	; 52
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	10 82       	st	Z, r1
    232c:	1c c0       	rjmp	.+56     	; 0x2366 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRC_REG = DIO_u8PortHigh;
    232e:	e4 e3       	ldi	r30, 0x34	; 52
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	8f ef       	ldi	r24, 0xFF	; 255
    2334:	80 83       	st	Z, r24
    2336:	17 c0       	rjmp	.+46     	; 0x2366 <DIO_u8SetPortDirection+0x116>
			break;
		}
		break;

	case DIO_u8_PORTD:
		switch (Copy_u8PortDirection)
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	28 2f       	mov	r18, r24
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	3c 83       	std	Y+4, r19	; 0x04
    2340:	2b 83       	std	Y+3, r18	; 0x03
    2342:	8b 81       	ldd	r24, Y+3	; 0x03
    2344:	9c 81       	ldd	r25, Y+4	; 0x04
    2346:	00 97       	sbiw	r24, 0x00	; 0
    2348:	31 f0       	breq	.+12     	; 0x2356 <DIO_u8SetPortDirection+0x106>
    234a:	2b 81       	ldd	r18, Y+3	; 0x03
    234c:	3c 81       	ldd	r19, Y+4	; 0x04
    234e:	21 30       	cpi	r18, 0x01	; 1
    2350:	31 05       	cpc	r19, r1
    2352:	29 f0       	breq	.+10     	; 0x235e <DIO_u8SetPortDirection+0x10e>
    2354:	08 c0       	rjmp	.+16     	; 0x2366 <DIO_u8SetPortDirection+0x116>
		{
		case DIO_u8_INPUT:
			DIO_u8_DDRD_REG = DIO_u8PortLow;
    2356:	e1 e3       	ldi	r30, 0x31	; 49
    2358:	f0 e0       	ldi	r31, 0x00	; 0
    235a:	10 82       	st	Z, r1
    235c:	04 c0       	rjmp	.+8      	; 0x2366 <DIO_u8SetPortDirection+0x116>
			break;
		case DIO_u8_OUTPUT:
			DIO_u8_DDRD_REG = DIO_u8PortHigh;
    235e:	e1 e3       	ldi	r30, 0x31	; 49
    2360:	f0 e0       	ldi	r31, 0x00	; 0
    2362:	8f ef       	ldi	r24, 0xFF	; 255
    2364:	80 83       	st	Z, r24
			break;
		}
		break;
	}
}
    2366:	2d 96       	adiw	r28, 0x0d	; 13
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue(u8 Copy_u8PortId, u8 Copy_u8PortValue)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	2d 97       	sbiw	r28, 0x0d	; 13
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	8a 83       	std	Y+2, r24	; 0x02
    238e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD)
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	84 30       	cpi	r24, 0x04	; 4
    2398:	08 f0       	brcs	.+2      	; 0x239c <DIO_u8SetPortValue+0x24>
    239a:	80 c0       	rjmp	.+256    	; 0x249c <DIO_u8SetPortValue+0x124>
	{
		switch (Copy_u8PortId)
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	3d 87       	std	Y+13, r19	; 0x0d
    23a4:	2c 87       	std	Y+12, r18	; 0x0c
    23a6:	8c 85       	ldd	r24, Y+12	; 0x0c
    23a8:	9d 85       	ldd	r25, Y+13	; 0x0d
    23aa:	81 30       	cpi	r24, 0x01	; 1
    23ac:	91 05       	cpc	r25, r1
    23ae:	71 f1       	breq	.+92     	; 0x240c <DIO_u8SetPortValue+0x94>
    23b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    23b2:	3d 85       	ldd	r19, Y+13	; 0x0d
    23b4:	22 30       	cpi	r18, 0x02	; 2
    23b6:	31 05       	cpc	r19, r1
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <DIO_u8SetPortValue+0x4c>
    23ba:	8c 85       	ldd	r24, Y+12	; 0x0c
    23bc:	9d 85       	ldd	r25, Y+13	; 0x0d
    23be:	00 97       	sbiw	r24, 0x00	; 0
    23c0:	69 f0       	breq	.+26     	; 0x23dc <DIO_u8SetPortValue+0x64>
    23c2:	6d c0       	rjmp	.+218    	; 0x249e <DIO_u8SetPortValue+0x126>
    23c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    23c6:	3d 85       	ldd	r19, Y+13	; 0x0d
    23c8:	22 30       	cpi	r18, 0x02	; 2
    23ca:	31 05       	cpc	r19, r1
    23cc:	b9 f1       	breq	.+110    	; 0x243c <DIO_u8SetPortValue+0xc4>
    23ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    23d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    23d2:	83 30       	cpi	r24, 0x03	; 3
    23d4:	91 05       	cpc	r25, r1
    23d6:	09 f4       	brne	.+2      	; 0x23da <DIO_u8SetPortValue+0x62>
    23d8:	49 c0       	rjmp	.+146    	; 0x246c <DIO_u8SetPortValue+0xf4>
    23da:	61 c0       	rjmp	.+194    	; 0x249e <DIO_u8SetPortValue+0x126>
		{
		case DIO_u8_PORTA:
			switch (Copy_u8PortValue)
    23dc:	8b 81       	ldd	r24, Y+3	; 0x03
    23de:	28 2f       	mov	r18, r24
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	3b 87       	std	Y+11, r19	; 0x0b
    23e4:	2a 87       	std	Y+10, r18	; 0x0a
    23e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	31 f0       	breq	.+12     	; 0x23fa <DIO_u8SetPortValue+0x82>
    23ee:	2a 85       	ldd	r18, Y+10	; 0x0a
    23f0:	3b 85       	ldd	r19, Y+11	; 0x0b
    23f2:	21 30       	cpi	r18, 0x01	; 1
    23f4:	31 05       	cpc	r19, r1
    23f6:	29 f0       	breq	.+10     	; 0x2402 <DIO_u8SetPortValue+0x8a>
    23f8:	52 c0       	rjmp	.+164    	; 0x249e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTA_REG = DIO_u8PortLow;
    23fa:	eb e3       	ldi	r30, 0x3B	; 59
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	10 82       	st	Z, r1
    2400:	4e c0       	rjmp	.+156    	; 0x249e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTA_REG = DIO_u8PortHigh;
    2402:	eb e3       	ldi	r30, 0x3B	; 59
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	8f ef       	ldi	r24, 0xFF	; 255
    2408:	80 83       	st	Z, r24
    240a:	49 c0       	rjmp	.+146    	; 0x249e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTB:
			switch (Copy_u8PortValue)
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	39 87       	std	Y+9, r19	; 0x09
    2414:	28 87       	std	Y+8, r18	; 0x08
    2416:	88 85       	ldd	r24, Y+8	; 0x08
    2418:	99 85       	ldd	r25, Y+9	; 0x09
    241a:	00 97       	sbiw	r24, 0x00	; 0
    241c:	31 f0       	breq	.+12     	; 0x242a <DIO_u8SetPortValue+0xb2>
    241e:	28 85       	ldd	r18, Y+8	; 0x08
    2420:	39 85       	ldd	r19, Y+9	; 0x09
    2422:	21 30       	cpi	r18, 0x01	; 1
    2424:	31 05       	cpc	r19, r1
    2426:	29 f0       	breq	.+10     	; 0x2432 <DIO_u8SetPortValue+0xba>
    2428:	3a c0       	rjmp	.+116    	; 0x249e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTB_REG = DIO_u8PortLow;
    242a:	e8 e3       	ldi	r30, 0x38	; 56
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	10 82       	st	Z, r1
    2430:	36 c0       	rjmp	.+108    	; 0x249e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTB_REG = DIO_u8PortHigh;
    2432:	e8 e3       	ldi	r30, 0x38	; 56
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	8f ef       	ldi	r24, 0xFF	; 255
    2438:	80 83       	st	Z, r24
    243a:	31 c0       	rjmp	.+98     	; 0x249e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTC:
			switch (Copy_u8PortValue)
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	28 2f       	mov	r18, r24
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	3f 83       	std	Y+7, r19	; 0x07
    2444:	2e 83       	std	Y+6, r18	; 0x06
    2446:	8e 81       	ldd	r24, Y+6	; 0x06
    2448:	9f 81       	ldd	r25, Y+7	; 0x07
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	31 f0       	breq	.+12     	; 0x245a <DIO_u8SetPortValue+0xe2>
    244e:	2e 81       	ldd	r18, Y+6	; 0x06
    2450:	3f 81       	ldd	r19, Y+7	; 0x07
    2452:	21 30       	cpi	r18, 0x01	; 1
    2454:	31 05       	cpc	r19, r1
    2456:	29 f0       	breq	.+10     	; 0x2462 <DIO_u8SetPortValue+0xea>
    2458:	22 c0       	rjmp	.+68     	; 0x249e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTC_REG = DIO_u8PortLow;
    245a:	e5 e3       	ldi	r30, 0x35	; 53
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	10 82       	st	Z, r1
    2460:	1e c0       	rjmp	.+60     	; 0x249e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTC_REG = DIO_u8PortHigh;
    2462:	e5 e3       	ldi	r30, 0x35	; 53
    2464:	f0 e0       	ldi	r31, 0x00	; 0
    2466:	8f ef       	ldi	r24, 0xFF	; 255
    2468:	80 83       	st	Z, r24
    246a:	19 c0       	rjmp	.+50     	; 0x249e <DIO_u8SetPortValue+0x126>
				break;
			}
			break;

		case DIO_u8_PORTD:
			switch (Copy_u8PortValue)
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	28 2f       	mov	r18, r24
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	3d 83       	std	Y+5, r19	; 0x05
    2474:	2c 83       	std	Y+4, r18	; 0x04
    2476:	8c 81       	ldd	r24, Y+4	; 0x04
    2478:	9d 81       	ldd	r25, Y+5	; 0x05
    247a:	00 97       	sbiw	r24, 0x00	; 0
    247c:	31 f0       	breq	.+12     	; 0x248a <DIO_u8SetPortValue+0x112>
    247e:	2c 81       	ldd	r18, Y+4	; 0x04
    2480:	3d 81       	ldd	r19, Y+5	; 0x05
    2482:	21 30       	cpi	r18, 0x01	; 1
    2484:	31 05       	cpc	r19, r1
    2486:	29 f0       	breq	.+10     	; 0x2492 <DIO_u8SetPortValue+0x11a>
    2488:	0a c0       	rjmp	.+20     	; 0x249e <DIO_u8SetPortValue+0x126>
			{
			case DIO_u8_LOW:
				DIO_u8_PORTD_REG = DIO_u8PortLow;
    248a:	e2 e3       	ldi	r30, 0x32	; 50
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	10 82       	st	Z, r1
    2490:	06 c0       	rjmp	.+12     	; 0x249e <DIO_u8SetPortValue+0x126>
				break;
			case DIO_u8_HIGH:
				DIO_u8_PORTD_REG = DIO_u8PortHigh;
    2492:	e2 e3       	ldi	r30, 0x32	; 50
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	8f ef       	ldi	r24, 0xFF	; 255
    2498:	80 83       	st	Z, r24
    249a:	01 c0       	rjmp	.+2      	; 0x249e <DIO_u8SetPortValue+0x126>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    249c:	19 82       	std	Y+1, r1	; 0x01
	}

	return Local_u8ErrorState;
    249e:	89 81       	ldd	r24, Y+1	; 0x01
}
    24a0:	2d 96       	adiw	r28, 0x0d	; 13
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	cf 91       	pop	r28
    24ae:	df 91       	pop	r29
    24b0:	08 95       	ret

000024b2 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue(u8 Copy_u8PortId, u8 *Copy_pu8ReturnedPortValue)
{
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <DIO_u8GetPortValue+0x6>
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <DIO_u8GetPortValue+0x8>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <DIO_u8GetPortValue+0xa>
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
    24c0:	8a 83       	std	Y+2, r24	; 0x02
    24c2:	7c 83       	std	Y+4, r23	; 0x04
    24c4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8PortId <= DIO_u8_PORTD && Copy_pu8ReturnedPortValue != NULL)
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	84 30       	cpi	r24, 0x04	; 4
    24ce:	08 f0       	brcs	.+2      	; 0x24d2 <DIO_u8GetPortValue+0x20>
    24d0:	3f c0       	rjmp	.+126    	; 0x2550 <DIO_u8GetPortValue+0x9e>
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	d9 f1       	breq	.+118    	; 0x2550 <DIO_u8GetPortValue+0x9e>
	{
		switch (Copy_u8PortId)
    24da:	8a 81       	ldd	r24, Y+2	; 0x02
    24dc:	28 2f       	mov	r18, r24
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	3e 83       	std	Y+6, r19	; 0x06
    24e2:	2d 83       	std	Y+5, r18	; 0x05
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	9e 81       	ldd	r25, Y+6	; 0x06
    24e8:	81 30       	cpi	r24, 0x01	; 1
    24ea:	91 05       	cpc	r25, r1
    24ec:	e1 f0       	breq	.+56     	; 0x2526 <DIO_u8GetPortValue+0x74>
    24ee:	2d 81       	ldd	r18, Y+5	; 0x05
    24f0:	3e 81       	ldd	r19, Y+6	; 0x06
    24f2:	22 30       	cpi	r18, 0x02	; 2
    24f4:	31 05       	cpc	r19, r1
    24f6:	2c f4       	brge	.+10     	; 0x2502 <DIO_u8GetPortValue+0x50>
    24f8:	8d 81       	ldd	r24, Y+5	; 0x05
    24fa:	9e 81       	ldd	r25, Y+6	; 0x06
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	61 f0       	breq	.+24     	; 0x2518 <DIO_u8GetPortValue+0x66>
    2500:	28 c0       	rjmp	.+80     	; 0x2552 <DIO_u8GetPortValue+0xa0>
    2502:	2d 81       	ldd	r18, Y+5	; 0x05
    2504:	3e 81       	ldd	r19, Y+6	; 0x06
    2506:	22 30       	cpi	r18, 0x02	; 2
    2508:	31 05       	cpc	r19, r1
    250a:	a1 f0       	breq	.+40     	; 0x2534 <DIO_u8GetPortValue+0x82>
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	9e 81       	ldd	r25, Y+6	; 0x06
    2510:	83 30       	cpi	r24, 0x03	; 3
    2512:	91 05       	cpc	r25, r1
    2514:	b1 f0       	breq	.+44     	; 0x2542 <DIO_u8GetPortValue+0x90>
    2516:	1d c0       	rjmp	.+58     	; 0x2552 <DIO_u8GetPortValue+0xa0>
		{
		case DIO_u8_PORTA:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINA_REG;
    2518:	e9 e3       	ldi	r30, 0x39	; 57
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	eb 81       	ldd	r30, Y+3	; 0x03
    2520:	fc 81       	ldd	r31, Y+4	; 0x04
    2522:	80 83       	st	Z, r24
    2524:	16 c0       	rjmp	.+44     	; 0x2552 <DIO_u8GetPortValue+0xa0>
			break;
		case DIO_u8_PORTB:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINB_REG;
    2526:	e6 e3       	ldi	r30, 0x36	; 54
    2528:	f0 e0       	ldi	r31, 0x00	; 0
    252a:	80 81       	ld	r24, Z
    252c:	eb 81       	ldd	r30, Y+3	; 0x03
    252e:	fc 81       	ldd	r31, Y+4	; 0x04
    2530:	80 83       	st	Z, r24
    2532:	0f c0       	rjmp	.+30     	; 0x2552 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTC:
			*Copy_pu8ReturnedPortValue = DIO_u8_PINC_REG;
    2534:	e3 e3       	ldi	r30, 0x33	; 51
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	eb 81       	ldd	r30, Y+3	; 0x03
    253c:	fc 81       	ldd	r31, Y+4	; 0x04
    253e:	80 83       	st	Z, r24
    2540:	08 c0       	rjmp	.+16     	; 0x2552 <DIO_u8GetPortValue+0xa0>
			break;

		case DIO_u8_PORTD:
			*Copy_pu8ReturnedPortValue = DIO_u8_PIND_REG;
    2542:	e0 e3       	ldi	r30, 0x30	; 48
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	eb 81       	ldd	r30, Y+3	; 0x03
    254a:	fc 81       	ldd	r31, Y+4	; 0x04
    254c:	80 83       	st	Z, r24
    254e:	01 c0       	rjmp	.+2      	; 0x2552 <DIO_u8GetPortValue+0xa0>
		}
	}

	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2550:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2552:	89 81       	ldd	r24, Y+1	; 0x01
}
    2554:	26 96       	adiw	r28, 0x06	; 6
    2556:	0f b6       	in	r0, 0x3f	; 63
    2558:	f8 94       	cli
    255a:	de bf       	out	0x3e, r29	; 62
    255c:	0f be       	out	0x3f, r0	; 63
    255e:	cd bf       	out	0x3d, r28	; 61
    2560:	cf 91       	pop	r28
    2562:	df 91       	pop	r29
    2564:	08 95       	ret

00002566 <DIO_u8SetValueToAllPins>:

u8 DIO_u8SetValueToAllPins(u8 Copy_u8PortId, u8 Copy_u8Pin0, u8 Copy_u8Pin1, u8 Copy_u8Pin2, u8 Copy_u8Pin3, u8 Copy_u8Pin4, u8 Copy_u8Pin5, u8 Copy_u8Pin6, u8 Copy_u8Pin7)
{
    2566:	8f 92       	push	r8
    2568:	af 92       	push	r10
    256a:	cf 92       	push	r12
    256c:	ef 92       	push	r14
    256e:	0f 93       	push	r16
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	2c 97       	sbiw	r28, 0x0c	; 12
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	6a 83       	std	Y+2, r22	; 0x02
    2588:	4b 83       	std	Y+3, r20	; 0x03
    258a:	2c 83       	std	Y+4, r18	; 0x04
    258c:	0d 83       	std	Y+5, r16	; 0x05
    258e:	ee 82       	std	Y+6, r14	; 0x06
    2590:	cf 82       	std	Y+7, r12	; 0x07
    2592:	a8 86       	std	Y+8, r10	; 0x08
    2594:	89 86       	std	Y+9, r8	; 0x09
	switch (Copy_u8PortId)
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	3b 87       	std	Y+11, r19	; 0x0b
    259e:	2a 87       	std	Y+10, r18	; 0x0a
    25a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a4:	81 30       	cpi	r24, 0x01	; 1
    25a6:	91 05       	cpc	r25, r1
    25a8:	09 f4       	brne	.+2      	; 0x25ac <DIO_u8SetValueToAllPins+0x46>
    25aa:	a8 c0       	rjmp	.+336    	; 0x26fc <DIO_u8SetValueToAllPins+0x196>
    25ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    25ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    25b0:	22 30       	cpi	r18, 0x02	; 2
    25b2:	31 05       	cpc	r19, r1
    25b4:	2c f4       	brge	.+10     	; 0x25c0 <DIO_u8SetValueToAllPins+0x5a>
    25b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	71 f0       	breq	.+28     	; 0x25da <DIO_u8SetValueToAllPins+0x74>
    25be:	50 c2       	rjmp	.+1184   	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
    25c0:	2a 85       	ldd	r18, Y+10	; 0x0a
    25c2:	3b 85       	ldd	r19, Y+11	; 0x0b
    25c4:	22 30       	cpi	r18, 0x02	; 2
    25c6:	31 05       	cpc	r19, r1
    25c8:	09 f4       	brne	.+2      	; 0x25cc <DIO_u8SetValueToAllPins+0x66>
    25ca:	29 c1       	rjmp	.+594    	; 0x281e <DIO_u8SetValueToAllPins+0x2b8>
    25cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    25d0:	83 30       	cpi	r24, 0x03	; 3
    25d2:	91 05       	cpc	r25, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <DIO_u8SetValueToAllPins+0x72>
    25d6:	b4 c1       	rjmp	.+872    	; 0x2940 <DIO_u8SetValueToAllPins+0x3da>
    25d8:	43 c2       	rjmp	.+1158   	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
	{
	case DIO_u8_PORTA:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	81 30       	cpi	r24, 0x01	; 1
    25de:	41 f4       	brne	.+16     	; 0x25f0 <DIO_u8SetValueToAllPins+0x8a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    25e0:	ab e3       	ldi	r26, 0x3B	; 59
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	eb e3       	ldi	r30, 0x3B	; 59
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	81 60       	ori	r24, 0x01	; 1
    25ec:	8c 93       	st	X, r24
    25ee:	07 c0       	rjmp	.+14     	; 0x25fe <DIO_u8SetValueToAllPins+0x98>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN0);
    25f0:	ab e3       	ldi	r26, 0x3B	; 59
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	eb e3       	ldi	r30, 0x3B	; 59
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	8e 7f       	andi	r24, 0xFE	; 254
    25fc:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	81 30       	cpi	r24, 0x01	; 1
    2602:	41 f4       	brne	.+16     	; 0x2614 <DIO_u8SetValueToAllPins+0xae>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    2604:	ab e3       	ldi	r26, 0x3B	; 59
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	eb e3       	ldi	r30, 0x3B	; 59
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	80 81       	ld	r24, Z
    260e:	82 60       	ori	r24, 0x02	; 2
    2610:	8c 93       	st	X, r24
    2612:	07 c0       	rjmp	.+14     	; 0x2622 <DIO_u8SetValueToAllPins+0xbc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN1);
    2614:	ab e3       	ldi	r26, 0x3B	; 59
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	eb e3       	ldi	r30, 0x3B	; 59
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	8d 7f       	andi	r24, 0xFD	; 253
    2620:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2622:	8c 81       	ldd	r24, Y+4	; 0x04
    2624:	81 30       	cpi	r24, 0x01	; 1
    2626:	41 f4       	brne	.+16     	; 0x2638 <DIO_u8SetValueToAllPins+0xd2>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    2628:	ab e3       	ldi	r26, 0x3B	; 59
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	eb e3       	ldi	r30, 0x3B	; 59
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	84 60       	ori	r24, 0x04	; 4
    2634:	8c 93       	st	X, r24
    2636:	07 c0       	rjmp	.+14     	; 0x2646 <DIO_u8SetValueToAllPins+0xe0>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN2);
    2638:	ab e3       	ldi	r26, 0x3B	; 59
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	eb e3       	ldi	r30, 0x3B	; 59
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8b 7f       	andi	r24, 0xFB	; 251
    2644:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	81 30       	cpi	r24, 0x01	; 1
    264a:	41 f4       	brne	.+16     	; 0x265c <DIO_u8SetValueToAllPins+0xf6>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    264c:	ab e3       	ldi	r26, 0x3B	; 59
    264e:	b0 e0       	ldi	r27, 0x00	; 0
    2650:	eb e3       	ldi	r30, 0x3B	; 59
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	80 81       	ld	r24, Z
    2656:	88 60       	ori	r24, 0x08	; 8
    2658:	8c 93       	st	X, r24
    265a:	07 c0       	rjmp	.+14     	; 0x266a <DIO_u8SetValueToAllPins+0x104>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN3);
    265c:	ab e3       	ldi	r26, 0x3B	; 59
    265e:	b0 e0       	ldi	r27, 0x00	; 0
    2660:	eb e3       	ldi	r30, 0x3B	; 59
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	80 81       	ld	r24, Z
    2666:	87 7f       	andi	r24, 0xF7	; 247
    2668:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    266a:	8e 81       	ldd	r24, Y+6	; 0x06
    266c:	81 30       	cpi	r24, 0x01	; 1
    266e:	41 f4       	brne	.+16     	; 0x2680 <DIO_u8SetValueToAllPins+0x11a>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2670:	ab e3       	ldi	r26, 0x3B	; 59
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	eb e3       	ldi	r30, 0x3B	; 59
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	80 81       	ld	r24, Z
    267a:	80 61       	ori	r24, 0x10	; 16
    267c:	8c 93       	st	X, r24
    267e:	07 c0       	rjmp	.+14     	; 0x268e <DIO_u8SetValueToAllPins+0x128>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN4);
    2680:	ab e3       	ldi	r26, 0x3B	; 59
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	eb e3       	ldi	r30, 0x3B	; 59
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	8f 7e       	andi	r24, 0xEF	; 239
    268c:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    268e:	8f 81       	ldd	r24, Y+7	; 0x07
    2690:	81 30       	cpi	r24, 0x01	; 1
    2692:	41 f4       	brne	.+16     	; 0x26a4 <DIO_u8SetValueToAllPins+0x13e>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    2694:	ab e3       	ldi	r26, 0x3B	; 59
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	eb e3       	ldi	r30, 0x3B	; 59
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	80 62       	ori	r24, 0x20	; 32
    26a0:	8c 93       	st	X, r24
    26a2:	07 c0       	rjmp	.+14     	; 0x26b2 <DIO_u8SetValueToAllPins+0x14c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN5);
    26a4:	ab e3       	ldi	r26, 0x3B	; 59
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	eb e3       	ldi	r30, 0x3B	; 59
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	8f 7d       	andi	r24, 0xDF	; 223
    26b0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    26b2:	88 85       	ldd	r24, Y+8	; 0x08
    26b4:	81 30       	cpi	r24, 0x01	; 1
    26b6:	41 f4       	brne	.+16     	; 0x26c8 <DIO_u8SetValueToAllPins+0x162>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    26b8:	ab e3       	ldi	r26, 0x3B	; 59
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	eb e3       	ldi	r30, 0x3B	; 59
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	80 64       	ori	r24, 0x40	; 64
    26c4:	8c 93       	st	X, r24
    26c6:	07 c0       	rjmp	.+14     	; 0x26d6 <DIO_u8SetValueToAllPins+0x170>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN6);
    26c8:	ab e3       	ldi	r26, 0x3B	; 59
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	eb e3       	ldi	r30, 0x3B	; 59
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	8f 7b       	andi	r24, 0xBF	; 191
    26d4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	41 f4       	brne	.+16     	; 0x26ec <DIO_u8SetValueToAllPins+0x186>
		{
			SET_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    26dc:	ab e3       	ldi	r26, 0x3B	; 59
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	eb e3       	ldi	r30, 0x3B	; 59
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	80 68       	ori	r24, 0x80	; 128
    26e8:	8c 93       	st	X, r24
    26ea:	ba c1       	rjmp	.+884    	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTA_REG, DIO_u8_PIN7);
    26ec:	ab e3       	ldi	r26, 0x3B	; 59
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	eb e3       	ldi	r30, 0x3B	; 59
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	8f 77       	andi	r24, 0x7F	; 127
    26f8:	8c 93       	st	X, r24
    26fa:	b2 c1       	rjmp	.+868    	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTB:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	81 30       	cpi	r24, 0x01	; 1
    2700:	41 f4       	brne	.+16     	; 0x2712 <DIO_u8SetValueToAllPins+0x1ac>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2702:	a8 e3       	ldi	r26, 0x38	; 56
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e8 e3       	ldi	r30, 0x38	; 56
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	81 60       	ori	r24, 0x01	; 1
    270e:	8c 93       	st	X, r24
    2710:	07 c0       	rjmp	.+14     	; 0x2720 <DIO_u8SetValueToAllPins+0x1ba>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN0);
    2712:	a8 e3       	ldi	r26, 0x38	; 56
    2714:	b0 e0       	ldi	r27, 0x00	; 0
    2716:	e8 e3       	ldi	r30, 0x38	; 56
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	80 81       	ld	r24, Z
    271c:	8e 7f       	andi	r24, 0xFE	; 254
    271e:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	41 f4       	brne	.+16     	; 0x2736 <DIO_u8SetValueToAllPins+0x1d0>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    2726:	a8 e3       	ldi	r26, 0x38	; 56
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e8 e3       	ldi	r30, 0x38	; 56
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	82 60       	ori	r24, 0x02	; 2
    2732:	8c 93       	st	X, r24
    2734:	07 c0       	rjmp	.+14     	; 0x2744 <DIO_u8SetValueToAllPins+0x1de>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN1);
    2736:	a8 e3       	ldi	r26, 0x38	; 56
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e8 e3       	ldi	r30, 0x38	; 56
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	8d 7f       	andi	r24, 0xFD	; 253
    2742:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2744:	8c 81       	ldd	r24, Y+4	; 0x04
    2746:	81 30       	cpi	r24, 0x01	; 1
    2748:	41 f4       	brne	.+16     	; 0x275a <DIO_u8SetValueToAllPins+0x1f4>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    274a:	a8 e3       	ldi	r26, 0x38	; 56
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	e8 e3       	ldi	r30, 0x38	; 56
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	84 60       	ori	r24, 0x04	; 4
    2756:	8c 93       	st	X, r24
    2758:	07 c0       	rjmp	.+14     	; 0x2768 <DIO_u8SetValueToAllPins+0x202>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN2);
    275a:	a8 e3       	ldi	r26, 0x38	; 56
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e8 e3       	ldi	r30, 0x38	; 56
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	8b 7f       	andi	r24, 0xFB	; 251
    2766:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    2768:	8d 81       	ldd	r24, Y+5	; 0x05
    276a:	81 30       	cpi	r24, 0x01	; 1
    276c:	41 f4       	brne	.+16     	; 0x277e <DIO_u8SetValueToAllPins+0x218>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    276e:	a8 e3       	ldi	r26, 0x38	; 56
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e8 e3       	ldi	r30, 0x38	; 56
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	88 60       	ori	r24, 0x08	; 8
    277a:	8c 93       	st	X, r24
    277c:	07 c0       	rjmp	.+14     	; 0x278c <DIO_u8SetValueToAllPins+0x226>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN3);
    277e:	a8 e3       	ldi	r26, 0x38	; 56
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e8 e3       	ldi	r30, 0x38	; 56
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	87 7f       	andi	r24, 0xF7	; 247
    278a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    278c:	8e 81       	ldd	r24, Y+6	; 0x06
    278e:	81 30       	cpi	r24, 0x01	; 1
    2790:	41 f4       	brne	.+16     	; 0x27a2 <DIO_u8SetValueToAllPins+0x23c>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    2792:	a8 e3       	ldi	r26, 0x38	; 56
    2794:	b0 e0       	ldi	r27, 0x00	; 0
    2796:	e8 e3       	ldi	r30, 0x38	; 56
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	80 81       	ld	r24, Z
    279c:	80 61       	ori	r24, 0x10	; 16
    279e:	8c 93       	st	X, r24
    27a0:	07 c0       	rjmp	.+14     	; 0x27b0 <DIO_u8SetValueToAllPins+0x24a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN4);
    27a2:	a8 e3       	ldi	r26, 0x38	; 56
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	e8 e3       	ldi	r30, 0x38	; 56
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	8f 7e       	andi	r24, 0xEF	; 239
    27ae:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    27b0:	8f 81       	ldd	r24, Y+7	; 0x07
    27b2:	81 30       	cpi	r24, 0x01	; 1
    27b4:	41 f4       	brne	.+16     	; 0x27c6 <DIO_u8SetValueToAllPins+0x260>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    27b6:	a8 e3       	ldi	r26, 0x38	; 56
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	e8 e3       	ldi	r30, 0x38	; 56
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	80 62       	ori	r24, 0x20	; 32
    27c2:	8c 93       	st	X, r24
    27c4:	07 c0       	rjmp	.+14     	; 0x27d4 <DIO_u8SetValueToAllPins+0x26e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN5);
    27c6:	a8 e3       	ldi	r26, 0x38	; 56
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e8 e3       	ldi	r30, 0x38	; 56
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	8f 7d       	andi	r24, 0xDF	; 223
    27d2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    27d4:	88 85       	ldd	r24, Y+8	; 0x08
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	41 f4       	brne	.+16     	; 0x27ea <DIO_u8SetValueToAllPins+0x284>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    27da:	a8 e3       	ldi	r26, 0x38	; 56
    27dc:	b0 e0       	ldi	r27, 0x00	; 0
    27de:	e8 e3       	ldi	r30, 0x38	; 56
    27e0:	f0 e0       	ldi	r31, 0x00	; 0
    27e2:	80 81       	ld	r24, Z
    27e4:	80 64       	ori	r24, 0x40	; 64
    27e6:	8c 93       	st	X, r24
    27e8:	07 c0       	rjmp	.+14     	; 0x27f8 <DIO_u8SetValueToAllPins+0x292>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN6);
    27ea:	a8 e3       	ldi	r26, 0x38	; 56
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e8 e3       	ldi	r30, 0x38	; 56
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8f 7b       	andi	r24, 0xBF	; 191
    27f6:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    27f8:	89 85       	ldd	r24, Y+9	; 0x09
    27fa:	81 30       	cpi	r24, 0x01	; 1
    27fc:	41 f4       	brne	.+16     	; 0x280e <DIO_u8SetValueToAllPins+0x2a8>
		{
			SET_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    27fe:	a8 e3       	ldi	r26, 0x38	; 56
    2800:	b0 e0       	ldi	r27, 0x00	; 0
    2802:	e8 e3       	ldi	r30, 0x38	; 56
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	80 81       	ld	r24, Z
    2808:	80 68       	ori	r24, 0x80	; 128
    280a:	8c 93       	st	X, r24
    280c:	29 c1       	rjmp	.+594    	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTB_REG, DIO_u8_PIN7);
    280e:	a8 e3       	ldi	r26, 0x38	; 56
    2810:	b0 e0       	ldi	r27, 0x00	; 0
    2812:	e8 e3       	ldi	r30, 0x38	; 56
    2814:	f0 e0       	ldi	r31, 0x00	; 0
    2816:	80 81       	ld	r24, Z
    2818:	8f 77       	andi	r24, 0x7F	; 127
    281a:	8c 93       	st	X, r24
    281c:	21 c1       	rjmp	.+578    	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTC:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	81 30       	cpi	r24, 0x01	; 1
    2822:	41 f4       	brne	.+16     	; 0x2834 <DIO_u8SetValueToAllPins+0x2ce>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2824:	a5 e3       	ldi	r26, 0x35	; 53
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e5 e3       	ldi	r30, 0x35	; 53
    282a:	f0 e0       	ldi	r31, 0x00	; 0
    282c:	80 81       	ld	r24, Z
    282e:	81 60       	ori	r24, 0x01	; 1
    2830:	8c 93       	st	X, r24
    2832:	07 c0       	rjmp	.+14     	; 0x2842 <DIO_u8SetValueToAllPins+0x2dc>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN0);
    2834:	a5 e3       	ldi	r26, 0x35	; 53
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	e5 e3       	ldi	r30, 0x35	; 53
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	8e 7f       	andi	r24, 0xFE	; 254
    2840:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	81 30       	cpi	r24, 0x01	; 1
    2846:	41 f4       	brne	.+16     	; 0x2858 <DIO_u8SetValueToAllPins+0x2f2>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2848:	a5 e3       	ldi	r26, 0x35	; 53
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e5 e3       	ldi	r30, 0x35	; 53
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	82 60       	ori	r24, 0x02	; 2
    2854:	8c 93       	st	X, r24
    2856:	07 c0       	rjmp	.+14     	; 0x2866 <DIO_u8SetValueToAllPins+0x300>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN1);
    2858:	a5 e3       	ldi	r26, 0x35	; 53
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e5 e3       	ldi	r30, 0x35	; 53
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	8d 7f       	andi	r24, 0xFD	; 253
    2864:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	81 30       	cpi	r24, 0x01	; 1
    286a:	41 f4       	brne	.+16     	; 0x287c <DIO_u8SetValueToAllPins+0x316>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    286c:	a5 e3       	ldi	r26, 0x35	; 53
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e5 e3       	ldi	r30, 0x35	; 53
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	84 60       	ori	r24, 0x04	; 4
    2878:	8c 93       	st	X, r24
    287a:	07 c0       	rjmp	.+14     	; 0x288a <DIO_u8SetValueToAllPins+0x324>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN2);
    287c:	a5 e3       	ldi	r26, 0x35	; 53
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e5 e3       	ldi	r30, 0x35	; 53
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8b 7f       	andi	r24, 0xFB	; 251
    2888:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	81 30       	cpi	r24, 0x01	; 1
    288e:	41 f4       	brne	.+16     	; 0x28a0 <DIO_u8SetValueToAllPins+0x33a>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    2890:	a5 e3       	ldi	r26, 0x35	; 53
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e5 e3       	ldi	r30, 0x35	; 53
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	88 60       	ori	r24, 0x08	; 8
    289c:	8c 93       	st	X, r24
    289e:	07 c0       	rjmp	.+14     	; 0x28ae <DIO_u8SetValueToAllPins+0x348>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN3);
    28a0:	a5 e3       	ldi	r26, 0x35	; 53
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e5 e3       	ldi	r30, 0x35	; 53
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	87 7f       	andi	r24, 0xF7	; 247
    28ac:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    28ae:	8e 81       	ldd	r24, Y+6	; 0x06
    28b0:	81 30       	cpi	r24, 0x01	; 1
    28b2:	41 f4       	brne	.+16     	; 0x28c4 <DIO_u8SetValueToAllPins+0x35e>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    28b4:	a5 e3       	ldi	r26, 0x35	; 53
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e5 e3       	ldi	r30, 0x35	; 53
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	80 61       	ori	r24, 0x10	; 16
    28c0:	8c 93       	st	X, r24
    28c2:	07 c0       	rjmp	.+14     	; 0x28d2 <DIO_u8SetValueToAllPins+0x36c>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN4);
    28c4:	a5 e3       	ldi	r26, 0x35	; 53
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	e5 e3       	ldi	r30, 0x35	; 53
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	8f 7e       	andi	r24, 0xEF	; 239
    28d0:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    28d2:	8f 81       	ldd	r24, Y+7	; 0x07
    28d4:	81 30       	cpi	r24, 0x01	; 1
    28d6:	41 f4       	brne	.+16     	; 0x28e8 <DIO_u8SetValueToAllPins+0x382>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    28d8:	a5 e3       	ldi	r26, 0x35	; 53
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e5 e3       	ldi	r30, 0x35	; 53
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	80 62       	ori	r24, 0x20	; 32
    28e4:	8c 93       	st	X, r24
    28e6:	07 c0       	rjmp	.+14     	; 0x28f6 <DIO_u8SetValueToAllPins+0x390>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN5);
    28e8:	a5 e3       	ldi	r26, 0x35	; 53
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e5 e3       	ldi	r30, 0x35	; 53
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	8f 7d       	andi	r24, 0xDF	; 223
    28f4:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    28f6:	88 85       	ldd	r24, Y+8	; 0x08
    28f8:	81 30       	cpi	r24, 0x01	; 1
    28fa:	41 f4       	brne	.+16     	; 0x290c <DIO_u8SetValueToAllPins+0x3a6>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    28fc:	a5 e3       	ldi	r26, 0x35	; 53
    28fe:	b0 e0       	ldi	r27, 0x00	; 0
    2900:	e5 e3       	ldi	r30, 0x35	; 53
    2902:	f0 e0       	ldi	r31, 0x00	; 0
    2904:	80 81       	ld	r24, Z
    2906:	80 64       	ori	r24, 0x40	; 64
    2908:	8c 93       	st	X, r24
    290a:	07 c0       	rjmp	.+14     	; 0x291a <DIO_u8SetValueToAllPins+0x3b4>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN6);
    290c:	a5 e3       	ldi	r26, 0x35	; 53
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e5 e3       	ldi	r30, 0x35	; 53
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	8f 7b       	andi	r24, 0xBF	; 191
    2918:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    291a:	89 85       	ldd	r24, Y+9	; 0x09
    291c:	81 30       	cpi	r24, 0x01	; 1
    291e:	41 f4       	brne	.+16     	; 0x2930 <DIO_u8SetValueToAllPins+0x3ca>
		{
			SET_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2920:	a5 e3       	ldi	r26, 0x35	; 53
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e5 e3       	ldi	r30, 0x35	; 53
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	80 68       	ori	r24, 0x80	; 128
    292c:	8c 93       	st	X, r24
    292e:	98 c0       	rjmp	.+304    	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTC_REG, DIO_u8_PIN7);
    2930:	a5 e3       	ldi	r26, 0x35	; 53
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e5 e3       	ldi	r30, 0x35	; 53
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	8f 77       	andi	r24, 0x7F	; 127
    293c:	8c 93       	st	X, r24
    293e:	90 c0       	rjmp	.+288    	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
		}
		break;

	case DIO_u8_PORTD:
		if (Copy_u8Pin0 == DIO_u8_HIGH)
    2940:	8a 81       	ldd	r24, Y+2	; 0x02
    2942:	81 30       	cpi	r24, 0x01	; 1
    2944:	41 f4       	brne	.+16     	; 0x2956 <DIO_u8SetValueToAllPins+0x3f0>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2946:	a2 e3       	ldi	r26, 0x32	; 50
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	e2 e3       	ldi	r30, 0x32	; 50
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	81 60       	ori	r24, 0x01	; 1
    2952:	8c 93       	st	X, r24
    2954:	07 c0       	rjmp	.+14     	; 0x2964 <DIO_u8SetValueToAllPins+0x3fe>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN0);
    2956:	a2 e3       	ldi	r26, 0x32	; 50
    2958:	b0 e0       	ldi	r27, 0x00	; 0
    295a:	e2 e3       	ldi	r30, 0x32	; 50
    295c:	f0 e0       	ldi	r31, 0x00	; 0
    295e:	80 81       	ld	r24, Z
    2960:	8e 7f       	andi	r24, 0xFE	; 254
    2962:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin1 == DIO_u8_HIGH)
    2964:	8b 81       	ldd	r24, Y+3	; 0x03
    2966:	81 30       	cpi	r24, 0x01	; 1
    2968:	41 f4       	brne	.+16     	; 0x297a <DIO_u8SetValueToAllPins+0x414>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    296a:	a2 e3       	ldi	r26, 0x32	; 50
    296c:	b0 e0       	ldi	r27, 0x00	; 0
    296e:	e2 e3       	ldi	r30, 0x32	; 50
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	82 60       	ori	r24, 0x02	; 2
    2976:	8c 93       	st	X, r24
    2978:	07 c0       	rjmp	.+14     	; 0x2988 <DIO_u8SetValueToAllPins+0x422>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN1);
    297a:	a2 e3       	ldi	r26, 0x32	; 50
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e2 e3       	ldi	r30, 0x32	; 50
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	80 81       	ld	r24, Z
    2984:	8d 7f       	andi	r24, 0xFD	; 253
    2986:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin2 == DIO_u8_HIGH)
    2988:	8c 81       	ldd	r24, Y+4	; 0x04
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	41 f4       	brne	.+16     	; 0x299e <DIO_u8SetValueToAllPins+0x438>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    298e:	a2 e3       	ldi	r26, 0x32	; 50
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	e2 e3       	ldi	r30, 0x32	; 50
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	80 81       	ld	r24, Z
    2998:	84 60       	ori	r24, 0x04	; 4
    299a:	8c 93       	st	X, r24
    299c:	07 c0       	rjmp	.+14     	; 0x29ac <DIO_u8SetValueToAllPins+0x446>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN2);
    299e:	a2 e3       	ldi	r26, 0x32	; 50
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	e2 e3       	ldi	r30, 0x32	; 50
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 81       	ld	r24, Z
    29a8:	8b 7f       	andi	r24, 0xFB	; 251
    29aa:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin3 == DIO_u8_HIGH)
    29ac:	8d 81       	ldd	r24, Y+5	; 0x05
    29ae:	81 30       	cpi	r24, 0x01	; 1
    29b0:	41 f4       	brne	.+16     	; 0x29c2 <DIO_u8SetValueToAllPins+0x45c>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    29b2:	a2 e3       	ldi	r26, 0x32	; 50
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e2 e3       	ldi	r30, 0x32	; 50
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	88 60       	ori	r24, 0x08	; 8
    29be:	8c 93       	st	X, r24
    29c0:	07 c0       	rjmp	.+14     	; 0x29d0 <DIO_u8SetValueToAllPins+0x46a>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN3);
    29c2:	a2 e3       	ldi	r26, 0x32	; 50
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	e2 e3       	ldi	r30, 0x32	; 50
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	87 7f       	andi	r24, 0xF7	; 247
    29ce:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin4 == DIO_u8_HIGH)
    29d0:	8e 81       	ldd	r24, Y+6	; 0x06
    29d2:	81 30       	cpi	r24, 0x01	; 1
    29d4:	41 f4       	brne	.+16     	; 0x29e6 <DIO_u8SetValueToAllPins+0x480>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    29d6:	a2 e3       	ldi	r26, 0x32	; 50
    29d8:	b0 e0       	ldi	r27, 0x00	; 0
    29da:	e2 e3       	ldi	r30, 0x32	; 50
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	80 81       	ld	r24, Z
    29e0:	80 61       	ori	r24, 0x10	; 16
    29e2:	8c 93       	st	X, r24
    29e4:	07 c0       	rjmp	.+14     	; 0x29f4 <DIO_u8SetValueToAllPins+0x48e>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN4);
    29e6:	a2 e3       	ldi	r26, 0x32	; 50
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e2 e3       	ldi	r30, 0x32	; 50
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	8f 7e       	andi	r24, 0xEF	; 239
    29f2:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin5 == DIO_u8_HIGH)
    29f4:	8f 81       	ldd	r24, Y+7	; 0x07
    29f6:	81 30       	cpi	r24, 0x01	; 1
    29f8:	41 f4       	brne	.+16     	; 0x2a0a <DIO_u8SetValueToAllPins+0x4a4>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    29fa:	a2 e3       	ldi	r26, 0x32	; 50
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	e2 e3       	ldi	r30, 0x32	; 50
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	80 62       	ori	r24, 0x20	; 32
    2a06:	8c 93       	st	X, r24
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <DIO_u8SetValueToAllPins+0x4b2>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN5);
    2a0a:	a2 e3       	ldi	r26, 0x32	; 50
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	e2 e3       	ldi	r30, 0x32	; 50
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	8f 7d       	andi	r24, 0xDF	; 223
    2a16:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin6 == DIO_u8_HIGH)
    2a18:	88 85       	ldd	r24, Y+8	; 0x08
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	41 f4       	brne	.+16     	; 0x2a2e <DIO_u8SetValueToAllPins+0x4c8>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2a1e:	a2 e3       	ldi	r26, 0x32	; 50
    2a20:	b0 e0       	ldi	r27, 0x00	; 0
    2a22:	e2 e3       	ldi	r30, 0x32	; 50
    2a24:	f0 e0       	ldi	r31, 0x00	; 0
    2a26:	80 81       	ld	r24, Z
    2a28:	80 64       	ori	r24, 0x40	; 64
    2a2a:	8c 93       	st	X, r24
    2a2c:	07 c0       	rjmp	.+14     	; 0x2a3c <DIO_u8SetValueToAllPins+0x4d6>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN6);
    2a2e:	a2 e3       	ldi	r26, 0x32	; 50
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	e2 e3       	ldi	r30, 0x32	; 50
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8f 7b       	andi	r24, 0xBF	; 191
    2a3a:	8c 93       	st	X, r24
		}

		if (Copy_u8Pin7 == DIO_u8_HIGH)
    2a3c:	89 85       	ldd	r24, Y+9	; 0x09
    2a3e:	81 30       	cpi	r24, 0x01	; 1
    2a40:	41 f4       	brne	.+16     	; 0x2a52 <DIO_u8SetValueToAllPins+0x4ec>
		{
			SET_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2a42:	a2 e3       	ldi	r26, 0x32	; 50
    2a44:	b0 e0       	ldi	r27, 0x00	; 0
    2a46:	e2 e3       	ldi	r30, 0x32	; 50
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	80 68       	ori	r24, 0x80	; 128
    2a4e:	8c 93       	st	X, r24
    2a50:	07 c0       	rjmp	.+14     	; 0x2a60 <DIO_u8SetValueToAllPins+0x4fa>
		}
		else
		{
			CLR_BIT(DIO_u8_PORTD_REG, DIO_u8_PIN7);
    2a52:	a2 e3       	ldi	r26, 0x32	; 50
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	e2 e3       	ldi	r30, 0x32	; 50
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	8f 77       	andi	r24, 0x7F	; 127
    2a5e:	8c 93       	st	X, r24
		}
		break;
	}
}
    2a60:	2c 96       	adiw	r28, 0x0c	; 12
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	0f 91       	pop	r16
    2a72:	ef 90       	pop	r14
    2a74:	cf 90       	pop	r12
    2a76:	af 90       	pop	r10
    2a78:	8f 90       	pop	r8
    2a7a:	08 95       	ret

00002a7c <ADC_void_Init>:

/* ADC Busy Flag */
static u8 ADC_u8BusyFlag = 0;


void ADC_void_Init(void){
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62
	// Select Voltage Referance
	#if ADC_REF_VOLTAGE_MODE == AVCC
	   CLR_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS1);
    2a84:	a7 e2       	ldi	r26, 0x27	; 39
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	e7 e2       	ldi	r30, 0x27	; 39
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 81       	ld	r24, Z
    2a8e:	8f 77       	andi	r24, 0x7F	; 127
    2a90:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
    2a92:	a7 e2       	ldi	r26, 0x27	; 39
    2a94:	b0 e0       	ldi	r27, 0x00	; 0
    2a96:	e7 e2       	ldi	r30, 0x27	; 39
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	80 81       	ld	r24, Z
    2a9c:	80 64       	ori	r24, 0x40	; 64
    2a9e:	8c 93       	st	X, r24
	   SET_BIT(ADC_u8_ADMUX_REG,ADC_ADMUX_REFS0);
	   #endif

	// Select Presentaion Mode
	#if ADC_PRESENTATION_MODE == Right_Adjust
	   CLR_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
    2aa0:	a7 e2       	ldi	r26, 0x27	; 39
    2aa2:	b0 e0       	ldi	r27, 0x00	; 0
    2aa4:	e7 e2       	ldi	r30, 0x27	; 39
    2aa6:	f0 e0       	ldi	r31, 0x00	; 0
    2aa8:	80 81       	ld	r24, Z
    2aaa:	8f 7d       	andi	r24, 0xDF	; 223
    2aac:	8c 93       	st	X, r24
   #elif ADC_PRESENTATION_MODE == Left_Adjust
	   SET_BIT(ADC_u8_ADMUX_REG, ADC_ADMUX_ADLAR);
   #endif

	// Disable Auto Trigger
	CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADATE);
    2aae:	a6 e2       	ldi	r26, 0x26	; 38
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	e6 e2       	ldi	r30, 0x26	; 38
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8f 7d       	andi	r24, 0xDF	; 223
    2aba:	8c 93       	st	X, r24
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_32
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
	#elif DEVISION_FACTOR_MODE == ADC_DIVSION_FACTOR_BY_64
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS2);
    2abc:	a6 e2       	ldi	r26, 0x26	; 38
    2abe:	b0 e0       	ldi	r27, 0x00	; 0
    2ac0:	e6 e2       	ldi	r30, 0x26	; 38
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	80 81       	ld	r24, Z
    2ac6:	84 60       	ori	r24, 0x04	; 4
    2ac8:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
    2aca:	a6 e2       	ldi	r26, 0x26	; 38
    2acc:	b0 e0       	ldi	r27, 0x00	; 0
    2ace:	e6 e2       	ldi	r30, 0x26	; 38
    2ad0:	f0 e0       	ldi	r31, 0x00	; 0
    2ad2:	80 81       	ld	r24, Z
    2ad4:	82 60       	ori	r24, 0x02	; 2
    2ad6:	8c 93       	st	X, r24
			CLR_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
    2ad8:	a6 e2       	ldi	r26, 0x26	; 38
    2ada:	b0 e0       	ldi	r27, 0x00	; 0
    2adc:	e6 e2       	ldi	r30, 0x26	; 38
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	80 81       	ld	r24, Z
    2ae2:	8e 7f       	andi	r24, 0xFE	; 254
    2ae4:	8c 93       	st	X, r24
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS1);
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADPS0);
   #endif

	// Enable ADC
	SET_BIT(ADC_u8_ADCSRA_REG, ADC_Enable_PIN);
    2ae6:	a6 e2       	ldi	r26, 0x26	; 38
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e6 e2       	ldi	r30, 0x26	; 38
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	80 68       	ori	r24, 0x80	; 128
    2af2:	8c 93       	st	X, r24

}
    2af4:	cf 91       	pop	r28
    2af6:	df 91       	pop	r29
    2af8:	08 95       	ret

00002afa <ADC_u8_Get_Digital_ValueSynchNonBlocking>:



u8 ADC_u8_Get_Digital_ValueSynchNonBlocking(u8 Copy_u8ChannelNumber, u16 *Copy_Pu16DigitalValue){
    2afa:	df 93       	push	r29
    2afc:	cf 93       	push	r28
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	28 97       	sbiw	r28, 0x08	; 8
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	8e 83       	std	Y+6, r24	; 0x06
    2b10:	78 87       	std	Y+8, r23	; 0x08
    2b12:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32TimeOutCounter = 0;
    2b18:	19 82       	std	Y+1, r1	; 0x01
    2b1a:	1a 82       	std	Y+2, r1	; 0x02
    2b1c:	1b 82       	std	Y+3, r1	; 0x03
    2b1e:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNumber < 32) && (Copy_Pu16DigitalValue != NULL)){
    2b20:	8e 81       	ldd	r24, Y+6	; 0x06
    2b22:	80 32       	cpi	r24, 0x20	; 32
    2b24:	08 f0       	brcs	.+2      	; 0x2b28 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x2e>
    2b26:	5b c0       	rjmp	.+182    	; 0x2bde <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>
    2b28:	8f 81       	ldd	r24, Y+7	; 0x07
    2b2a:	98 85       	ldd	r25, Y+8	; 0x08
    2b2c:	00 97       	sbiw	r24, 0x00	; 0
    2b2e:	09 f4       	brne	.+2      	; 0x2b32 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x38>
    2b30:	56 c0       	rjmp	.+172    	; 0x2bde <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe4>

		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2b32:	a7 e2       	ldi	r26, 0x27	; 39
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e7 e2       	ldi	r30, 0x27	; 39
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	80 7e       	andi	r24, 0xE0	; 224
    2b3e:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2b40:	a7 e2       	ldi	r26, 0x27	; 39
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	e7 e2       	ldi	r30, 0x27	; 39
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	90 81       	ld	r25, Z
    2b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b4c:	89 2b       	or	r24, r25
    2b4e:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2b50:	a6 e2       	ldi	r26, 0x26	; 38
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	e6 e2       	ldi	r30, 0x26	; 38
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	80 64       	ori	r24, 0x40	; 64
    2b5c:	8c 93       	st	X, r24
    2b5e:	0b c0       	rjmp	.+22     	; 0x2b76 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x7c>
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
			Local_u32TimeOutCounter++;
    2b60:	89 81       	ldd	r24, Y+1	; 0x01
    2b62:	9a 81       	ldd	r25, Y+2	; 0x02
    2b64:	ab 81       	ldd	r26, Y+3	; 0x03
    2b66:	bc 81       	ldd	r27, Y+4	; 0x04
    2b68:	01 96       	adiw	r24, 0x01	; 1
    2b6a:	a1 1d       	adc	r26, r1
    2b6c:	b1 1d       	adc	r27, r1
    2b6e:	89 83       	std	Y+1, r24	; 0x01
    2b70:	9a 83       	std	Y+2, r25	; 0x02
    2b72:	ab 83       	std	Y+3, r26	; 0x03
    2b74:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
		/* Wait Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) == 0) && (Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)){
    2b76:	e6 e2       	ldi	r30, 0x26	; 38
    2b78:	f0 e0       	ldi	r31, 0x00	; 0
    2b7a:	80 81       	ld	r24, Z
    2b7c:	82 95       	swap	r24
    2b7e:	8f 70       	andi	r24, 0x0F	; 15
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	81 70       	andi	r24, 0x01	; 1
    2b86:	90 70       	andi	r25, 0x00	; 0
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	61 f4       	brne	.+24     	; 0x2ba4 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xaa>
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b90:	ab 81       	ldd	r26, Y+3	; 0x03
    2b92:	bc 81       	ldd	r27, Y+4	; 0x04
    2b94:	80 35       	cpi	r24, 0x50	; 80
    2b96:	23 ec       	ldi	r18, 0xC3	; 195
    2b98:	92 07       	cpc	r25, r18
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	a2 07       	cpc	r26, r18
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	b2 07       	cpc	r27, r18
    2ba2:	f0 f2       	brcs	.-68     	; 0x2b60 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0x66>
			Local_u32TimeOutCounter++;
		}
		if(GET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF) != 0){ //(Local_u32TimeOutCounter < ADC_u32_TIME_OUT_MAX_VALUE)
    2ba4:	e6 e2       	ldi	r30, 0x26	; 38
    2ba6:	f0 e0       	ldi	r31, 0x00	; 0
    2ba8:	80 81       	ld	r24, Z
    2baa:	82 95       	swap	r24
    2bac:	8f 70       	andi	r24, 0x0F	; 15
    2bae:	88 2f       	mov	r24, r24
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	81 70       	andi	r24, 0x01	; 1
    2bb4:	90 70       	andi	r25, 0x00	; 0
    2bb6:	88 23       	and	r24, r24
    2bb8:	81 f0       	breq	.+32     	; 0x2bda <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe0>
			/* Clear Flag = 1 */
			SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADIF);
    2bba:	a6 e2       	ldi	r26, 0x26	; 38
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e6 e2       	ldi	r30, 0x26	; 38
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	80 61       	ori	r24, 0x10	; 16
    2bc6:	8c 93       	st	X, r24
			/* Read Digital Value */
			*Copy_Pu16DigitalValue = ADC_u16_ADC_REG;
    2bc8:	e4 e2       	ldi	r30, 0x24	; 36
    2bca:	f0 e0       	ldi	r31, 0x00	; 0
    2bcc:	80 81       	ld	r24, Z
    2bce:	91 81       	ldd	r25, Z+1	; 0x01
    2bd0:	ef 81       	ldd	r30, Y+7	; 0x07
    2bd2:	f8 85       	ldd	r31, Y+8	; 0x08
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	80 83       	st	Z, r24
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
		else{
			Local_u8ErrorState = STD_TYPES_NOK;
    2bda:	1d 82       	std	Y+5, r1	; 0x05
    2bdc:	01 c0       	rjmp	.+2      	; 0x2be0 <ADC_u8_Get_Digital_ValueSynchNonBlocking+0xe6>
		}
	}

	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2bde:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    2be0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2be2:	28 96       	adiw	r28, 0x08	; 8
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	de bf       	out	0x3e, r29	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	cd bf       	out	0x3d, r28	; 61
    2bee:	cf 91       	pop	r28
    2bf0:	df 91       	pop	r29
    2bf2:	08 95       	ret

00002bf4 <ADC_u8_Get_Digital_ValueAsynch>:



u8 ADC_u8_Get_Digital_ValueAsynch(u8 Copy_u8ChannelNumber, void (*Copy_PFNotification)(u16)){
    2bf4:	df 93       	push	r29
    2bf6:	cf 93       	push	r28
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <ADC_u8_Get_Digital_ValueAsynch+0x6>
    2bfa:	00 d0       	rcall	.+0      	; 0x2bfc <ADC_u8_Get_Digital_ValueAsynch+0x8>
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
    2c00:	8a 83       	std	Y+2, r24	; 0x02
    2c02:	7c 83       	std	Y+4, r23	; 0x04
    2c04:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNumber < 32) && (Copy_PFNotification != NULL) && (ADC_u8BusyFlag == 0)){
    2c0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c0c:	80 32       	cpi	r24, 0x20	; 32
    2c0e:	78 f5       	brcc	.+94     	; 0x2c6e <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	59 f1       	breq	.+86     	; 0x2c6e <ADC_u8_Get_Digital_ValueAsynch+0x7a>
    2c18:	80 91 98 00 	lds	r24, 0x0098
    2c1c:	88 23       	and	r24, r24
    2c1e:	39 f5       	brne	.+78     	; 0x2c6e <ADC_u8_Get_Digital_ValueAsynch+0x7a>
		/* Set Flag To Make ADC Busy */
		ADC_u8BusyFlag = 1;
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	80 93 98 00 	sts	0x0098, r24
		/* Update Global Pointer To a Function */
		ADC_PfNotification = Copy_PFNotification;
    2c26:	8b 81       	ldd	r24, Y+3	; 0x03
    2c28:	9c 81       	ldd	r25, Y+4	; 0x04
    2c2a:	90 93 97 00 	sts	0x0097, r25
    2c2e:	80 93 96 00 	sts	0x0096, r24
		/* Enable ADC Interrupt */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2c32:	a6 e2       	ldi	r26, 0x26	; 38
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e6 e2       	ldi	r30, 0x26	; 38
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 60       	ori	r24, 0x08	; 8
    2c3e:	8c 93       	st	X, r24
		/* Clear MUX4 */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2c40:	a7 e2       	ldi	r26, 0x27	; 39
    2c42:	b0 e0       	ldi	r27, 0x00	; 0
    2c44:	e7 e2       	ldi	r30, 0x27	; 39
    2c46:	f0 e0       	ldi	r31, 0x00	; 0
    2c48:	80 81       	ld	r24, Z
    2c4a:	80 7e       	andi	r24, 0xE0	; 224
    2c4c:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNumber;
    2c4e:	a7 e2       	ldi	r26, 0x27	; 39
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	e7 e2       	ldi	r30, 0x27	; 39
    2c54:	f0 e0       	ldi	r31, 0x00	; 0
    2c56:	90 81       	ld	r25, Z
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	89 2b       	or	r24, r25
    2c5c:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG, ADC_ADCSRA_ADSC);
    2c5e:	a6 e2       	ldi	r26, 0x26	; 38
    2c60:	b0 e0       	ldi	r27, 0x00	; 0
    2c62:	e6 e2       	ldi	r30, 0x26	; 38
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	80 81       	ld	r24, Z
    2c68:	80 64       	ori	r24, 0x40	; 64
    2c6a:	8c 93       	st	X, r24
    2c6c:	01 c0       	rjmp	.+2      	; 0x2c70 <ADC_u8_Get_Digital_ValueAsynch+0x7c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2c6e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
    2c7a:	cf 91       	pop	r28
    2c7c:	df 91       	pop	r29
    2c7e:	08 95       	ret

00002c80 <ADC_u8GetADCRegValue>:

u8 ADC_u8GetADCRegValue(u16 *Copy_u16PADCValue){
    2c80:	df 93       	push	r29
    2c82:	cf 93       	push	r28
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <ADC_u8GetADCRegValue+0x6>
    2c86:	0f 92       	push	r0
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	9b 83       	std	Y+3, r25	; 0x03
    2c8e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u16PADCValue != NULL){
    2c94:	8a 81       	ldd	r24, Y+2	; 0x02
    2c96:	9b 81       	ldd	r25, Y+3	; 0x03
    2c98:	00 97       	sbiw	r24, 0x00	; 0
    2c9a:	39 f0       	breq	.+14     	; 0x2caa <ADC_u8GetADCRegValue+0x2a>
		/* Read ADC Register */
		Copy_u16PADCValue = ADC_u16_ADC_REG;
    2c9c:	e4 e2       	ldi	r30, 0x24	; 36
    2c9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ca0:	80 81       	ld	r24, Z
    2ca2:	91 81       	ldd	r25, Z+1	; 0x01
    2ca4:	9b 83       	std	Y+3, r25	; 0x03
    2ca6:	8a 83       	std	Y+2, r24	; 0x02
    2ca8:	01 c0       	rjmp	.+2      	; 0x2cac <ADC_u8GetADCRegValue+0x2c>
	}
	else{
		Local_u8ErrorState = STD_TYPES_NOK;
    2caa:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2cac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <__vector_16>:


void __vector_16(void)		__attribute__((signal));

void __vector_16(void){
    2cba:	1f 92       	push	r1
    2cbc:	0f 92       	push	r0
    2cbe:	0f b6       	in	r0, 0x3f	; 63
    2cc0:	0f 92       	push	r0
    2cc2:	11 24       	eor	r1, r1
    2cc4:	2f 93       	push	r18
    2cc6:	3f 93       	push	r19
    2cc8:	4f 93       	push	r20
    2cca:	5f 93       	push	r21
    2ccc:	6f 93       	push	r22
    2cce:	7f 93       	push	r23
    2cd0:	8f 93       	push	r24
    2cd2:	9f 93       	push	r25
    2cd4:	af 93       	push	r26
    2cd6:	bf 93       	push	r27
    2cd8:	ef 93       	push	r30
    2cda:	ff 93       	push	r31
    2cdc:	df 93       	push	r29
    2cde:	cf 93       	push	r28
    2ce0:	cd b7       	in	r28, 0x3d	; 61
    2ce2:	de b7       	in	r29, 0x3e	; 62
	if(ADC_PfNotification != NULL){
    2ce4:	80 91 96 00 	lds	r24, 0x0096
    2ce8:	90 91 97 00 	lds	r25, 0x0097
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	99 f0       	breq	.+38     	; 0x2d16 <__vector_16+0x5c>
		ADC_u8BusyFlag = 0;
    2cf0:	10 92 98 00 	sts	0x0098, r1
		CLR_BIT(ADC_u8_ADCSRA_REG, ADC_Interrupt_Enable_PIN);
    2cf4:	a6 e2       	ldi	r26, 0x26	; 38
    2cf6:	b0 e0       	ldi	r27, 0x00	; 0
    2cf8:	e6 e2       	ldi	r30, 0x26	; 38
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	87 7f       	andi	r24, 0xF7	; 247
    2d00:	8c 93       	st	X, r24
		ADC_PfNotification(ADC_u16_ADC_REG);
    2d02:	20 91 96 00 	lds	r18, 0x0096
    2d06:	30 91 97 00 	lds	r19, 0x0097
    2d0a:	e4 e2       	ldi	r30, 0x24	; 36
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	91 81       	ldd	r25, Z+1	; 0x01
    2d12:	f9 01       	movw	r30, r18
    2d14:	09 95       	icall
	}
}
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	ff 91       	pop	r31
    2d1c:	ef 91       	pop	r30
    2d1e:	bf 91       	pop	r27
    2d20:	af 91       	pop	r26
    2d22:	9f 91       	pop	r25
    2d24:	8f 91       	pop	r24
    2d26:	7f 91       	pop	r23
    2d28:	6f 91       	pop	r22
    2d2a:	5f 91       	pop	r21
    2d2c:	4f 91       	pop	r20
    2d2e:	3f 91       	pop	r19
    2d30:	2f 91       	pop	r18
    2d32:	0f 90       	pop	r0
    2d34:	0f be       	out	0x3f, r0	; 63
    2d36:	0f 90       	pop	r0
    2d38:	1f 90       	pop	r1
    2d3a:	18 95       	reti

00002d3c <Stepper_Init>:

#include<util/delay.h>
#define F_CPU 16000000UL


void Stepper_Init(){
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	cd b7       	in	r28, 0x3d	; 61
    2d42:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinDirection(Stepper_1B_PORT, Stepper_1B_PIN, DIO_u8_OUTPUT);
    2d44:	83 e0       	ldi	r24, 0x03	; 3
    2d46:	60 e0       	ldi	r22, 0x00	; 0
    2d48:	41 e0       	ldi	r20, 0x01	; 1
    2d4a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_2B_PORT, Stepper_2B_PIN, DIO_u8_OUTPUT);
    2d4e:	83 e0       	ldi	r24, 0x03	; 3
    2d50:	61 e0       	ldi	r22, 0x01	; 1
    2d52:	41 e0       	ldi	r20, 0x01	; 1
    2d54:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_3B_PORT, Stepper_3B_PIN, DIO_u8_OUTPUT);
    2d58:	83 e0       	ldi	r24, 0x03	; 3
    2d5a:	62 e0       	ldi	r22, 0x02	; 2
    2d5c:	41 e0       	ldi	r20, 0x01	; 1
    2d5e:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(Stepper_4B_PORT, Stepper_4B_PIN, DIO_u8_OUTPUT);
    2d62:	83 e0       	ldi	r24, 0x03	; 3
    2d64:	63 e0       	ldi	r22, 0x03	; 3
    2d66:	41 e0       	ldi	r20, 0x01	; 1
    2d68:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
}
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	08 95       	ret

00002d72 <ActivatePins1>:


void ActivatePins1(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <ActivatePins1+0x6>
    2d78:	00 d0       	rcall	.+0      	; 0x2d7a <ActivatePins1+0x8>
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	6a 83       	std	Y+2, r22	; 0x02
    2d82:	4b 83       	std	Y+3, r20	; 0x03
    2d84:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2d86:	83 e0       	ldi	r24, 0x03	; 3
    2d88:	60 e0       	ldi	r22, 0x00	; 0
    2d8a:	49 81       	ldd	r20, Y+1	; 0x01
    2d8c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2d90:	83 e0       	ldi	r24, 0x03	; 3
    2d92:	61 e0       	ldi	r22, 0x01	; 1
    2d94:	4a 81       	ldd	r20, Y+2	; 0x02
    2d96:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2d9a:	83 e0       	ldi	r24, 0x03	; 3
    2d9c:	62 e0       	ldi	r22, 0x02	; 2
    2d9e:	4b 81       	ldd	r20, Y+3	; 0x03
    2da0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2da4:	83 e0       	ldi	r24, 0x03	; 3
    2da6:	63 e0       	ldi	r22, 0x03	; 3
    2da8:	4c 81       	ldd	r20, Y+4	; 0x04
    2daa:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
}
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	cf 91       	pop	r28
    2db8:	df 91       	pop	r29
    2dba:	08 95       	ret

00002dbc <ActivatePins2>:

void ActivatePins2(u8 Copy_u8_1B_Value, u8 Copy_u8_2B_Value, u8 Copy_u8_3B_Value, u8 Copy_u8_4B_Value){
    2dbc:	df 93       	push	r29
    2dbe:	cf 93       	push	r28
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <ActivatePins2+0x6>
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <ActivatePins2+0x8>
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	89 83       	std	Y+1, r24	; 0x01
    2dca:	6a 83       	std	Y+2, r22	; 0x02
    2dcc:	4b 83       	std	Y+3, r20	; 0x03
    2dce:	2c 83       	std	Y+4, r18	; 0x04
	DIO_u8SetPinValue(Stepper_4B_PORT, Stepper_4B_PIN, Copy_u8_4B_Value);
    2dd0:	83 e0       	ldi	r24, 0x03	; 3
    2dd2:	63 e0       	ldi	r22, 0x03	; 3
    2dd4:	4c 81       	ldd	r20, Y+4	; 0x04
    2dd6:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_3B_PORT, Stepper_3B_PIN, Copy_u8_3B_Value);
    2dda:	83 e0       	ldi	r24, 0x03	; 3
    2ddc:	62 e0       	ldi	r22, 0x02	; 2
    2dde:	4b 81       	ldd	r20, Y+3	; 0x03
    2de0:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_2B_PORT, Stepper_2B_PIN, Copy_u8_2B_Value);
    2de4:	83 e0       	ldi	r24, 0x03	; 3
    2de6:	61 e0       	ldi	r22, 0x01	; 1
    2de8:	4a 81       	ldd	r20, Y+2	; 0x02
    2dea:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
	DIO_u8SetPinValue(Stepper_1B_PORT, Stepper_1B_PIN, Copy_u8_1B_Value);
    2dee:	83 e0       	ldi	r24, 0x03	; 3
    2df0:	60 e0       	ldi	r22, 0x00	; 0
    2df2:	49 81       	ldd	r20, Y+1	; 0x01
    2df4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
}
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <SelectStepAngle>:


void SelectStepAngle(u16 angle, u8 Direction){
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	29 97       	sbiw	r28, 0x09	; 9
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
    2e1a:	9a 83       	std	Y+2, r25	; 0x02
    2e1c:	89 83       	std	Y+1, r24	; 0x01
    2e1e:	6b 83       	std	Y+3, r22	; 0x03
	switch(angle){
    2e20:	29 81       	ldd	r18, Y+1	; 0x01
    2e22:	3a 81       	ldd	r19, Y+2	; 0x02
    2e24:	39 87       	std	Y+9, r19	; 0x09
    2e26:	28 87       	std	Y+8, r18	; 0x08
    2e28:	88 85       	ldd	r24, Y+8	; 0x08
    2e2a:	99 85       	ldd	r25, Y+9	; 0x09
    2e2c:	8a 35       	cpi	r24, 0x5A	; 90
    2e2e:	91 05       	cpc	r25, r1
    2e30:	31 f0       	breq	.+12     	; 0x2e3e <SelectStepAngle+0x38>
    2e32:	28 85       	ldd	r18, Y+8	; 0x08
    2e34:	39 85       	ldd	r19, Y+9	; 0x09
    2e36:	24 3b       	cpi	r18, 0xB4	; 180
    2e38:	31 05       	cpc	r19, r1
    2e3a:	f1 f0       	breq	.+60     	; 0x2e78 <SelectStepAngle+0x72>
    2e3c:	39 c0       	rjmp	.+114    	; 0x2eb0 <SelectStepAngle+0xaa>
		case 90:
			switch(Direction){
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	3f 83       	std	Y+7, r19	; 0x07
    2e46:	2e 83       	std	Y+6, r18	; 0x06
    2e48:	8e 81       	ldd	r24, Y+6	; 0x06
    2e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	31 f0       	breq	.+12     	; 0x2e5c <SelectStepAngle+0x56>
    2e50:	2e 81       	ldd	r18, Y+6	; 0x06
    2e52:	3f 81       	ldd	r19, Y+7	; 0x07
    2e54:	21 30       	cpi	r18, 0x01	; 1
    2e56:	31 05       	cpc	r19, r1
    2e58:	41 f0       	breq	.+16     	; 0x2e6a <SelectStepAngle+0x64>
    2e5a:	2a c0       	rjmp	.+84     	; 0x2eb0 <SelectStepAngle+0xaa>
				case CW:
					ActivatePins1(DIO_u8_LOW, DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH);
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	41 e0       	ldi	r20, 0x01	; 1
    2e62:	21 e0       	ldi	r18, 0x01	; 1
    2e64:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <ActivatePins1>
    2e68:	23 c0       	rjmp	.+70     	; 0x2eb0 <SelectStepAngle+0xaa>
					break;

				case CCW:
					ActivatePins2(DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW, DIO_u8_LOW);
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	61 e0       	ldi	r22, 0x01	; 1
    2e6e:	40 e0       	ldi	r20, 0x00	; 0
    2e70:	20 e0       	ldi	r18, 0x00	; 0
    2e72:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <ActivatePins2>
    2e76:	1c c0       	rjmp	.+56     	; 0x2eb0 <SelectStepAngle+0xaa>
					break;
			}
			break;

			case 180:
				switch(Direction){
    2e78:	8b 81       	ldd	r24, Y+3	; 0x03
    2e7a:	28 2f       	mov	r18, r24
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	3d 83       	std	Y+5, r19	; 0x05
    2e80:	2c 83       	std	Y+4, r18	; 0x04
    2e82:	8c 81       	ldd	r24, Y+4	; 0x04
    2e84:	9d 81       	ldd	r25, Y+5	; 0x05
    2e86:	00 97       	sbiw	r24, 0x00	; 0
    2e88:	31 f0       	breq	.+12     	; 0x2e96 <SelectStepAngle+0x90>
    2e8a:	2c 81       	ldd	r18, Y+4	; 0x04
    2e8c:	3d 81       	ldd	r19, Y+5	; 0x05
    2e8e:	21 30       	cpi	r18, 0x01	; 1
    2e90:	31 05       	cpc	r19, r1
    2e92:	41 f0       	breq	.+16     	; 0x2ea4 <SelectStepAngle+0x9e>
    2e94:	0d c0       	rjmp	.+26     	; 0x2eb0 <SelectStepAngle+0xaa>
					case CW:
						ActivatePins2(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2e96:	80 e0       	ldi	r24, 0x00	; 0
    2e98:	61 e0       	ldi	r22, 0x01	; 1
    2e9a:	41 e0       	ldi	r20, 0x01	; 1
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <ActivatePins2>
    2ea2:	06 c0       	rjmp	.+12     	; 0x2eb0 <SelectStepAngle+0xaa>
						break;

					case CCW:
						ActivatePins1(DIO_u8_LOW, DIO_u8_HIGH, DIO_u8_HIGH, DIO_u8_LOW);
    2ea4:	80 e0       	ldi	r24, 0x00	; 0
    2ea6:	61 e0       	ldi	r22, 0x01	; 1
    2ea8:	41 e0       	ldi	r20, 0x01	; 1
    2eaa:	20 e0       	ldi	r18, 0x00	; 0
    2eac:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <ActivatePins1>
						break;
				}
				break;
	}
}
    2eb0:	29 96       	adiw	r28, 0x09	; 9
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <LCD_sendCommand>:

#include "../../LIB/BIT_MATH.h"
#include "../../MCAL/DIO/Dio_Interface.h"

void LCD_sendCommand(u8 command)
{
    2ec2:	df 93       	push	r29
    2ec4:	cf 93       	push	r28
    2ec6:	cd b7       	in	r28, 0x3d	; 61
    2ec8:	de b7       	in	r29, 0x3e	; 62
    2eca:	e9 97       	sbiw	r28, 0x39	; 57
    2ecc:	0f b6       	in	r0, 0x3f	; 63
    2ece:	f8 94       	cli
    2ed0:	de bf       	out	0x3e, r29	; 62
    2ed2:	0f be       	out	0x3f, r0	; 63
    2ed4:	cd bf       	out	0x3d, r28	; 61
    2ed6:	89 af       	std	Y+57, r24	; 0x39

	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	60 e0       	ldi	r22, 0x00	; 0
    2ede:	70 e0       	ldi	r23, 0x00	; 0
    2ee0:	40 e0       	ldi	r20, 0x00	; 0
    2ee2:	50 e0       	ldi	r21, 0x00	; 0
    2ee4:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_setPinValue>
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	a0 e8       	ldi	r26, 0x80	; 128
    2eee:	bf e3       	ldi	r27, 0x3F	; 63
    2ef0:	8d ab       	std	Y+53, r24	; 0x35
    2ef2:	9e ab       	std	Y+54, r25	; 0x36
    2ef4:	af ab       	std	Y+55, r26	; 0x37
    2ef6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef8:	6d a9       	ldd	r22, Y+53	; 0x35
    2efa:	7e a9       	ldd	r23, Y+54	; 0x36
    2efc:	8f a9       	ldd	r24, Y+55	; 0x37
    2efe:	98 ad       	ldd	r25, Y+56	; 0x38
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	30 e0       	ldi	r19, 0x00	; 0
    2f04:	4a e7       	ldi	r20, 0x7A	; 122
    2f06:	55 e4       	ldi	r21, 0x45	; 69
    2f08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	89 ab       	std	Y+49, r24	; 0x31
    2f12:	9a ab       	std	Y+50, r25	; 0x32
    2f14:	ab ab       	std	Y+51, r26	; 0x33
    2f16:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f18:	69 a9       	ldd	r22, Y+49	; 0x31
    2f1a:	7a a9       	ldd	r23, Y+50	; 0x32
    2f1c:	8b a9       	ldd	r24, Y+51	; 0x33
    2f1e:	9c a9       	ldd	r25, Y+52	; 0x34
    2f20:	20 e0       	ldi	r18, 0x00	; 0
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	40 e8       	ldi	r20, 0x80	; 128
    2f26:	5f e3       	ldi	r21, 0x3F	; 63
    2f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2c:	88 23       	and	r24, r24
    2f2e:	2c f4       	brge	.+10     	; 0x2f3a <LCD_sendCommand+0x78>
		__ticks = 1;
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	98 ab       	std	Y+48, r25	; 0x30
    2f36:	8f a7       	std	Y+47, r24	; 0x2f
    2f38:	3f c0       	rjmp	.+126    	; 0x2fb8 <LCD_sendCommand+0xf6>
	else if (__tmp > 65535)
    2f3a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f3c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f3e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f40:	9c a9       	ldd	r25, Y+52	; 0x34
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	3f ef       	ldi	r19, 0xFF	; 255
    2f46:	4f e7       	ldi	r20, 0x7F	; 127
    2f48:	57 e4       	ldi	r21, 0x47	; 71
    2f4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f4e:	18 16       	cp	r1, r24
    2f50:	4c f5       	brge	.+82     	; 0x2fa4 <LCD_sendCommand+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f52:	6d a9       	ldd	r22, Y+53	; 0x35
    2f54:	7e a9       	ldd	r23, Y+54	; 0x36
    2f56:	8f a9       	ldd	r24, Y+55	; 0x37
    2f58:	98 ad       	ldd	r25, Y+56	; 0x38
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	40 e2       	ldi	r20, 0x20	; 32
    2f60:	51 e4       	ldi	r21, 0x41	; 65
    2f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f66:	dc 01       	movw	r26, r24
    2f68:	cb 01       	movw	r24, r22
    2f6a:	bc 01       	movw	r22, r24
    2f6c:	cd 01       	movw	r24, r26
    2f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	98 ab       	std	Y+48, r25	; 0x30
    2f78:	8f a7       	std	Y+47, r24	; 0x2f
    2f7a:	0f c0       	rjmp	.+30     	; 0x2f9a <LCD_sendCommand+0xd8>
    2f7c:	80 e9       	ldi	r24, 0x90	; 144
    2f7e:	91 e0       	ldi	r25, 0x01	; 1
    2f80:	9e a7       	std	Y+46, r25	; 0x2e
    2f82:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f84:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f86:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <LCD_sendCommand+0xc6>
    2f8c:	9e a7       	std	Y+46, r25	; 0x2e
    2f8e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f90:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f92:	98 a9       	ldd	r25, Y+48	; 0x30
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	98 ab       	std	Y+48, r25	; 0x30
    2f98:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f9c:	98 a9       	ldd	r25, Y+48	; 0x30
    2f9e:	00 97       	sbiw	r24, 0x00	; 0
    2fa0:	69 f7       	brne	.-38     	; 0x2f7c <LCD_sendCommand+0xba>
    2fa2:	14 c0       	rjmp	.+40     	; 0x2fcc <LCD_sendCommand+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa4:	69 a9       	ldd	r22, Y+49	; 0x31
    2fa6:	7a a9       	ldd	r23, Y+50	; 0x32
    2fa8:	8b a9       	ldd	r24, Y+51	; 0x33
    2faa:	9c a9       	ldd	r25, Y+52	; 0x34
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	98 ab       	std	Y+48, r25	; 0x30
    2fb6:	8f a7       	std	Y+47, r24	; 0x2f
    2fb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fba:	98 a9       	ldd	r25, Y+48	; 0x30
    2fbc:	9c a7       	std	Y+44, r25	; 0x2c
    2fbe:	8b a7       	std	Y+43, r24	; 0x2b
    2fc0:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fc2:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <LCD_sendCommand+0x102>
    2fc8:	9c a7       	std	Y+44, r25	; 0x2c
    2fca:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	61 e0       	ldi	r22, 0x01	; 1
    2fd2:	70 e0       	ldi	r23, 0x00	; 0
    2fd4:	41 e0       	ldi	r20, 0x01	; 1
    2fd6:	50 e0       	ldi	r21, 0x00	; 0
    2fd8:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_setPinValue>
    2fdc:	80 e0       	ldi	r24, 0x00	; 0
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	a0 e8       	ldi	r26, 0x80	; 128
    2fe2:	bf e3       	ldi	r27, 0x3F	; 63
    2fe4:	8f a3       	std	Y+39, r24	; 0x27
    2fe6:	98 a7       	std	Y+40, r25	; 0x28
    2fe8:	a9 a7       	std	Y+41, r26	; 0x29
    2fea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fec:	6f a1       	ldd	r22, Y+39	; 0x27
    2fee:	78 a5       	ldd	r23, Y+40	; 0x28
    2ff0:	89 a5       	ldd	r24, Y+41	; 0x29
    2ff2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	4a e7       	ldi	r20, 0x7A	; 122
    2ffa:	55 e4       	ldi	r21, 0x45	; 69
    2ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3000:	dc 01       	movw	r26, r24
    3002:	cb 01       	movw	r24, r22
    3004:	8b a3       	std	Y+35, r24	; 0x23
    3006:	9c a3       	std	Y+36, r25	; 0x24
    3008:	ad a3       	std	Y+37, r26	; 0x25
    300a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    300c:	6b a1       	ldd	r22, Y+35	; 0x23
    300e:	7c a1       	ldd	r23, Y+36	; 0x24
    3010:	8d a1       	ldd	r24, Y+37	; 0x25
    3012:	9e a1       	ldd	r25, Y+38	; 0x26
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e8       	ldi	r20, 0x80	; 128
    301a:	5f e3       	ldi	r21, 0x3F	; 63
    301c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3020:	88 23       	and	r24, r24
    3022:	2c f4       	brge	.+10     	; 0x302e <LCD_sendCommand+0x16c>
		__ticks = 1;
    3024:	81 e0       	ldi	r24, 0x01	; 1
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	9a a3       	std	Y+34, r25	; 0x22
    302a:	89 a3       	std	Y+33, r24	; 0x21
    302c:	3f c0       	rjmp	.+126    	; 0x30ac <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    302e:	6b a1       	ldd	r22, Y+35	; 0x23
    3030:	7c a1       	ldd	r23, Y+36	; 0x24
    3032:	8d a1       	ldd	r24, Y+37	; 0x25
    3034:	9e a1       	ldd	r25, Y+38	; 0x26
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	3f ef       	ldi	r19, 0xFF	; 255
    303a:	4f e7       	ldi	r20, 0x7F	; 127
    303c:	57 e4       	ldi	r21, 0x47	; 71
    303e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3042:	18 16       	cp	r1, r24
    3044:	4c f5       	brge	.+82     	; 0x3098 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3046:	6f a1       	ldd	r22, Y+39	; 0x27
    3048:	78 a5       	ldd	r23, Y+40	; 0x28
    304a:	89 a5       	ldd	r24, Y+41	; 0x29
    304c:	9a a5       	ldd	r25, Y+42	; 0x2a
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	40 e2       	ldi	r20, 0x20	; 32
    3054:	51 e4       	ldi	r21, 0x41	; 65
    3056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	bc 01       	movw	r22, r24
    3060:	cd 01       	movw	r24, r26
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9a a3       	std	Y+34, r25	; 0x22
    306c:	89 a3       	std	Y+33, r24	; 0x21
    306e:	0f c0       	rjmp	.+30     	; 0x308e <LCD_sendCommand+0x1cc>
    3070:	80 e9       	ldi	r24, 0x90	; 144
    3072:	91 e0       	ldi	r25, 0x01	; 1
    3074:	98 a3       	std	Y+32, r25	; 0x20
    3076:	8f 8f       	std	Y+31, r24	; 0x1f
    3078:	8f 8d       	ldd	r24, Y+31	; 0x1f
    307a:	98 a1       	ldd	r25, Y+32	; 0x20
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	f1 f7       	brne	.-4      	; 0x307c <LCD_sendCommand+0x1ba>
    3080:	98 a3       	std	Y+32, r25	; 0x20
    3082:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3084:	89 a1       	ldd	r24, Y+33	; 0x21
    3086:	9a a1       	ldd	r25, Y+34	; 0x22
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	9a a3       	std	Y+34, r25	; 0x22
    308c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    308e:	89 a1       	ldd	r24, Y+33	; 0x21
    3090:	9a a1       	ldd	r25, Y+34	; 0x22
    3092:	00 97       	sbiw	r24, 0x00	; 0
    3094:	69 f7       	brne	.-38     	; 0x3070 <LCD_sendCommand+0x1ae>
    3096:	14 c0       	rjmp	.+40     	; 0x30c0 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3098:	6b a1       	ldd	r22, Y+35	; 0x23
    309a:	7c a1       	ldd	r23, Y+36	; 0x24
    309c:	8d a1       	ldd	r24, Y+37	; 0x25
    309e:	9e a1       	ldd	r25, Y+38	; 0x26
    30a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	9a a3       	std	Y+34, r25	; 0x22
    30aa:	89 a3       	std	Y+33, r24	; 0x21
    30ac:	89 a1       	ldd	r24, Y+33	; 0x21
    30ae:	9a a1       	ldd	r25, Y+34	; 0x22
    30b0:	9e 8f       	std	Y+30, r25	; 0x1e
    30b2:	8d 8f       	std	Y+29, r24	; 0x1d
    30b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30b8:	01 97       	sbiw	r24, 0x01	; 1
    30ba:	f1 f7       	brne	.-4      	; 0x30b8 <LCD_sendCommand+0x1f6>
    30bc:	9e 8f       	std	Y+30, r25	; 0x1e
    30be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, command);
    30c0:	89 ad       	ldd	r24, Y+57	; 0x39
    30c2:	28 2f       	mov	r18, r24
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	b9 01       	movw	r22, r18
    30cc:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_setPortValue>
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 e8       	ldi	r26, 0x80	; 128
    30d6:	bf e3       	ldi	r27, 0x3F	; 63
    30d8:	89 8f       	std	Y+25, r24	; 0x19
    30da:	9a 8f       	std	Y+26, r25	; 0x1a
    30dc:	ab 8f       	std	Y+27, r26	; 0x1b
    30de:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e0:	69 8d       	ldd	r22, Y+25	; 0x19
    30e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a e7       	ldi	r20, 0x7A	; 122
    30ee:	55 e4       	ldi	r21, 0x45	; 69
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8d 8b       	std	Y+21, r24	; 0x15
    30fa:	9e 8b       	std	Y+22, r25	; 0x16
    30fc:	af 8b       	std	Y+23, r26	; 0x17
    30fe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3100:	6d 89       	ldd	r22, Y+21	; 0x15
    3102:	7e 89       	ldd	r23, Y+22	; 0x16
    3104:	8f 89       	ldd	r24, Y+23	; 0x17
    3106:	98 8d       	ldd	r25, Y+24	; 0x18
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	2c f4       	brge	.+10     	; 0x3122 <LCD_sendCommand+0x260>
		__ticks = 1;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9c 8b       	std	Y+20, r25	; 0x14
    311e:	8b 8b       	std	Y+19, r24	; 0x13
    3120:	3f c0       	rjmp	.+126    	; 0x31a0 <LCD_sendCommand+0x2de>
	else if (__tmp > 65535)
    3122:	6d 89       	ldd	r22, Y+21	; 0x15
    3124:	7e 89       	ldd	r23, Y+22	; 0x16
    3126:	8f 89       	ldd	r24, Y+23	; 0x17
    3128:	98 8d       	ldd	r25, Y+24	; 0x18
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	4c f5       	brge	.+82     	; 0x318c <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313a:	69 8d       	ldd	r22, Y+25	; 0x19
    313c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    313e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9c 8b       	std	Y+20, r25	; 0x14
    3160:	8b 8b       	std	Y+19, r24	; 0x13
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <LCD_sendCommand+0x2c0>
    3164:	80 e9       	ldi	r24, 0x90	; 144
    3166:	91 e0       	ldi	r25, 0x01	; 1
    3168:	9a 8b       	std	Y+18, r25	; 0x12
    316a:	89 8b       	std	Y+17, r24	; 0x11
    316c:	89 89       	ldd	r24, Y+17	; 0x11
    316e:	9a 89       	ldd	r25, Y+18	; 0x12
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <LCD_sendCommand+0x2ae>
    3174:	9a 8b       	std	Y+18, r25	; 0x12
    3176:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	8b 89       	ldd	r24, Y+19	; 0x13
    317a:	9c 89       	ldd	r25, Y+20	; 0x14
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	9c 8b       	std	Y+20, r25	; 0x14
    3180:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	8b 89       	ldd	r24, Y+19	; 0x13
    3184:	9c 89       	ldd	r25, Y+20	; 0x14
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	69 f7       	brne	.-38     	; 0x3164 <LCD_sendCommand+0x2a2>
    318a:	14 c0       	rjmp	.+40     	; 0x31b4 <LCD_sendCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	6d 89       	ldd	r22, Y+21	; 0x15
    318e:	7e 89       	ldd	r23, Y+22	; 0x16
    3190:	8f 89       	ldd	r24, Y+23	; 0x17
    3192:	98 8d       	ldd	r25, Y+24	; 0x18
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9c 8b       	std	Y+20, r25	; 0x14
    319e:	8b 8b       	std	Y+19, r24	; 0x13
    31a0:	8b 89       	ldd	r24, Y+19	; 0x13
    31a2:	9c 89       	ldd	r25, Y+20	; 0x14
    31a4:	98 8b       	std	Y+16, r25	; 0x10
    31a6:	8f 87       	std	Y+15, r24	; 0x0f
    31a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    31aa:	98 89       	ldd	r25, Y+16	; 0x10
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <LCD_sendCommand+0x2ea>
    31b0:	98 8b       	std	Y+16, r25	; 0x10
    31b2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	90 e0       	ldi	r25, 0x00	; 0
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	70 e0       	ldi	r23, 0x00	; 0
    31bc:	40 e0       	ldi	r20, 0x00	; 0
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_setPinValue>
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	a0 e8       	ldi	r26, 0x80	; 128
    31ca:	bf e3       	ldi	r27, 0x3F	; 63
    31cc:	8b 87       	std	Y+11, r24	; 0x0b
    31ce:	9c 87       	std	Y+12, r25	; 0x0c
    31d0:	ad 87       	std	Y+13, r26	; 0x0d
    31d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31da:	9e 85       	ldd	r25, Y+14	; 0x0e
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4a e7       	ldi	r20, 0x7A	; 122
    31e2:	55 e4       	ldi	r21, 0x45	; 69
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8f 83       	std	Y+7, r24	; 0x07
    31ee:	98 87       	std	Y+8, r25	; 0x08
    31f0:	a9 87       	std	Y+9, r26	; 0x09
    31f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31f4:	6f 81       	ldd	r22, Y+7	; 0x07
    31f6:	78 85       	ldd	r23, Y+8	; 0x08
    31f8:	89 85       	ldd	r24, Y+9	; 0x09
    31fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	2c f4       	brge	.+10     	; 0x3216 <LCD_sendCommand+0x354>
		__ticks = 1;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	3f c0       	rjmp	.+126    	; 0x3294 <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    3216:	6f 81       	ldd	r22, Y+7	; 0x07
    3218:	78 85       	ldd	r23, Y+8	; 0x08
    321a:	89 85       	ldd	r24, Y+9	; 0x09
    321c:	9a 85       	ldd	r25, Y+10	; 0x0a
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	4f e7       	ldi	r20, 0x7F	; 127
    3224:	57 e4       	ldi	r21, 0x47	; 71
    3226:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    322a:	18 16       	cp	r1, r24
    322c:	4c f5       	brge	.+82     	; 0x3280 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3230:	7c 85       	ldd	r23, Y+12	; 0x0c
    3232:	8d 85       	ldd	r24, Y+13	; 0x0d
    3234:	9e 85       	ldd	r25, Y+14	; 0x0e
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9e 83       	std	Y+6, r25	; 0x06
    3254:	8d 83       	std	Y+5, r24	; 0x05
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <LCD_sendCommand+0x3b4>
    3258:	80 e9       	ldi	r24, 0x90	; 144
    325a:	91 e0       	ldi	r25, 0x01	; 1
    325c:	9c 83       	std	Y+4, r25	; 0x04
    325e:	8b 83       	std	Y+3, r24	; 0x03
    3260:	8b 81       	ldd	r24, Y+3	; 0x03
    3262:	9c 81       	ldd	r25, Y+4	; 0x04
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <LCD_sendCommand+0x3a2>
    3268:	9c 83       	std	Y+4, r25	; 0x04
    326a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326c:	8d 81       	ldd	r24, Y+5	; 0x05
    326e:	9e 81       	ldd	r25, Y+6	; 0x06
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	9e 83       	std	Y+6, r25	; 0x06
    3274:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	8d 81       	ldd	r24, Y+5	; 0x05
    3278:	9e 81       	ldd	r25, Y+6	; 0x06
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	69 f7       	brne	.-38     	; 0x3258 <LCD_sendCommand+0x396>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3280:	6f 81       	ldd	r22, Y+7	; 0x07
    3282:	78 85       	ldd	r23, Y+8	; 0x08
    3284:	89 85       	ldd	r24, Y+9	; 0x09
    3286:	9a 85       	ldd	r25, Y+10	; 0x0a
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9e 83       	std	Y+6, r25	; 0x06
    3292:	8d 83       	std	Y+5, r24	; 0x05
    3294:	8d 81       	ldd	r24, Y+5	; 0x05
    3296:	9e 81       	ldd	r25, Y+6	; 0x06
    3298:	9a 83       	std	Y+2, r25	; 0x02
    329a:	89 83       	std	Y+1, r24	; 0x01
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	9a 81       	ldd	r25, Y+2	; 0x02
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <LCD_sendCommand+0x3de>
    32a4:	9a 83       	std	Y+2, r25	; 0x02
    32a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    32a8:	e9 96       	adiw	r28, 0x39	; 57
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	f8 94       	cli
    32ae:	de bf       	out	0x3e, r29	; 62
    32b0:	0f be       	out	0x3f, r0	; 63
    32b2:	cd bf       	out	0x3d, r28	; 61
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	08 95       	ret

000032ba <LCD_displayCharacter>:
void LCD_displayCharacter(u8 data)
{
    32ba:	df 93       	push	r29
    32bc:	cf 93       	push	r28
    32be:	cd b7       	in	r28, 0x3d	; 61
    32c0:	de b7       	in	r29, 0x3e	; 62
    32c2:	e9 97       	sbiw	r28, 0x39	; 57
    32c4:	0f b6       	in	r0, 0x3f	; 63
    32c6:	f8 94       	cli
    32c8:	de bf       	out	0x3e, r29	; 62
    32ca:	0f be       	out	0x3f, r0	; 63
    32cc:	cd bf       	out	0x3d, r28	; 61
    32ce:	89 af       	std	Y+57, r24	; 0x39
	LCD_setPinValue(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	60 e0       	ldi	r22, 0x00	; 0
    32d6:	70 e0       	ldi	r23, 0x00	; 0
    32d8:	41 e0       	ldi	r20, 0x01	; 1
    32da:	50 e0       	ldi	r21, 0x00	; 0
    32dc:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_setPinValue>
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	a0 e8       	ldi	r26, 0x80	; 128
    32e6:	bf e3       	ldi	r27, 0x3F	; 63
    32e8:	8d ab       	std	Y+53, r24	; 0x35
    32ea:	9e ab       	std	Y+54, r25	; 0x36
    32ec:	af ab       	std	Y+55, r26	; 0x37
    32ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32f0:	6d a9       	ldd	r22, Y+53	; 0x35
    32f2:	7e a9       	ldd	r23, Y+54	; 0x36
    32f4:	8f a9       	ldd	r24, Y+55	; 0x37
    32f6:	98 ad       	ldd	r25, Y+56	; 0x38
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	4a e7       	ldi	r20, 0x7A	; 122
    32fe:	55 e4       	ldi	r21, 0x45	; 69
    3300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	89 ab       	std	Y+49, r24	; 0x31
    330a:	9a ab       	std	Y+50, r25	; 0x32
    330c:	ab ab       	std	Y+51, r26	; 0x33
    330e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3310:	69 a9       	ldd	r22, Y+49	; 0x31
    3312:	7a a9       	ldd	r23, Y+50	; 0x32
    3314:	8b a9       	ldd	r24, Y+51	; 0x33
    3316:	9c a9       	ldd	r25, Y+52	; 0x34
    3318:	20 e0       	ldi	r18, 0x00	; 0
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	40 e8       	ldi	r20, 0x80	; 128
    331e:	5f e3       	ldi	r21, 0x3F	; 63
    3320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3324:	88 23       	and	r24, r24
    3326:	2c f4       	brge	.+10     	; 0x3332 <LCD_displayCharacter+0x78>
		__ticks = 1;
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	98 ab       	std	Y+48, r25	; 0x30
    332e:	8f a7       	std	Y+47, r24	; 0x2f
    3330:	3f c0       	rjmp	.+126    	; 0x33b0 <LCD_displayCharacter+0xf6>
	else if (__tmp > 65535)
    3332:	69 a9       	ldd	r22, Y+49	; 0x31
    3334:	7a a9       	ldd	r23, Y+50	; 0x32
    3336:	8b a9       	ldd	r24, Y+51	; 0x33
    3338:	9c a9       	ldd	r25, Y+52	; 0x34
    333a:	20 e0       	ldi	r18, 0x00	; 0
    333c:	3f ef       	ldi	r19, 0xFF	; 255
    333e:	4f e7       	ldi	r20, 0x7F	; 127
    3340:	57 e4       	ldi	r21, 0x47	; 71
    3342:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3346:	18 16       	cp	r1, r24
    3348:	4c f5       	brge	.+82     	; 0x339c <LCD_displayCharacter+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    334a:	6d a9       	ldd	r22, Y+53	; 0x35
    334c:	7e a9       	ldd	r23, Y+54	; 0x36
    334e:	8f a9       	ldd	r24, Y+55	; 0x37
    3350:	98 ad       	ldd	r25, Y+56	; 0x38
    3352:	20 e0       	ldi	r18, 0x00	; 0
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	40 e2       	ldi	r20, 0x20	; 32
    3358:	51 e4       	ldi	r21, 0x41	; 65
    335a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335e:	dc 01       	movw	r26, r24
    3360:	cb 01       	movw	r24, r22
    3362:	bc 01       	movw	r22, r24
    3364:	cd 01       	movw	r24, r26
    3366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	98 ab       	std	Y+48, r25	; 0x30
    3370:	8f a7       	std	Y+47, r24	; 0x2f
    3372:	0f c0       	rjmp	.+30     	; 0x3392 <LCD_displayCharacter+0xd8>
    3374:	80 e9       	ldi	r24, 0x90	; 144
    3376:	91 e0       	ldi	r25, 0x01	; 1
    3378:	9e a7       	std	Y+46, r25	; 0x2e
    337a:	8d a7       	std	Y+45, r24	; 0x2d
    337c:	8d a5       	ldd	r24, Y+45	; 0x2d
    337e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3380:	01 97       	sbiw	r24, 0x01	; 1
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_displayCharacter+0xc6>
    3384:	9e a7       	std	Y+46, r25	; 0x2e
    3386:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3388:	8f a5       	ldd	r24, Y+47	; 0x2f
    338a:	98 a9       	ldd	r25, Y+48	; 0x30
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	98 ab       	std	Y+48, r25	; 0x30
    3390:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3392:	8f a5       	ldd	r24, Y+47	; 0x2f
    3394:	98 a9       	ldd	r25, Y+48	; 0x30
    3396:	00 97       	sbiw	r24, 0x00	; 0
    3398:	69 f7       	brne	.-38     	; 0x3374 <LCD_displayCharacter+0xba>
    339a:	14 c0       	rjmp	.+40     	; 0x33c4 <LCD_displayCharacter+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    339c:	69 a9       	ldd	r22, Y+49	; 0x31
    339e:	7a a9       	ldd	r23, Y+50	; 0x32
    33a0:	8b a9       	ldd	r24, Y+51	; 0x33
    33a2:	9c a9       	ldd	r25, Y+52	; 0x34
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	98 ab       	std	Y+48, r25	; 0x30
    33ae:	8f a7       	std	Y+47, r24	; 0x2f
    33b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b2:	98 a9       	ldd	r25, Y+48	; 0x30
    33b4:	9c a7       	std	Y+44, r25	; 0x2c
    33b6:	8b a7       	std	Y+43, r24	; 0x2b
    33b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    33ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    33bc:	01 97       	sbiw	r24, 0x01	; 1
    33be:	f1 f7       	brne	.-4      	; 0x33bc <LCD_displayCharacter+0x102>
    33c0:	9c a7       	std	Y+44, r25	; 0x2c
    33c2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH);
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	61 e0       	ldi	r22, 0x01	; 1
    33ca:	70 e0       	ldi	r23, 0x00	; 0
    33cc:	41 e0       	ldi	r20, 0x01	; 1
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_setPinValue>
    33d4:	80 e0       	ldi	r24, 0x00	; 0
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	a0 e8       	ldi	r26, 0x80	; 128
    33da:	bf e3       	ldi	r27, 0x3F	; 63
    33dc:	8f a3       	std	Y+39, r24	; 0x27
    33de:	98 a7       	std	Y+40, r25	; 0x28
    33e0:	a9 a7       	std	Y+41, r26	; 0x29
    33e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e4:	6f a1       	ldd	r22, Y+39	; 0x27
    33e6:	78 a5       	ldd	r23, Y+40	; 0x28
    33e8:	89 a5       	ldd	r24, Y+41	; 0x29
    33ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ec:	20 e0       	ldi	r18, 0x00	; 0
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	4a e7       	ldi	r20, 0x7A	; 122
    33f2:	55 e4       	ldi	r21, 0x45	; 69
    33f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	8b a3       	std	Y+35, r24	; 0x23
    33fe:	9c a3       	std	Y+36, r25	; 0x24
    3400:	ad a3       	std	Y+37, r26	; 0x25
    3402:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3404:	6b a1       	ldd	r22, Y+35	; 0x23
    3406:	7c a1       	ldd	r23, Y+36	; 0x24
    3408:	8d a1       	ldd	r24, Y+37	; 0x25
    340a:	9e a1       	ldd	r25, Y+38	; 0x26
    340c:	20 e0       	ldi	r18, 0x00	; 0
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	40 e8       	ldi	r20, 0x80	; 128
    3412:	5f e3       	ldi	r21, 0x3F	; 63
    3414:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3418:	88 23       	and	r24, r24
    341a:	2c f4       	brge	.+10     	; 0x3426 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    341c:	81 e0       	ldi	r24, 0x01	; 1
    341e:	90 e0       	ldi	r25, 0x00	; 0
    3420:	9a a3       	std	Y+34, r25	; 0x22
    3422:	89 a3       	std	Y+33, r24	; 0x21
    3424:	3f c0       	rjmp	.+126    	; 0x34a4 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    3426:	6b a1       	ldd	r22, Y+35	; 0x23
    3428:	7c a1       	ldd	r23, Y+36	; 0x24
    342a:	8d a1       	ldd	r24, Y+37	; 0x25
    342c:	9e a1       	ldd	r25, Y+38	; 0x26
    342e:	20 e0       	ldi	r18, 0x00	; 0
    3430:	3f ef       	ldi	r19, 0xFF	; 255
    3432:	4f e7       	ldi	r20, 0x7F	; 127
    3434:	57 e4       	ldi	r21, 0x47	; 71
    3436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    343a:	18 16       	cp	r1, r24
    343c:	4c f5       	brge	.+82     	; 0x3490 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    343e:	6f a1       	ldd	r22, Y+39	; 0x27
    3440:	78 a5       	ldd	r23, Y+40	; 0x28
    3442:	89 a5       	ldd	r24, Y+41	; 0x29
    3444:	9a a5       	ldd	r25, Y+42	; 0x2a
    3446:	20 e0       	ldi	r18, 0x00	; 0
    3448:	30 e0       	ldi	r19, 0x00	; 0
    344a:	40 e2       	ldi	r20, 0x20	; 32
    344c:	51 e4       	ldi	r21, 0x41	; 65
    344e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3452:	dc 01       	movw	r26, r24
    3454:	cb 01       	movw	r24, r22
    3456:	bc 01       	movw	r22, r24
    3458:	cd 01       	movw	r24, r26
    345a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345e:	dc 01       	movw	r26, r24
    3460:	cb 01       	movw	r24, r22
    3462:	9a a3       	std	Y+34, r25	; 0x22
    3464:	89 a3       	std	Y+33, r24	; 0x21
    3466:	0f c0       	rjmp	.+30     	; 0x3486 <LCD_displayCharacter+0x1cc>
    3468:	80 e9       	ldi	r24, 0x90	; 144
    346a:	91 e0       	ldi	r25, 0x01	; 1
    346c:	98 a3       	std	Y+32, r25	; 0x20
    346e:	8f 8f       	std	Y+31, r24	; 0x1f
    3470:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3472:	98 a1       	ldd	r25, Y+32	; 0x20
    3474:	01 97       	sbiw	r24, 0x01	; 1
    3476:	f1 f7       	brne	.-4      	; 0x3474 <LCD_displayCharacter+0x1ba>
    3478:	98 a3       	std	Y+32, r25	; 0x20
    347a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347c:	89 a1       	ldd	r24, Y+33	; 0x21
    347e:	9a a1       	ldd	r25, Y+34	; 0x22
    3480:	01 97       	sbiw	r24, 0x01	; 1
    3482:	9a a3       	std	Y+34, r25	; 0x22
    3484:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3486:	89 a1       	ldd	r24, Y+33	; 0x21
    3488:	9a a1       	ldd	r25, Y+34	; 0x22
    348a:	00 97       	sbiw	r24, 0x00	; 0
    348c:	69 f7       	brne	.-38     	; 0x3468 <LCD_displayCharacter+0x1ae>
    348e:	14 c0       	rjmp	.+40     	; 0x34b8 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3490:	6b a1       	ldd	r22, Y+35	; 0x23
    3492:	7c a1       	ldd	r23, Y+36	; 0x24
    3494:	8d a1       	ldd	r24, Y+37	; 0x25
    3496:	9e a1       	ldd	r25, Y+38	; 0x26
    3498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349c:	dc 01       	movw	r26, r24
    349e:	cb 01       	movw	r24, r22
    34a0:	9a a3       	std	Y+34, r25	; 0x22
    34a2:	89 a3       	std	Y+33, r24	; 0x21
    34a4:	89 a1       	ldd	r24, Y+33	; 0x21
    34a6:	9a a1       	ldd	r25, Y+34	; 0x22
    34a8:	9e 8f       	std	Y+30, r25	; 0x1e
    34aa:	8d 8f       	std	Y+29, r24	; 0x1d
    34ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34b0:	01 97       	sbiw	r24, 0x01	; 1
    34b2:	f1 f7       	brne	.-4      	; 0x34b0 <LCD_displayCharacter+0x1f6>
    34b4:	9e 8f       	std	Y+30, r25	; 0x1e
    34b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_setPortValue(LCD_DATA_PORT_ID, data);
    34b8:	89 ad       	ldd	r24, Y+57	; 0x39
    34ba:	28 2f       	mov	r18, r24
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	b9 01       	movw	r22, r18
    34c4:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <LCD_setPortValue>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	a0 e8       	ldi	r26, 0x80	; 128
    34ce:	bf e3       	ldi	r27, 0x3F	; 63
    34d0:	89 8f       	std	Y+25, r24	; 0x19
    34d2:	9a 8f       	std	Y+26, r25	; 0x1a
    34d4:	ab 8f       	std	Y+27, r26	; 0x1b
    34d6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d8:	69 8d       	ldd	r22, Y+25	; 0x19
    34da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34e0:	20 e0       	ldi	r18, 0x00	; 0
    34e2:	30 e0       	ldi	r19, 0x00	; 0
    34e4:	4a e7       	ldi	r20, 0x7A	; 122
    34e6:	55 e4       	ldi	r21, 0x45	; 69
    34e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	8d 8b       	std	Y+21, r24	; 0x15
    34f2:	9e 8b       	std	Y+22, r25	; 0x16
    34f4:	af 8b       	std	Y+23, r26	; 0x17
    34f6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34f8:	6d 89       	ldd	r22, Y+21	; 0x15
    34fa:	7e 89       	ldd	r23, Y+22	; 0x16
    34fc:	8f 89       	ldd	r24, Y+23	; 0x17
    34fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3500:	20 e0       	ldi	r18, 0x00	; 0
    3502:	30 e0       	ldi	r19, 0x00	; 0
    3504:	40 e8       	ldi	r20, 0x80	; 128
    3506:	5f e3       	ldi	r21, 0x3F	; 63
    3508:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    350c:	88 23       	and	r24, r24
    350e:	2c f4       	brge	.+10     	; 0x351a <LCD_displayCharacter+0x260>
		__ticks = 1;
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9c 8b       	std	Y+20, r25	; 0x14
    3516:	8b 8b       	std	Y+19, r24	; 0x13
    3518:	3f c0       	rjmp	.+126    	; 0x3598 <LCD_displayCharacter+0x2de>
	else if (__tmp > 65535)
    351a:	6d 89       	ldd	r22, Y+21	; 0x15
    351c:	7e 89       	ldd	r23, Y+22	; 0x16
    351e:	8f 89       	ldd	r24, Y+23	; 0x17
    3520:	98 8d       	ldd	r25, Y+24	; 0x18
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	3f ef       	ldi	r19, 0xFF	; 255
    3526:	4f e7       	ldi	r20, 0x7F	; 127
    3528:	57 e4       	ldi	r21, 0x47	; 71
    352a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    352e:	18 16       	cp	r1, r24
    3530:	4c f5       	brge	.+82     	; 0x3584 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3532:	69 8d       	ldd	r22, Y+25	; 0x19
    3534:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3536:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3538:	9c 8d       	ldd	r25, Y+28	; 0x1c
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	40 e2       	ldi	r20, 0x20	; 32
    3540:	51 e4       	ldi	r21, 0x41	; 65
    3542:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	bc 01       	movw	r22, r24
    354c:	cd 01       	movw	r24, r26
    354e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3552:	dc 01       	movw	r26, r24
    3554:	cb 01       	movw	r24, r22
    3556:	9c 8b       	std	Y+20, r25	; 0x14
    3558:	8b 8b       	std	Y+19, r24	; 0x13
    355a:	0f c0       	rjmp	.+30     	; 0x357a <LCD_displayCharacter+0x2c0>
    355c:	80 e9       	ldi	r24, 0x90	; 144
    355e:	91 e0       	ldi	r25, 0x01	; 1
    3560:	9a 8b       	std	Y+18, r25	; 0x12
    3562:	89 8b       	std	Y+17, r24	; 0x11
    3564:	89 89       	ldd	r24, Y+17	; 0x11
    3566:	9a 89       	ldd	r25, Y+18	; 0x12
    3568:	01 97       	sbiw	r24, 0x01	; 1
    356a:	f1 f7       	brne	.-4      	; 0x3568 <LCD_displayCharacter+0x2ae>
    356c:	9a 8b       	std	Y+18, r25	; 0x12
    356e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3570:	8b 89       	ldd	r24, Y+19	; 0x13
    3572:	9c 89       	ldd	r25, Y+20	; 0x14
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	9c 8b       	std	Y+20, r25	; 0x14
    3578:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	8b 89       	ldd	r24, Y+19	; 0x13
    357c:	9c 89       	ldd	r25, Y+20	; 0x14
    357e:	00 97       	sbiw	r24, 0x00	; 0
    3580:	69 f7       	brne	.-38     	; 0x355c <LCD_displayCharacter+0x2a2>
    3582:	14 c0       	rjmp	.+40     	; 0x35ac <LCD_displayCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3584:	6d 89       	ldd	r22, Y+21	; 0x15
    3586:	7e 89       	ldd	r23, Y+22	; 0x16
    3588:	8f 89       	ldd	r24, Y+23	; 0x17
    358a:	98 8d       	ldd	r25, Y+24	; 0x18
    358c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	9c 8b       	std	Y+20, r25	; 0x14
    3596:	8b 8b       	std	Y+19, r24	; 0x13
    3598:	8b 89       	ldd	r24, Y+19	; 0x13
    359a:	9c 89       	ldd	r25, Y+20	; 0x14
    359c:	98 8b       	std	Y+16, r25	; 0x10
    359e:	8f 87       	std	Y+15, r24	; 0x0f
    35a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a2:	98 89       	ldd	r25, Y+16	; 0x10
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <LCD_displayCharacter+0x2ea>
    35a8:	98 8b       	std	Y+16, r25	; 0x10
    35aa:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_setPinValue(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	90 e0       	ldi	r25, 0x00	; 0
    35b0:	61 e0       	ldi	r22, 0x01	; 1
    35b2:	70 e0       	ldi	r23, 0x00	; 0
    35b4:	40 e0       	ldi	r20, 0x00	; 0
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	0e 94 91 08 	call	0x1122	; 0x1122 <LCD_setPinValue>
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	a0 e8       	ldi	r26, 0x80	; 128
    35c2:	bf e3       	ldi	r27, 0x3F	; 63
    35c4:	8b 87       	std	Y+11, r24	; 0x0b
    35c6:	9c 87       	std	Y+12, r25	; 0x0c
    35c8:	ad 87       	std	Y+13, r26	; 0x0d
    35ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    35ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    35d4:	20 e0       	ldi	r18, 0x00	; 0
    35d6:	30 e0       	ldi	r19, 0x00	; 0
    35d8:	4a e7       	ldi	r20, 0x7A	; 122
    35da:	55 e4       	ldi	r21, 0x45	; 69
    35dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	8f 83       	std	Y+7, r24	; 0x07
    35e6:	98 87       	std	Y+8, r25	; 0x08
    35e8:	a9 87       	std	Y+9, r26	; 0x09
    35ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	20 e0       	ldi	r18, 0x00	; 0
    35f6:	30 e0       	ldi	r19, 0x00	; 0
    35f8:	40 e8       	ldi	r20, 0x80	; 128
    35fa:	5f e3       	ldi	r21, 0x3F	; 63
    35fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3600:	88 23       	and	r24, r24
    3602:	2c f4       	brge	.+10     	; 0x360e <LCD_displayCharacter+0x354>
		__ticks = 1;
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	9e 83       	std	Y+6, r25	; 0x06
    360a:	8d 83       	std	Y+5, r24	; 0x05
    360c:	3f c0       	rjmp	.+126    	; 0x368c <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    360e:	6f 81       	ldd	r22, Y+7	; 0x07
    3610:	78 85       	ldd	r23, Y+8	; 0x08
    3612:	89 85       	ldd	r24, Y+9	; 0x09
    3614:	9a 85       	ldd	r25, Y+10	; 0x0a
    3616:	20 e0       	ldi	r18, 0x00	; 0
    3618:	3f ef       	ldi	r19, 0xFF	; 255
    361a:	4f e7       	ldi	r20, 0x7F	; 127
    361c:	57 e4       	ldi	r21, 0x47	; 71
    361e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3622:	18 16       	cp	r1, r24
    3624:	4c f5       	brge	.+82     	; 0x3678 <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3626:	6b 85       	ldd	r22, Y+11	; 0x0b
    3628:	7c 85       	ldd	r23, Y+12	; 0x0c
    362a:	8d 85       	ldd	r24, Y+13	; 0x0d
    362c:	9e 85       	ldd	r25, Y+14	; 0x0e
    362e:	20 e0       	ldi	r18, 0x00	; 0
    3630:	30 e0       	ldi	r19, 0x00	; 0
    3632:	40 e2       	ldi	r20, 0x20	; 32
    3634:	51 e4       	ldi	r21, 0x41	; 65
    3636:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363a:	dc 01       	movw	r26, r24
    363c:	cb 01       	movw	r24, r22
    363e:	bc 01       	movw	r22, r24
    3640:	cd 01       	movw	r24, r26
    3642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	9e 83       	std	Y+6, r25	; 0x06
    364c:	8d 83       	std	Y+5, r24	; 0x05
    364e:	0f c0       	rjmp	.+30     	; 0x366e <LCD_displayCharacter+0x3b4>
    3650:	80 e9       	ldi	r24, 0x90	; 144
    3652:	91 e0       	ldi	r25, 0x01	; 1
    3654:	9c 83       	std	Y+4, r25	; 0x04
    3656:	8b 83       	std	Y+3, r24	; 0x03
    3658:	8b 81       	ldd	r24, Y+3	; 0x03
    365a:	9c 81       	ldd	r25, Y+4	; 0x04
    365c:	01 97       	sbiw	r24, 0x01	; 1
    365e:	f1 f7       	brne	.-4      	; 0x365c <LCD_displayCharacter+0x3a2>
    3660:	9c 83       	std	Y+4, r25	; 0x04
    3662:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3664:	8d 81       	ldd	r24, Y+5	; 0x05
    3666:	9e 81       	ldd	r25, Y+6	; 0x06
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	9e 83       	std	Y+6, r25	; 0x06
    366c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    366e:	8d 81       	ldd	r24, Y+5	; 0x05
    3670:	9e 81       	ldd	r25, Y+6	; 0x06
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	69 f7       	brne	.-38     	; 0x3650 <LCD_displayCharacter+0x396>
    3676:	14 c0       	rjmp	.+40     	; 0x36a0 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3678:	6f 81       	ldd	r22, Y+7	; 0x07
    367a:	78 85       	ldd	r23, Y+8	; 0x08
    367c:	89 85       	ldd	r24, Y+9	; 0x09
    367e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3684:	dc 01       	movw	r26, r24
    3686:	cb 01       	movw	r24, r22
    3688:	9e 83       	std	Y+6, r25	; 0x06
    368a:	8d 83       	std	Y+5, r24	; 0x05
    368c:	8d 81       	ldd	r24, Y+5	; 0x05
    368e:	9e 81       	ldd	r25, Y+6	; 0x06
    3690:	9a 83       	std	Y+2, r25	; 0x02
    3692:	89 83       	std	Y+1, r24	; 0x01
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	9a 81       	ldd	r25, Y+2	; 0x02
    3698:	01 97       	sbiw	r24, 0x01	; 1
    369a:	f1 f7       	brne	.-4      	; 0x3698 <LCD_displayCharacter+0x3de>
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    36a0:	e9 96       	adiw	r28, 0x39	; 57
    36a2:	0f b6       	in	r0, 0x3f	; 63
    36a4:	f8 94       	cli
    36a6:	de bf       	out	0x3e, r29	; 62
    36a8:	0f be       	out	0x3f, r0	; 63
    36aa:	cd bf       	out	0x3d, r28	; 61
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	08 95       	ret

000036b2 <LCD_display_32bit>:

void LCD_display_32bit(u32 num){
    36b2:	0f 93       	push	r16
    36b4:	1f 93       	push	r17
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	cd b7       	in	r28, 0x3d	; 61
    36bc:	de b7       	in	r29, 0x3e	; 62
    36be:	a6 97       	sbiw	r28, 0x26	; 38
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	6b a3       	std	Y+35, r22	; 0x23
    36cc:	7c a3       	std	Y+36, r23	; 0x24
    36ce:	8d a3       	std	Y+37, r24	; 0x25
    36d0:	9e a3       	std	Y+38, r25	; 0x26
    u8 str[32];
    sprintf(str, "%lu", num);
    36d2:	8d b7       	in	r24, 0x3d	; 61
    36d4:	9e b7       	in	r25, 0x3e	; 62
    36d6:	08 97       	sbiw	r24, 0x08	; 8
    36d8:	0f b6       	in	r0, 0x3f	; 63
    36da:	f8 94       	cli
    36dc:	9e bf       	out	0x3e, r25	; 62
    36de:	0f be       	out	0x3f, r0	; 63
    36e0:	8d bf       	out	0x3d, r24	; 61
    36e2:	ed b7       	in	r30, 0x3d	; 61
    36e4:	fe b7       	in	r31, 0x3e	; 62
    36e6:	31 96       	adiw	r30, 0x01	; 1
    36e8:	ce 01       	movw	r24, r28
    36ea:	03 96       	adiw	r24, 0x03	; 3
    36ec:	91 83       	std	Z+1, r25	; 0x01
    36ee:	80 83       	st	Z, r24
    36f0:	80 e6       	ldi	r24, 0x60	; 96
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	93 83       	std	Z+3, r25	; 0x03
    36f6:	82 83       	std	Z+2, r24	; 0x02
    36f8:	8b a1       	ldd	r24, Y+35	; 0x23
    36fa:	9c a1       	ldd	r25, Y+36	; 0x24
    36fc:	ad a1       	ldd	r26, Y+37	; 0x25
    36fe:	be a1       	ldd	r27, Y+38	; 0x26
    3700:	84 83       	std	Z+4, r24	; 0x04
    3702:	95 83       	std	Z+5, r25	; 0x05
    3704:	a6 83       	std	Z+6, r26	; 0x06
    3706:	b7 83       	std	Z+7, r27	; 0x07
    3708:	0e 94 9a 22 	call	0x4534	; 0x4534 <sprintf>
    370c:	8d b7       	in	r24, 0x3d	; 61
    370e:	9e b7       	in	r25, 0x3e	; 62
    3710:	08 96       	adiw	r24, 0x08	; 8
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	9e bf       	out	0x3e, r25	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	8d bf       	out	0x3d, r24	; 61
    for (int i = 0; i < strlen(str); i++)
    371c:	1a 82       	std	Y+2, r1	; 0x02
    371e:	19 82       	std	Y+1, r1	; 0x01
    3720:	0f c0       	rjmp	.+30     	; 0x3740 <LCD_display_32bit+0x8e>
    {
    	LCD_displayCharacter(str[i]);
    3722:	29 81       	ldd	r18, Y+1	; 0x01
    3724:	3a 81       	ldd	r19, Y+2	; 0x02
    3726:	ce 01       	movw	r24, r28
    3728:	03 96       	adiw	r24, 0x03	; 3
    372a:	fc 01       	movw	r30, r24
    372c:	e2 0f       	add	r30, r18
    372e:	f3 1f       	adc	r31, r19
    3730:	80 81       	ld	r24, Z
    3732:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_displayCharacter>
}

void LCD_display_32bit(u32 num){
    u8 str[32];
    sprintf(str, "%lu", num);
    for (int i = 0; i < strlen(str); i++)
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	9a 81       	ldd	r25, Y+2	; 0x02
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	9a 83       	std	Y+2, r25	; 0x02
    373e:	89 83       	std	Y+1, r24	; 0x01
    3740:	09 81       	ldd	r16, Y+1	; 0x01
    3742:	1a 81       	ldd	r17, Y+2	; 0x02
    3744:	ce 01       	movw	r24, r28
    3746:	03 96       	adiw	r24, 0x03	; 3
    3748:	0e 94 91 22 	call	0x4522	; 0x4522 <strlen>
    374c:	08 17       	cp	r16, r24
    374e:	19 07       	cpc	r17, r25
    3750:	40 f3       	brcs	.-48     	; 0x3722 <LCD_display_32bit+0x70>
    {
    	LCD_displayCharacter(str[i]);
    }
}
    3752:	a6 96       	adiw	r28, 0x26	; 38
    3754:	0f b6       	in	r0, 0x3f	; 63
    3756:	f8 94       	cli
    3758:	de bf       	out	0x3e, r29	; 62
    375a:	0f be       	out	0x3f, r0	; 63
    375c:	cd bf       	out	0x3d, r28	; 61
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	08 95       	ret

00003768 <LCD_init>:


void LCD_init(void)
{
    3768:	df 93       	push	r29
    376a:	cf 93       	push	r28
    376c:	cd b7       	in	r28, 0x3d	; 61
    376e:	de b7       	in	r29, 0x3e	; 62
    3770:	2e 97       	sbiw	r28, 0x0e	; 14
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	f8 94       	cli
    3776:	de bf       	out	0x3e, r29	; 62
    3778:	0f be       	out	0x3f, r0	; 63
    377a:	cd bf       	out	0x3d, r28	; 61
	LCD_setPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	60 e0       	ldi	r22, 0x00	; 0
    3782:	70 e0       	ldi	r23, 0x00	; 0
    3784:	41 e0       	ldi	r20, 0x01	; 1
    3786:	50 e0       	ldi	r21, 0x00	; 0
    3788:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_setPinDirection>
	LCD_setPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);
    378c:	81 e0       	ldi	r24, 0x01	; 1
    378e:	90 e0       	ldi	r25, 0x00	; 0
    3790:	61 e0       	ldi	r22, 0x01	; 1
    3792:	70 e0       	ldi	r23, 0x00	; 0
    3794:	41 e0       	ldi	r20, 0x01	; 1
    3796:	50 e0       	ldi	r21, 0x00	; 0
    3798:	0e 94 a6 07 	call	0xf4c	; 0xf4c <LCD_setPinDirection>
	LCD_setPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	6f ef       	ldi	r22, 0xFF	; 255
    37a2:	70 e0       	ldi	r23, 0x00	; 0
    37a4:	0e 94 17 0a 	call	0x142e	; 0x142e <LCD_setPortDirection>
    37a8:	80 e0       	ldi	r24, 0x00	; 0
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	a0 ea       	ldi	r26, 0xA0	; 160
    37ae:	b1 e4       	ldi	r27, 0x41	; 65
    37b0:	8b 87       	std	Y+11, r24	; 0x0b
    37b2:	9c 87       	std	Y+12, r25	; 0x0c
    37b4:	ad 87       	std	Y+13, r26	; 0x0d
    37b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    37bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    37be:	9e 85       	ldd	r25, Y+14	; 0x0e
    37c0:	20 e0       	ldi	r18, 0x00	; 0
    37c2:	30 e0       	ldi	r19, 0x00	; 0
    37c4:	4a e7       	ldi	r20, 0x7A	; 122
    37c6:	55 e4       	ldi	r21, 0x45	; 69
    37c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37cc:	dc 01       	movw	r26, r24
    37ce:	cb 01       	movw	r24, r22
    37d0:	8f 83       	std	Y+7, r24	; 0x07
    37d2:	98 87       	std	Y+8, r25	; 0x08
    37d4:	a9 87       	std	Y+9, r26	; 0x09
    37d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37d8:	6f 81       	ldd	r22, Y+7	; 0x07
    37da:	78 85       	ldd	r23, Y+8	; 0x08
    37dc:	89 85       	ldd	r24, Y+9	; 0x09
    37de:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	30 e0       	ldi	r19, 0x00	; 0
    37e4:	40 e8       	ldi	r20, 0x80	; 128
    37e6:	5f e3       	ldi	r21, 0x3F	; 63
    37e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37ec:	88 23       	and	r24, r24
    37ee:	2c f4       	brge	.+10     	; 0x37fa <LCD_init+0x92>
		__ticks = 1;
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	9e 83       	std	Y+6, r25	; 0x06
    37f6:	8d 83       	std	Y+5, r24	; 0x05
    37f8:	3f c0       	rjmp	.+126    	; 0x3878 <LCD_init+0x110>
	else if (__tmp > 65535)
    37fa:	6f 81       	ldd	r22, Y+7	; 0x07
    37fc:	78 85       	ldd	r23, Y+8	; 0x08
    37fe:	89 85       	ldd	r24, Y+9	; 0x09
    3800:	9a 85       	ldd	r25, Y+10	; 0x0a
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	3f ef       	ldi	r19, 0xFF	; 255
    3806:	4f e7       	ldi	r20, 0x7F	; 127
    3808:	57 e4       	ldi	r21, 0x47	; 71
    380a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    380e:	18 16       	cp	r1, r24
    3810:	4c f5       	brge	.+82     	; 0x3864 <LCD_init+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3812:	6b 85       	ldd	r22, Y+11	; 0x0b
    3814:	7c 85       	ldd	r23, Y+12	; 0x0c
    3816:	8d 85       	ldd	r24, Y+13	; 0x0d
    3818:	9e 85       	ldd	r25, Y+14	; 0x0e
    381a:	20 e0       	ldi	r18, 0x00	; 0
    381c:	30 e0       	ldi	r19, 0x00	; 0
    381e:	40 e2       	ldi	r20, 0x20	; 32
    3820:	51 e4       	ldi	r21, 0x41	; 65
    3822:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3826:	dc 01       	movw	r26, r24
    3828:	cb 01       	movw	r24, r22
    382a:	bc 01       	movw	r22, r24
    382c:	cd 01       	movw	r24, r26
    382e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3832:	dc 01       	movw	r26, r24
    3834:	cb 01       	movw	r24, r22
    3836:	9e 83       	std	Y+6, r25	; 0x06
    3838:	8d 83       	std	Y+5, r24	; 0x05
    383a:	0f c0       	rjmp	.+30     	; 0x385a <LCD_init+0xf2>
    383c:	80 e9       	ldi	r24, 0x90	; 144
    383e:	91 e0       	ldi	r25, 0x01	; 1
    3840:	9c 83       	std	Y+4, r25	; 0x04
    3842:	8b 83       	std	Y+3, r24	; 0x03
    3844:	8b 81       	ldd	r24, Y+3	; 0x03
    3846:	9c 81       	ldd	r25, Y+4	; 0x04
    3848:	01 97       	sbiw	r24, 0x01	; 1
    384a:	f1 f7       	brne	.-4      	; 0x3848 <LCD_init+0xe0>
    384c:	9c 83       	std	Y+4, r25	; 0x04
    384e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3850:	8d 81       	ldd	r24, Y+5	; 0x05
    3852:	9e 81       	ldd	r25, Y+6	; 0x06
    3854:	01 97       	sbiw	r24, 0x01	; 1
    3856:	9e 83       	std	Y+6, r25	; 0x06
    3858:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    385a:	8d 81       	ldd	r24, Y+5	; 0x05
    385c:	9e 81       	ldd	r25, Y+6	; 0x06
    385e:	00 97       	sbiw	r24, 0x00	; 0
    3860:	69 f7       	brne	.-38     	; 0x383c <LCD_init+0xd4>
    3862:	14 c0       	rjmp	.+40     	; 0x388c <LCD_init+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3864:	6f 81       	ldd	r22, Y+7	; 0x07
    3866:	78 85       	ldd	r23, Y+8	; 0x08
    3868:	89 85       	ldd	r24, Y+9	; 0x09
    386a:	9a 85       	ldd	r25, Y+10	; 0x0a
    386c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3870:	dc 01       	movw	r26, r24
    3872:	cb 01       	movw	r24, r22
    3874:	9e 83       	std	Y+6, r25	; 0x06
    3876:	8d 83       	std	Y+5, r24	; 0x05
    3878:	8d 81       	ldd	r24, Y+5	; 0x05
    387a:	9e 81       	ldd	r25, Y+6	; 0x06
    387c:	9a 83       	std	Y+2, r25	; 0x02
    387e:	89 83       	std	Y+1, r24	; 0x01
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	9a 81       	ldd	r25, Y+2	; 0x02
    3884:	01 97       	sbiw	r24, 0x01	; 1
    3886:	f1 f7       	brne	.-4      	; 0x3884 <LCD_init+0x11c>
    3888:	9a 83       	std	Y+2, r25	; 0x02
    388a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    388c:	88 e3       	ldi	r24, 0x38	; 56
    388e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CURSOR_OFF);
    3892:	8c e0       	ldi	r24, 0x0C	; 12
    3894:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
}
    389e:	2e 96       	adiw	r28, 0x0e	; 14
    38a0:	0f b6       	in	r0, 0x3f	; 63
    38a2:	f8 94       	cli
    38a4:	de bf       	out	0x3e, r29	; 62
    38a6:	0f be       	out	0x3f, r0	; 63
    38a8:	cd bf       	out	0x3d, r28	; 61
    38aa:	cf 91       	pop	r28
    38ac:	df 91       	pop	r29
    38ae:	08 95       	ret

000038b0 <LCD_GoToXY>:

void LCD_GoToXY(u8 Copy_u8LineNum, u8 Copy_u8Location)
{
    38b0:	df 93       	push	r29
    38b2:	cf 93       	push	r28
    38b4:	00 d0       	rcall	.+0      	; 0x38b6 <LCD_GoToXY+0x6>
    38b6:	00 d0       	rcall	.+0      	; 0x38b8 <LCD_GoToXY+0x8>
    38b8:	cd b7       	in	r28, 0x3d	; 61
    38ba:	de b7       	in	r29, 0x3e	; 62
    38bc:	89 83       	std	Y+1, r24	; 0x01
    38be:	6a 83       	std	Y+2, r22	; 0x02
	if (Copy_u8LineNum <= 39)
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	88 32       	cpi	r24, 0x28	; 40
    38c4:	c0 f4       	brcc	.+48     	; 0x38f6 <LCD_GoToXY+0x46>
	{
		switch (Copy_u8LineNum)
    38c6:	89 81       	ldd	r24, Y+1	; 0x01
    38c8:	28 2f       	mov	r18, r24
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	3c 83       	std	Y+4, r19	; 0x04
    38ce:	2b 83       	std	Y+3, r18	; 0x03
    38d0:	8b 81       	ldd	r24, Y+3	; 0x03
    38d2:	9c 81       	ldd	r25, Y+4	; 0x04
    38d4:	00 97       	sbiw	r24, 0x00	; 0
    38d6:	31 f0       	breq	.+12     	; 0x38e4 <LCD_GoToXY+0x34>
    38d8:	2b 81       	ldd	r18, Y+3	; 0x03
    38da:	3c 81       	ldd	r19, Y+4	; 0x04
    38dc:	21 30       	cpi	r18, 0x01	; 1
    38de:	31 05       	cpc	r19, r1
    38e0:	31 f0       	breq	.+12     	; 0x38ee <LCD_GoToXY+0x3e>
    38e2:	09 c0       	rjmp	.+18     	; 0x38f6 <LCD_GoToXY+0x46>
		{
		case 0:
			LCD_sendCommand(LCD_Line0 + Copy_u8Location);
    38e4:	8a 81       	ldd	r24, Y+2	; 0x02
    38e6:	80 58       	subi	r24, 0x80	; 128
    38e8:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
    38ec:	04 c0       	rjmp	.+8      	; 0x38f6 <LCD_GoToXY+0x46>

			break;
		case 1:
			LCD_sendCommand(LCD_Line1 + Copy_u8Location);
    38ee:	8a 81       	ldd	r24, Y+2	; 0x02
    38f0:	80 54       	subi	r24, 0x40	; 64
    38f2:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
			break;
		}
	}
}
    38f6:	0f 90       	pop	r0
    38f8:	0f 90       	pop	r0
    38fa:	0f 90       	pop	r0
    38fc:	0f 90       	pop	r0
    38fe:	cf 91       	pop	r28
    3900:	df 91       	pop	r29
    3902:	08 95       	ret

00003904 <LCD_displayString>:

void LCD_displayString(const char *str)
{
    3904:	df 93       	push	r29
    3906:	cf 93       	push	r28
    3908:	00 d0       	rcall	.+0      	; 0x390a <LCD_displayString+0x6>
    390a:	0f 92       	push	r0
    390c:	cd b7       	in	r28, 0x3d	; 61
    390e:	de b7       	in	r29, 0x3e	; 62
    3910:	9b 83       	std	Y+3, r25	; 0x03
    3912:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3914:	19 82       	std	Y+1, r1	; 0x01
    3916:	0e c0       	rjmp	.+28     	; 0x3934 <LCD_displayString+0x30>
	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    3918:	89 81       	ldd	r24, Y+1	; 0x01
    391a:	28 2f       	mov	r18, r24
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	8a 81       	ldd	r24, Y+2	; 0x02
    3920:	9b 81       	ldd	r25, Y+3	; 0x03
    3922:	fc 01       	movw	r30, r24
    3924:	e2 0f       	add	r30, r18
    3926:	f3 1f       	adc	r31, r19
    3928:	80 81       	ld	r24, Z
    392a:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_displayCharacter>
		i++;
    392e:	89 81       	ldd	r24, Y+1	; 0x01
    3930:	8f 5f       	subi	r24, 0xFF	; 255
    3932:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *str)
{
	u8 i = 0;
	while (str[i] != '\0')
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	28 2f       	mov	r18, r24
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	8a 81       	ldd	r24, Y+2	; 0x02
    393c:	9b 81       	ldd	r25, Y+3	; 0x03
    393e:	fc 01       	movw	r30, r24
    3940:	e2 0f       	add	r30, r18
    3942:	f3 1f       	adc	r31, r19
    3944:	80 81       	ld	r24, Z
    3946:	88 23       	and	r24, r24
    3948:	39 f7       	brne	.-50     	; 0x3918 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    394a:	0f 90       	pop	r0
    394c:	0f 90       	pop	r0
    394e:	0f 90       	pop	r0
    3950:	cf 91       	pop	r28
    3952:	df 91       	pop	r29
    3954:	08 95       	ret

00003956 <LCD_String_xy>:

void LCD_String_xy(char row, char pos, char *str, u8 *count) /* Send string to LCD with xy position */
{
    3956:	df 93       	push	r29
    3958:	cf 93       	push	r28
    395a:	cd b7       	in	r28, 0x3d	; 61
    395c:	de b7       	in	r29, 0x3e	; 62
    395e:	28 97       	sbiw	r28, 0x08	; 8
    3960:	0f b6       	in	r0, 0x3f	; 63
    3962:	f8 94       	cli
    3964:	de bf       	out	0x3e, r29	; 62
    3966:	0f be       	out	0x3f, r0	; 63
    3968:	cd bf       	out	0x3d, r28	; 61
    396a:	8b 83       	std	Y+3, r24	; 0x03
    396c:	6c 83       	std	Y+4, r22	; 0x04
    396e:	5e 83       	std	Y+6, r21	; 0x06
    3970:	4d 83       	std	Y+5, r20	; 0x05
    3972:	38 87       	std	Y+8, r19	; 0x08
    3974:	2f 83       	std	Y+7, r18	; 0x07
	u8 i = 0, c = 1;
    3976:	1a 82       	std	Y+2, r1	; 0x02
    3978:	81 e0       	ldi	r24, 0x01	; 1
    397a:	89 83       	std	Y+1, r24	; 0x01
	if (row == 0 && pos < 16)
    397c:	8b 81       	ldd	r24, Y+3	; 0x03
    397e:	88 23       	and	r24, r24
    3980:	49 f4       	brne	.+18     	; 0x3994 <LCD_String_xy+0x3e>
    3982:	8c 81       	ldd	r24, Y+4	; 0x04
    3984:	80 31       	cpi	r24, 0x10	; 16
    3986:	30 f4       	brcc	.+12     	; 0x3994 <LCD_String_xy+0x3e>
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
    3988:	8c 81       	ldd	r24, Y+4	; 0x04
    398a:	8f 70       	andi	r24, 0x0F	; 15
    398c:	80 68       	ori	r24, 0x80	; 128
    398e:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
    3992:	3a c0       	rjmp	.+116    	; 0x3a08 <LCD_String_xy+0xb2>
	else if (row == 1 && pos < 16)
    3994:	8b 81       	ldd	r24, Y+3	; 0x03
    3996:	81 30       	cpi	r24, 0x01	; 1
    3998:	b9 f5       	brne	.+110    	; 0x3a08 <LCD_String_xy+0xb2>
    399a:	8c 81       	ldd	r24, Y+4	; 0x04
    399c:	80 31       	cpi	r24, 0x10	; 16
    399e:	a0 f5       	brcc	.+104    	; 0x3a08 <LCD_String_xy+0xb2>
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */
    39a0:	8c 81       	ldd	r24, Y+4	; 0x04
    39a2:	8f 70       	andi	r24, 0x0F	; 15
    39a4:	80 6c       	ori	r24, 0xC0	; 192
    39a6:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
    39aa:	2e c0       	rjmp	.+92     	; 0x3a08 <LCD_String_xy+0xb2>

	while (str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    39ac:	8a 81       	ldd	r24, Y+2	; 0x02
    39ae:	28 2f       	mov	r18, r24
    39b0:	30 e0       	ldi	r19, 0x00	; 0
    39b2:	8d 81       	ldd	r24, Y+5	; 0x05
    39b4:	9e 81       	ldd	r25, Y+6	; 0x06
    39b6:	fc 01       	movw	r30, r24
    39b8:	e2 0f       	add	r30, r18
    39ba:	f3 1f       	adc	r31, r19
    39bc:	80 81       	ld	r24, Z
    39be:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_displayCharacter>
		i++;
    39c2:	8a 81       	ldd	r24, Y+2	; 0x02
    39c4:	8f 5f       	subi	r24, 0xFF	; 255
    39c6:	8a 83       	std	Y+2, r24	; 0x02

		if (row == 0 && pos > 2 && i == 11)
    39c8:	8b 81       	ldd	r24, Y+3	; 0x03
    39ca:	88 23       	and	r24, r24
    39cc:	71 f4       	brne	.+28     	; 0x39ea <LCD_String_xy+0x94>
    39ce:	8c 81       	ldd	r24, Y+4	; 0x04
    39d0:	83 30       	cpi	r24, 0x03	; 3
    39d2:	58 f0       	brcs	.+22     	; 0x39ea <LCD_String_xy+0x94>
    39d4:	8a 81       	ldd	r24, Y+2	; 0x02
    39d6:	8b 30       	cpi	r24, 0x0B	; 11
    39d8:	41 f4       	brne	.+16     	; 0x39ea <LCD_String_xy+0x94>
		{
			LCD_GoToXY(1, 0);
    39da:	81 e0       	ldi	r24, 0x01	; 1
    39dc:	60 e0       	ldi	r22, 0x00	; 0
    39de:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <LCD_GoToXY>
			c++;
    39e2:	89 81       	ldd	r24, Y+1	; 0x01
    39e4:	8f 5f       	subi	r24, 0xFF	; 255
    39e6:	89 83       	std	Y+1, r24	; 0x01
    39e8:	0b c0       	rjmp	.+22     	; 0x3a00 <LCD_String_xy+0xaa>
		}

		else if (row == 1 && pos > 2 && i == 11)
    39ea:	8b 81       	ldd	r24, Y+3	; 0x03
    39ec:	81 30       	cpi	r24, 0x01	; 1
    39ee:	41 f4       	brne	.+16     	; 0x3a00 <LCD_String_xy+0xaa>
    39f0:	8c 81       	ldd	r24, Y+4	; 0x04
    39f2:	83 30       	cpi	r24, 0x03	; 3
    39f4:	28 f0       	brcs	.+10     	; 0x3a00 <LCD_String_xy+0xaa>
    39f6:	8a 81       	ldd	r24, Y+2	; 0x02
    39f8:	8b 30       	cpi	r24, 0x0B	; 11
    39fa:	11 f4       	brne	.+4      	; 0x3a00 <LCD_String_xy+0xaa>
		{
			LCD_ClearScreen();
    39fc:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <LCD_ClearScreen>
		}

		*count = c;
    3a00:	ef 81       	ldd	r30, Y+7	; 0x07
    3a02:	f8 85       	ldd	r31, Y+8	; 0x08
    3a04:	89 81       	ldd	r24, Y+1	; 0x01
    3a06:	80 83       	st	Z, r24
	if (row == 0 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0x80); /* Command of first row and required position<16 */
	else if (row == 1 && pos < 16)
		LCD_sendCommand((pos & 0x0F) | 0xC0); /* Command of first row and required position<16 */

	while (str[i] != '\0')
    3a08:	8a 81       	ldd	r24, Y+2	; 0x02
    3a0a:	28 2f       	mov	r18, r24
    3a0c:	30 e0       	ldi	r19, 0x00	; 0
    3a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a10:	9e 81       	ldd	r25, Y+6	; 0x06
    3a12:	fc 01       	movw	r30, r24
    3a14:	e2 0f       	add	r30, r18
    3a16:	f3 1f       	adc	r31, r19
    3a18:	80 81       	ld	r24, Z
    3a1a:	88 23       	and	r24, r24
    3a1c:	39 f6       	brne	.-114    	; 0x39ac <LCD_String_xy+0x56>
			LCD_ClearScreen();
		}

		*count = c;
	}
}
    3a1e:	28 96       	adiw	r28, 0x08	; 8
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	cf 91       	pop	r28
    3a2c:	df 91       	pop	r29
    3a2e:	08 95       	ret

00003a30 <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    3a30:	df 93       	push	r29
    3a32:	cf 93       	push	r28
    3a34:	cd b7       	in	r28, 0x3d	; 61
    3a36:	de b7       	in	r29, 0x3e	; 62
    3a38:	2e 97       	sbiw	r28, 0x0e	; 14
    3a3a:	0f b6       	in	r0, 0x3f	; 63
    3a3c:	f8 94       	cli
    3a3e:	de bf       	out	0x3e, r29	; 62
    3a40:	0f be       	out	0x3f, r0	; 63
    3a42:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(0x01);
    3a44:	81 e0       	ldi	r24, 0x01	; 1
    3a46:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	a0 e0       	ldi	r26, 0x00	; 0
    3a50:	b0 e4       	ldi	r27, 0x40	; 64
    3a52:	8b 87       	std	Y+11, r24	; 0x0b
    3a54:	9c 87       	std	Y+12, r25	; 0x0c
    3a56:	ad 87       	std	Y+13, r26	; 0x0d
    3a58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	30 e0       	ldi	r19, 0x00	; 0
    3a66:	4a e7       	ldi	r20, 0x7A	; 122
    3a68:	55 e4       	ldi	r21, 0x45	; 69
    3a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a6e:	dc 01       	movw	r26, r24
    3a70:	cb 01       	movw	r24, r22
    3a72:	8f 83       	std	Y+7, r24	; 0x07
    3a74:	98 87       	std	Y+8, r25	; 0x08
    3a76:	a9 87       	std	Y+9, r26	; 0x09
    3a78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a7c:	78 85       	ldd	r23, Y+8	; 0x08
    3a7e:	89 85       	ldd	r24, Y+9	; 0x09
    3a80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	40 e8       	ldi	r20, 0x80	; 128
    3a88:	5f e3       	ldi	r21, 0x3F	; 63
    3a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a8e:	88 23       	and	r24, r24
    3a90:	2c f4       	brge	.+10     	; 0x3a9c <LCD_ClearScreen+0x6c>
		__ticks = 1;
    3a92:	81 e0       	ldi	r24, 0x01	; 1
    3a94:	90 e0       	ldi	r25, 0x00	; 0
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	3f c0       	rjmp	.+126    	; 0x3b1a <LCD_ClearScreen+0xea>
	else if (__tmp > 65535)
    3a9c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a9e:	78 85       	ldd	r23, Y+8	; 0x08
    3aa0:	89 85       	ldd	r24, Y+9	; 0x09
    3aa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aa4:	20 e0       	ldi	r18, 0x00	; 0
    3aa6:	3f ef       	ldi	r19, 0xFF	; 255
    3aa8:	4f e7       	ldi	r20, 0x7F	; 127
    3aaa:	57 e4       	ldi	r21, 0x47	; 71
    3aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ab0:	18 16       	cp	r1, r24
    3ab2:	4c f5       	brge	.+82     	; 0x3b06 <LCD_ClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3abc:	20 e0       	ldi	r18, 0x00	; 0
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	40 e2       	ldi	r20, 0x20	; 32
    3ac2:	51 e4       	ldi	r21, 0x41	; 65
    3ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	bc 01       	movw	r22, r24
    3ace:	cd 01       	movw	r24, r26
    3ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad4:	dc 01       	movw	r26, r24
    3ad6:	cb 01       	movw	r24, r22
    3ad8:	9e 83       	std	Y+6, r25	; 0x06
    3ada:	8d 83       	std	Y+5, r24	; 0x05
    3adc:	0f c0       	rjmp	.+30     	; 0x3afc <LCD_ClearScreen+0xcc>
    3ade:	80 e9       	ldi	r24, 0x90	; 144
    3ae0:	91 e0       	ldi	r25, 0x01	; 1
    3ae2:	9c 83       	std	Y+4, r25	; 0x04
    3ae4:	8b 83       	std	Y+3, r24	; 0x03
    3ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aea:	01 97       	sbiw	r24, 0x01	; 1
    3aec:	f1 f7       	brne	.-4      	; 0x3aea <LCD_ClearScreen+0xba>
    3aee:	9c 83       	std	Y+4, r25	; 0x04
    3af0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3af2:	8d 81       	ldd	r24, Y+5	; 0x05
    3af4:	9e 81       	ldd	r25, Y+6	; 0x06
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	9e 83       	std	Y+6, r25	; 0x06
    3afa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3afc:	8d 81       	ldd	r24, Y+5	; 0x05
    3afe:	9e 81       	ldd	r25, Y+6	; 0x06
    3b00:	00 97       	sbiw	r24, 0x00	; 0
    3b02:	69 f7       	brne	.-38     	; 0x3ade <LCD_ClearScreen+0xae>
    3b04:	14 c0       	rjmp	.+40     	; 0x3b2e <LCD_ClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b06:	6f 81       	ldd	r22, Y+7	; 0x07
    3b08:	78 85       	ldd	r23, Y+8	; 0x08
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    3b0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b12:	dc 01       	movw	r26, r24
    3b14:	cb 01       	movw	r24, r22
    3b16:	9e 83       	std	Y+6, r25	; 0x06
    3b18:	8d 83       	std	Y+5, r24	; 0x05
    3b1a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b1c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b1e:	9a 83       	std	Y+2, r25	; 0x02
    3b20:	89 83       	std	Y+1, r24	; 0x01
    3b22:	89 81       	ldd	r24, Y+1	; 0x01
    3b24:	9a 81       	ldd	r25, Y+2	; 0x02
    3b26:	01 97       	sbiw	r24, 0x01	; 1
    3b28:	f1 f7       	brne	.-4      	; 0x3b26 <LCD_ClearScreen+0xf6>
    3b2a:	9a 83       	std	Y+2, r25	; 0x02
    3b2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3b2e:	2e 96       	adiw	r28, 0x0e	; 14
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	f8 94       	cli
    3b34:	de bf       	out	0x3e, r29	; 62
    3b36:	0f be       	out	0x3f, r0	; 63
    3b38:	cd bf       	out	0x3d, r28	; 61
    3b3a:	cf 91       	pop	r28
    3b3c:	df 91       	pop	r29
    3b3e:	08 95       	ret

00003b40 <LCD_ShiftingLeft>:

void LCD_ShiftingLeft(void)
{
    3b40:	df 93       	push	r29
    3b42:	cf 93       	push	r28
    3b44:	cd b7       	in	r28, 0x3d	; 61
    3b46:	de b7       	in	r29, 0x3e	; 62
    3b48:	2e 97       	sbiw	r28, 0x0e	; 14
    3b4a:	0f b6       	in	r0, 0x3f	; 63
    3b4c:	f8 94       	cli
    3b4e:	de bf       	out	0x3e, r29	; 62
    3b50:	0f be       	out	0x3f, r0	; 63
    3b52:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftLeft);
    3b54:	88 e1       	ldi	r24, 0x18	; 24
    3b56:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	a0 ea       	ldi	r26, 0xA0	; 160
    3b60:	b1 e4       	ldi	r27, 0x41	; 65
    3b62:	8b 87       	std	Y+11, r24	; 0x0b
    3b64:	9c 87       	std	Y+12, r25	; 0x0c
    3b66:	ad 87       	std	Y+13, r26	; 0x0d
    3b68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b70:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	4a e7       	ldi	r20, 0x7A	; 122
    3b78:	55 e4       	ldi	r21, 0x45	; 69
    3b7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b7e:	dc 01       	movw	r26, r24
    3b80:	cb 01       	movw	r24, r22
    3b82:	8f 83       	std	Y+7, r24	; 0x07
    3b84:	98 87       	std	Y+8, r25	; 0x08
    3b86:	a9 87       	std	Y+9, r26	; 0x09
    3b88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8c:	78 85       	ldd	r23, Y+8	; 0x08
    3b8e:	89 85       	ldd	r24, Y+9	; 0x09
    3b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	40 e8       	ldi	r20, 0x80	; 128
    3b98:	5f e3       	ldi	r21, 0x3F	; 63
    3b9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b9e:	88 23       	and	r24, r24
    3ba0:	2c f4       	brge	.+10     	; 0x3bac <LCD_ShiftingLeft+0x6c>
		__ticks = 1;
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	90 e0       	ldi	r25, 0x00	; 0
    3ba6:	9e 83       	std	Y+6, r25	; 0x06
    3ba8:	8d 83       	std	Y+5, r24	; 0x05
    3baa:	3f c0       	rjmp	.+126    	; 0x3c2a <LCD_ShiftingLeft+0xea>
	else if (__tmp > 65535)
    3bac:	6f 81       	ldd	r22, Y+7	; 0x07
    3bae:	78 85       	ldd	r23, Y+8	; 0x08
    3bb0:	89 85       	ldd	r24, Y+9	; 0x09
    3bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb4:	20 e0       	ldi	r18, 0x00	; 0
    3bb6:	3f ef       	ldi	r19, 0xFF	; 255
    3bb8:	4f e7       	ldi	r20, 0x7F	; 127
    3bba:	57 e4       	ldi	r21, 0x47	; 71
    3bbc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bc0:	18 16       	cp	r1, r24
    3bc2:	4c f5       	brge	.+82     	; 0x3c16 <LCD_ShiftingLeft+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bca:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bcc:	20 e0       	ldi	r18, 0x00	; 0
    3bce:	30 e0       	ldi	r19, 0x00	; 0
    3bd0:	40 e2       	ldi	r20, 0x20	; 32
    3bd2:	51 e4       	ldi	r21, 0x41	; 65
    3bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd8:	dc 01       	movw	r26, r24
    3bda:	cb 01       	movw	r24, r22
    3bdc:	bc 01       	movw	r22, r24
    3bde:	cd 01       	movw	r24, r26
    3be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be4:	dc 01       	movw	r26, r24
    3be6:	cb 01       	movw	r24, r22
    3be8:	9e 83       	std	Y+6, r25	; 0x06
    3bea:	8d 83       	std	Y+5, r24	; 0x05
    3bec:	0f c0       	rjmp	.+30     	; 0x3c0c <LCD_ShiftingLeft+0xcc>
    3bee:	80 e9       	ldi	r24, 0x90	; 144
    3bf0:	91 e0       	ldi	r25, 0x01	; 1
    3bf2:	9c 83       	std	Y+4, r25	; 0x04
    3bf4:	8b 83       	std	Y+3, r24	; 0x03
    3bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    3bfa:	01 97       	sbiw	r24, 0x01	; 1
    3bfc:	f1 f7       	brne	.-4      	; 0x3bfa <LCD_ShiftingLeft+0xba>
    3bfe:	9c 83       	std	Y+4, r25	; 0x04
    3c00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c02:	8d 81       	ldd	r24, Y+5	; 0x05
    3c04:	9e 81       	ldd	r25, Y+6	; 0x06
    3c06:	01 97       	sbiw	r24, 0x01	; 1
    3c08:	9e 83       	std	Y+6, r25	; 0x06
    3c0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c10:	00 97       	sbiw	r24, 0x00	; 0
    3c12:	69 f7       	brne	.-38     	; 0x3bee <LCD_ShiftingLeft+0xae>
    3c14:	14 c0       	rjmp	.+40     	; 0x3c3e <LCD_ShiftingLeft+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c16:	6f 81       	ldd	r22, Y+7	; 0x07
    3c18:	78 85       	ldd	r23, Y+8	; 0x08
    3c1a:	89 85       	ldd	r24, Y+9	; 0x09
    3c1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	9e 83       	std	Y+6, r25	; 0x06
    3c28:	8d 83       	std	Y+5, r24	; 0x05
    3c2a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c2c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c2e:	9a 83       	std	Y+2, r25	; 0x02
    3c30:	89 83       	std	Y+1, r24	; 0x01
    3c32:	89 81       	ldd	r24, Y+1	; 0x01
    3c34:	9a 81       	ldd	r25, Y+2	; 0x02
    3c36:	01 97       	sbiw	r24, 0x01	; 1
    3c38:	f1 f7       	brne	.-4      	; 0x3c36 <LCD_ShiftingLeft+0xf6>
    3c3a:	9a 83       	std	Y+2, r25	; 0x02
    3c3c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3c3e:	2e 96       	adiw	r28, 0x0e	; 14
    3c40:	0f b6       	in	r0, 0x3f	; 63
    3c42:	f8 94       	cli
    3c44:	de bf       	out	0x3e, r29	; 62
    3c46:	0f be       	out	0x3f, r0	; 63
    3c48:	cd bf       	out	0x3d, r28	; 61
    3c4a:	cf 91       	pop	r28
    3c4c:	df 91       	pop	r29
    3c4e:	08 95       	ret

00003c50 <LCD_ShiftingRight>:

void LCD_ShiftingRight(void)
{
    3c50:	df 93       	push	r29
    3c52:	cf 93       	push	r28
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	2e 97       	sbiw	r28, 0x0e	; 14
    3c5a:	0f b6       	in	r0, 0x3f	; 63
    3c5c:	f8 94       	cli
    3c5e:	de bf       	out	0x3e, r29	; 62
    3c60:	0f be       	out	0x3f, r0	; 63
    3c62:	cd bf       	out	0x3d, r28	; 61
	LCD_sendCommand(LCD_ShiftRight);
    3c64:	8c e1       	ldi	r24, 0x1C	; 28
    3c66:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	a0 ea       	ldi	r26, 0xA0	; 160
    3c70:	b1 e4       	ldi	r27, 0x41	; 65
    3c72:	8b 87       	std	Y+11, r24	; 0x0b
    3c74:	9c 87       	std	Y+12, r25	; 0x0c
    3c76:	ad 87       	std	Y+13, r26	; 0x0d
    3c78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	30 e0       	ldi	r19, 0x00	; 0
    3c86:	4a e7       	ldi	r20, 0x7A	; 122
    3c88:	55 e4       	ldi	r21, 0x45	; 69
    3c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8e:	dc 01       	movw	r26, r24
    3c90:	cb 01       	movw	r24, r22
    3c92:	8f 83       	std	Y+7, r24	; 0x07
    3c94:	98 87       	std	Y+8, r25	; 0x08
    3c96:	a9 87       	std	Y+9, r26	; 0x09
    3c98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c9c:	78 85       	ldd	r23, Y+8	; 0x08
    3c9e:	89 85       	ldd	r24, Y+9	; 0x09
    3ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca2:	20 e0       	ldi	r18, 0x00	; 0
    3ca4:	30 e0       	ldi	r19, 0x00	; 0
    3ca6:	40 e8       	ldi	r20, 0x80	; 128
    3ca8:	5f e3       	ldi	r21, 0x3F	; 63
    3caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cae:	88 23       	and	r24, r24
    3cb0:	2c f4       	brge	.+10     	; 0x3cbc <LCD_ShiftingRight+0x6c>
		__ticks = 1;
    3cb2:	81 e0       	ldi	r24, 0x01	; 1
    3cb4:	90 e0       	ldi	r25, 0x00	; 0
    3cb6:	9e 83       	std	Y+6, r25	; 0x06
    3cb8:	8d 83       	std	Y+5, r24	; 0x05
    3cba:	3f c0       	rjmp	.+126    	; 0x3d3a <LCD_ShiftingRight+0xea>
	else if (__tmp > 65535)
    3cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    3cbe:	78 85       	ldd	r23, Y+8	; 0x08
    3cc0:	89 85       	ldd	r24, Y+9	; 0x09
    3cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	3f ef       	ldi	r19, 0xFF	; 255
    3cc8:	4f e7       	ldi	r20, 0x7F	; 127
    3cca:	57 e4       	ldi	r21, 0x47	; 71
    3ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cd0:	18 16       	cp	r1, r24
    3cd2:	4c f5       	brge	.+82     	; 0x3d26 <LCD_ShiftingRight+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	40 e2       	ldi	r20, 0x20	; 32
    3ce2:	51 e4       	ldi	r21, 0x41	; 65
    3ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	bc 01       	movw	r22, r24
    3cee:	cd 01       	movw	r24, r26
    3cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	cb 01       	movw	r24, r22
    3cf8:	9e 83       	std	Y+6, r25	; 0x06
    3cfa:	8d 83       	std	Y+5, r24	; 0x05
    3cfc:	0f c0       	rjmp	.+30     	; 0x3d1c <LCD_ShiftingRight+0xcc>
    3cfe:	80 e9       	ldi	r24, 0x90	; 144
    3d00:	91 e0       	ldi	r25, 0x01	; 1
    3d02:	9c 83       	std	Y+4, r25	; 0x04
    3d04:	8b 83       	std	Y+3, r24	; 0x03
    3d06:	8b 81       	ldd	r24, Y+3	; 0x03
    3d08:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	f1 f7       	brne	.-4      	; 0x3d0a <LCD_ShiftingRight+0xba>
    3d0e:	9c 83       	std	Y+4, r25	; 0x04
    3d10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d12:	8d 81       	ldd	r24, Y+5	; 0x05
    3d14:	9e 81       	ldd	r25, Y+6	; 0x06
    3d16:	01 97       	sbiw	r24, 0x01	; 1
    3d18:	9e 83       	std	Y+6, r25	; 0x06
    3d1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3d20:	00 97       	sbiw	r24, 0x00	; 0
    3d22:	69 f7       	brne	.-38     	; 0x3cfe <LCD_ShiftingRight+0xae>
    3d24:	14 c0       	rjmp	.+40     	; 0x3d4e <LCD_ShiftingRight+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d26:	6f 81       	ldd	r22, Y+7	; 0x07
    3d28:	78 85       	ldd	r23, Y+8	; 0x08
    3d2a:	89 85       	ldd	r24, Y+9	; 0x09
    3d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d32:	dc 01       	movw	r26, r24
    3d34:	cb 01       	movw	r24, r22
    3d36:	9e 83       	std	Y+6, r25	; 0x06
    3d38:	8d 83       	std	Y+5, r24	; 0x05
    3d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3d3e:	9a 83       	std	Y+2, r25	; 0x02
    3d40:	89 83       	std	Y+1, r24	; 0x01
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	9a 81       	ldd	r25, Y+2	; 0x02
    3d46:	01 97       	sbiw	r24, 0x01	; 1
    3d48:	f1 f7       	brne	.-4      	; 0x3d46 <LCD_ShiftingRight+0xf6>
    3d4a:	9a 83       	std	Y+2, r25	; 0x02
    3d4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
}
    3d4e:	2e 96       	adiw	r28, 0x0e	; 14
    3d50:	0f b6       	in	r0, 0x3f	; 63
    3d52:	f8 94       	cli
    3d54:	de bf       	out	0x3e, r29	; 62
    3d56:	0f be       	out	0x3f, r0	; 63
    3d58:	cd bf       	out	0x3d, r28	; 61
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	08 95       	ret

00003d60 <LCD_WriteSpecialChar>:

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
    3d60:	0f 93       	push	r16
    3d62:	df 93       	push	r29
    3d64:	cf 93       	push	r28
    3d66:	cd b7       	in	r28, 0x3d	; 61
    3d68:	de b7       	in	r29, 0x3e	; 62
    3d6a:	28 97       	sbiw	r28, 0x08	; 8
    3d6c:	0f b6       	in	r0, 0x3f	; 63
    3d6e:	f8 94       	cli
    3d70:	de bf       	out	0x3e, r29	; 62
    3d72:	0f be       	out	0x3f, r0	; 63
    3d74:	cd bf       	out	0x3d, r28	; 61
    3d76:	8b 83       	std	Y+3, r24	; 0x03
    3d78:	7d 83       	std	Y+5, r23	; 0x05
    3d7a:	6c 83       	std	Y+4, r22	; 0x04
    3d7c:	4e 83       	std	Y+6, r20	; 0x06
    3d7e:	2f 83       	std	Y+7, r18	; 0x07
    3d80:	08 87       	std	Y+8, r16	; 0x08
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
    3d82:	88 85       	ldd	r24, Y+8	; 0x08
    3d84:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_sendCommand>
	for (int i = 0; i < 8; i++)
    3d88:	1a 82       	std	Y+2, r1	; 0x02
    3d8a:	19 82       	std	Y+1, r1	; 0x01
    3d8c:	0f c0       	rjmp	.+30     	; 0x3dac <LCD_WriteSpecialChar+0x4c>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
    3d8e:	29 81       	ldd	r18, Y+1	; 0x01
    3d90:	3a 81       	ldd	r19, Y+2	; 0x02
    3d92:	8c 81       	ldd	r24, Y+4	; 0x04
    3d94:	9d 81       	ldd	r25, Y+5	; 0x05
    3d96:	fc 01       	movw	r30, r24
    3d98:	e2 0f       	add	r30, r18
    3d9a:	f3 1f       	adc	r31, r19
    3d9c:	80 81       	ld	r24, Z
    3d9e:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_displayCharacter>
}

void LCD_WriteSpecialChar(u8 Copy_CharNum, u8 *Copy_u8P_Ptr, u8 Copy_u8LineNum, u8 Copy_u8Location, u8 Copy_u8SpecialCharStartBit)
{
	LCD_sendCommand(Copy_u8SpecialCharStartBit);
	for (int i = 0; i < 8; i++)
    3da2:	89 81       	ldd	r24, Y+1	; 0x01
    3da4:	9a 81       	ldd	r25, Y+2	; 0x02
    3da6:	01 96       	adiw	r24, 0x01	; 1
    3da8:	9a 83       	std	Y+2, r25	; 0x02
    3daa:	89 83       	std	Y+1, r24	; 0x01
    3dac:	89 81       	ldd	r24, Y+1	; 0x01
    3dae:	9a 81       	ldd	r25, Y+2	; 0x02
    3db0:	88 30       	cpi	r24, 0x08	; 8
    3db2:	91 05       	cpc	r25, r1
    3db4:	64 f3       	brlt	.-40     	; 0x3d8e <LCD_WriteSpecialChar+0x2e>
	{
		LCD_displayCharacter(Copy_u8P_Ptr[i]);
	}
	LCD_GoToXY(Copy_u8LineNum, Copy_u8Location);
    3db6:	8e 81       	ldd	r24, Y+6	; 0x06
    3db8:	6f 81       	ldd	r22, Y+7	; 0x07
    3dba:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <LCD_GoToXY>
	LCD_displayCharacter(Copy_CharNum);
    3dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3dc0:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_displayCharacter>

	if (Copy_u8Location > 15)
    3dc4:	8f 81       	ldd	r24, Y+7	; 0x07
    3dc6:	80 31       	cpi	r24, 0x10	; 16
    3dc8:	48 f0       	brcs	.+18     	; 0x3ddc <LCD_WriteSpecialChar+0x7c>
	{
		LCD_ClearScreen();
    3dca:	0e 94 18 1d 	call	0x3a30	; 0x3a30 <LCD_ClearScreen>
		LCD_GoToXY(0, 0);
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <LCD_GoToXY>
		LCD_displayCharacter(Copy_CharNum);
    3dd6:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd8:	0e 94 5d 19 	call	0x32ba	; 0x32ba <LCD_displayCharacter>
	}
}
    3ddc:	28 96       	adiw	r28, 0x08	; 8
    3dde:	0f b6       	in	r0, 0x3f	; 63
    3de0:	f8 94       	cli
    3de2:	de bf       	out	0x3e, r29	; 62
    3de4:	0f be       	out	0x3f, r0	; 63
    3de6:	cd bf       	out	0x3d, r28	; 61
    3de8:	cf 91       	pop	r28
    3dea:	df 91       	pop	r29
    3dec:	0f 91       	pop	r16
    3dee:	08 95       	ret

00003df0 <KPD_u8_GetKey>:
u8 KPD_u8_ColsPins[4]={KPD_u8_C1_PIN,KPD_u8_C2_PIN,KPD_u8_C3_PIN,KPD_u8_C4_PIN};
const u8 KPD_u8_Keys[4][4] = KEY_KEYS;


u8 KPD_u8_GetKey(u8 *Copy_pu8_ReturnKey)
{
    3df0:	df 93       	push	r29
    3df2:	cf 93       	push	r28
    3df4:	cd b7       	in	r28, 0x3d	; 61
    3df6:	de b7       	in	r29, 0x3e	; 62
    3df8:	65 97       	sbiw	r28, 0x15	; 21
    3dfa:	0f b6       	in	r0, 0x3f	; 63
    3dfc:	f8 94       	cli
    3dfe:	de bf       	out	0x3e, r29	; 62
    3e00:	0f be       	out	0x3f, r0	; 63
    3e02:	cd bf       	out	0x3d, r28	; 61
    3e04:	9c 8b       	std	Y+20, r25	; 0x14
    3e06:	8b 8b       	std	Y+19, r24	; 0x13
    u8 Local_u8_RowCounter, Local_u8_ColCounter, Local_u8_PinVal, Local_u8_Flag = 0;
    3e08:	1f 86       	std	Y+15, r1	; 0x0f
    *Copy_pu8_ReturnKey = KPD_U8_UNPRESED;
    3e0a:	eb 89       	ldd	r30, Y+19	; 0x13
    3e0c:	fc 89       	ldd	r31, Y+20	; 0x14
    3e0e:	8f ef       	ldi	r24, 0xFF	; 255
    3e10:	80 83       	st	Z, r24

    if (Copy_pu8_ReturnKey != NULL)
    3e12:	8b 89       	ldd	r24, Y+19	; 0x13
    3e14:	9c 89       	ldd	r25, Y+20	; 0x14
    3e16:	00 97       	sbiw	r24, 0x00	; 0
    3e18:	09 f4       	brne	.+2      	; 0x3e1c <KPD_u8_GetKey+0x2c>
    3e1a:	ee c0       	rjmp	.+476    	; 0x3ff8 <KPD_u8_GetKey+0x208>
    {
        for (Local_u8_RowCounter = 0; Local_u8_RowCounter <= 3; Local_u8_RowCounter++)
    3e1c:	19 8a       	std	Y+17, r1	; 0x11
    3e1e:	e5 c0       	rjmp	.+458    	; 0x3fea <KPD_u8_GetKey+0x1fa>
        {
        	DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[Local_u8_RowCounter], DIO_u8_LOW);
    3e20:	89 89       	ldd	r24, Y+17	; 0x11
    3e22:	88 2f       	mov	r24, r24
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	fc 01       	movw	r30, r24
    3e28:	e1 59       	subi	r30, 0x91	; 145
    3e2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e2c:	90 81       	ld	r25, Z
    3e2e:	80 e0       	ldi	r24, 0x00	; 0
    3e30:	69 2f       	mov	r22, r25
    3e32:	40 e0       	ldi	r20, 0x00	; 0
    3e34:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>

            for (Local_u8_ColCounter = 0; Local_u8_ColCounter <= 3; Local_u8_ColCounter++)
    3e38:	18 8a       	std	Y+16, r1	; 0x10
    3e3a:	c1 c0       	rjmp	.+386    	; 0x3fbe <KPD_u8_GetKey+0x1ce>
            {
            	DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);
    3e3c:	88 89       	ldd	r24, Y+16	; 0x10
    3e3e:	88 2f       	mov	r24, r24
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	fc 01       	movw	r30, r24
    3e44:	ed 58       	subi	r30, 0x8D	; 141
    3e46:	ff 4f       	sbci	r31, 0xFF	; 255
    3e48:	90 81       	ld	r25, Z
    3e4a:	9e 01       	movw	r18, r28
    3e4c:	2e 5e       	subi	r18, 0xEE	; 238
    3e4e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e50:	80 e0       	ldi	r24, 0x00	; 0
    3e52:	69 2f       	mov	r22, r25
    3e54:	a9 01       	movw	r20, r18
    3e56:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_u8GetPinValue>

                if (Local_u8_PinVal == DIO_u8_LOW)
    3e5a:	8a 89       	ldd	r24, Y+18	; 0x12
    3e5c:	88 23       	and	r24, r24
    3e5e:	09 f0       	breq	.+2      	; 0x3e62 <KPD_u8_GetKey+0x72>
    3e60:	ab c0       	rjmp	.+342    	; 0x3fb8 <KPD_u8_GetKey+0x1c8>
    3e62:	80 e0       	ldi	r24, 0x00	; 0
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	a0 ea       	ldi	r26, 0xA0	; 160
    3e68:	b1 e4       	ldi	r27, 0x41	; 65
    3e6a:	8b 87       	std	Y+11, r24	; 0x0b
    3e6c:	9c 87       	std	Y+12, r25	; 0x0c
    3e6e:	ad 87       	std	Y+13, r26	; 0x0d
    3e70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	4a e7       	ldi	r20, 0x7A	; 122
    3e80:	55 e4       	ldi	r21, 0x45	; 69
    3e82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e86:	dc 01       	movw	r26, r24
    3e88:	cb 01       	movw	r24, r22
    3e8a:	8f 83       	std	Y+7, r24	; 0x07
    3e8c:	98 87       	std	Y+8, r25	; 0x08
    3e8e:	a9 87       	std	Y+9, r26	; 0x09
    3e90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e92:	6f 81       	ldd	r22, Y+7	; 0x07
    3e94:	78 85       	ldd	r23, Y+8	; 0x08
    3e96:	89 85       	ldd	r24, Y+9	; 0x09
    3e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e9a:	20 e0       	ldi	r18, 0x00	; 0
    3e9c:	30 e0       	ldi	r19, 0x00	; 0
    3e9e:	40 e8       	ldi	r20, 0x80	; 128
    3ea0:	5f e3       	ldi	r21, 0x3F	; 63
    3ea2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ea6:	88 23       	and	r24, r24
    3ea8:	2c f4       	brge	.+10     	; 0x3eb4 <KPD_u8_GetKey+0xc4>
		__ticks = 1;
    3eaa:	81 e0       	ldi	r24, 0x01	; 1
    3eac:	90 e0       	ldi	r25, 0x00	; 0
    3eae:	9e 83       	std	Y+6, r25	; 0x06
    3eb0:	8d 83       	std	Y+5, r24	; 0x05
    3eb2:	3f c0       	rjmp	.+126    	; 0x3f32 <KPD_u8_GetKey+0x142>
	else if (__tmp > 65535)
    3eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    3eb6:	78 85       	ldd	r23, Y+8	; 0x08
    3eb8:	89 85       	ldd	r24, Y+9	; 0x09
    3eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ebc:	20 e0       	ldi	r18, 0x00	; 0
    3ebe:	3f ef       	ldi	r19, 0xFF	; 255
    3ec0:	4f e7       	ldi	r20, 0x7F	; 127
    3ec2:	57 e4       	ldi	r21, 0x47	; 71
    3ec4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ec8:	18 16       	cp	r1, r24
    3eca:	4c f5       	brge	.+82     	; 0x3f1e <KPD_u8_GetKey+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ecc:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ece:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ed0:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ed2:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ed4:	20 e0       	ldi	r18, 0x00	; 0
    3ed6:	30 e0       	ldi	r19, 0x00	; 0
    3ed8:	40 e2       	ldi	r20, 0x20	; 32
    3eda:	51 e4       	ldi	r21, 0x41	; 65
    3edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee0:	dc 01       	movw	r26, r24
    3ee2:	cb 01       	movw	r24, r22
    3ee4:	bc 01       	movw	r22, r24
    3ee6:	cd 01       	movw	r24, r26
    3ee8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	9e 83       	std	Y+6, r25	; 0x06
    3ef2:	8d 83       	std	Y+5, r24	; 0x05
    3ef4:	0f c0       	rjmp	.+30     	; 0x3f14 <KPD_u8_GetKey+0x124>
    3ef6:	80 e9       	ldi	r24, 0x90	; 144
    3ef8:	91 e0       	ldi	r25, 0x01	; 1
    3efa:	9c 83       	std	Y+4, r25	; 0x04
    3efc:	8b 83       	std	Y+3, r24	; 0x03
    3efe:	8b 81       	ldd	r24, Y+3	; 0x03
    3f00:	9c 81       	ldd	r25, Y+4	; 0x04
    3f02:	01 97       	sbiw	r24, 0x01	; 1
    3f04:	f1 f7       	brne	.-4      	; 0x3f02 <KPD_u8_GetKey+0x112>
    3f06:	9c 83       	std	Y+4, r25	; 0x04
    3f08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f0a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f0c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f0e:	01 97       	sbiw	r24, 0x01	; 1
    3f10:	9e 83       	std	Y+6, r25	; 0x06
    3f12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f14:	8d 81       	ldd	r24, Y+5	; 0x05
    3f16:	9e 81       	ldd	r25, Y+6	; 0x06
    3f18:	00 97       	sbiw	r24, 0x00	; 0
    3f1a:	69 f7       	brne	.-38     	; 0x3ef6 <KPD_u8_GetKey+0x106>
    3f1c:	14 c0       	rjmp	.+40     	; 0x3f46 <KPD_u8_GetKey+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f1e:	6f 81       	ldd	r22, Y+7	; 0x07
    3f20:	78 85       	ldd	r23, Y+8	; 0x08
    3f22:	89 85       	ldd	r24, Y+9	; 0x09
    3f24:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	9e 83       	std	Y+6, r25	; 0x06
    3f30:	8d 83       	std	Y+5, r24	; 0x05
    3f32:	8d 81       	ldd	r24, Y+5	; 0x05
    3f34:	9e 81       	ldd	r25, Y+6	; 0x06
    3f36:	9a 83       	std	Y+2, r25	; 0x02
    3f38:	89 83       	std	Y+1, r24	; 0x01
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	9a 81       	ldd	r25, Y+2	; 0x02
    3f3e:	01 97       	sbiw	r24, 0x01	; 1
    3f40:	f1 f7       	brne	.-4      	; 0x3f3e <KPD_u8_GetKey+0x14e>
    3f42:	9a 83       	std	Y+2, r25	; 0x02
    3f44:	89 83       	std	Y+1, r24	; 0x01
                {
                    _delay_ms(20);
                    DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);
    3f46:	88 89       	ldd	r24, Y+16	; 0x10
    3f48:	88 2f       	mov	r24, r24
    3f4a:	90 e0       	ldi	r25, 0x00	; 0
    3f4c:	fc 01       	movw	r30, r24
    3f4e:	ed 58       	subi	r30, 0x8D	; 141
    3f50:	ff 4f       	sbci	r31, 0xFF	; 255
    3f52:	90 81       	ld	r25, Z
    3f54:	9e 01       	movw	r18, r28
    3f56:	2e 5e       	subi	r18, 0xEE	; 238
    3f58:	3f 4f       	sbci	r19, 0xFF	; 255
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	69 2f       	mov	r22, r25
    3f5e:	a9 01       	movw	r20, r18
    3f60:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_u8GetPinValue>
    3f64:	0f c0       	rjmp	.+30     	; 0x3f84 <KPD_u8_GetKey+0x194>

                    while (Local_u8_PinVal == DIO_u8_LOW)
                    {
                    	DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);
    3f66:	88 89       	ldd	r24, Y+16	; 0x10
    3f68:	88 2f       	mov	r24, r24
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	fc 01       	movw	r30, r24
    3f6e:	ed 58       	subi	r30, 0x8D	; 141
    3f70:	ff 4f       	sbci	r31, 0xFF	; 255
    3f72:	90 81       	ld	r25, Z
    3f74:	9e 01       	movw	r18, r28
    3f76:	2e 5e       	subi	r18, 0xEE	; 238
    3f78:	3f 4f       	sbci	r19, 0xFF	; 255
    3f7a:	80 e0       	ldi	r24, 0x00	; 0
    3f7c:	69 2f       	mov	r22, r25
    3f7e:	a9 01       	movw	r20, r18
    3f80:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <DIO_u8GetPinValue>
                if (Local_u8_PinVal == DIO_u8_LOW)
                {
                    _delay_ms(20);
                    DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);

                    while (Local_u8_PinVal == DIO_u8_LOW)
    3f84:	8a 89       	ldd	r24, Y+18	; 0x12
    3f86:	88 23       	and	r24, r24
    3f88:	71 f3       	breq	.-36     	; 0x3f66 <KPD_u8_GetKey+0x176>
                    {
                    	DIO_u8GetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[Local_u8_ColCounter], &Local_u8_PinVal);
                    }

                    *Copy_pu8_ReturnKey = KPD_u8_Keys[Local_u8_RowCounter][Local_u8_ColCounter];
    3f8a:	89 89       	ldd	r24, Y+17	; 0x11
    3f8c:	48 2f       	mov	r20, r24
    3f8e:	50 e0       	ldi	r21, 0x00	; 0
    3f90:	88 89       	ldd	r24, Y+16	; 0x10
    3f92:	28 2f       	mov	r18, r24
    3f94:	30 e0       	ldi	r19, 0x00	; 0
    3f96:	ca 01       	movw	r24, r20
    3f98:	88 0f       	add	r24, r24
    3f9a:	99 1f       	adc	r25, r25
    3f9c:	88 0f       	add	r24, r24
    3f9e:	99 1f       	adc	r25, r25
    3fa0:	82 0f       	add	r24, r18
    3fa2:	93 1f       	adc	r25, r19
    3fa4:	fc 01       	movw	r30, r24
    3fa6:	e9 58       	subi	r30, 0x89	; 137
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	80 81       	ld	r24, Z
    3fac:	eb 89       	ldd	r30, Y+19	; 0x13
    3fae:	fc 89       	ldd	r31, Y+20	; 0x14
    3fb0:	80 83       	st	Z, r24
                    Local_u8_Flag = 1;
    3fb2:	81 e0       	ldi	r24, 0x01	; 1
    3fb4:	8f 87       	std	Y+15, r24	; 0x0f
    3fb6:	07 c0       	rjmp	.+14     	; 0x3fc6 <KPD_u8_GetKey+0x1d6>
    {
        for (Local_u8_RowCounter = 0; Local_u8_RowCounter <= 3; Local_u8_RowCounter++)
        {
        	DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[Local_u8_RowCounter], DIO_u8_LOW);

            for (Local_u8_ColCounter = 0; Local_u8_ColCounter <= 3; Local_u8_ColCounter++)
    3fb8:	88 89       	ldd	r24, Y+16	; 0x10
    3fba:	8f 5f       	subi	r24, 0xFF	; 255
    3fbc:	88 8b       	std	Y+16, r24	; 0x10
    3fbe:	88 89       	ldd	r24, Y+16	; 0x10
    3fc0:	84 30       	cpi	r24, 0x04	; 4
    3fc2:	08 f4       	brcc	.+2      	; 0x3fc6 <KPD_u8_GetKey+0x1d6>
    3fc4:	3b cf       	rjmp	.-394    	; 0x3e3c <KPD_u8_GetKey+0x4c>
                    Local_u8_Flag = 1;
                    break;
                }
            }

            DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[Local_u8_RowCounter], DIO_u8_HIGH);
    3fc6:	89 89       	ldd	r24, Y+17	; 0x11
    3fc8:	88 2f       	mov	r24, r24
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	fc 01       	movw	r30, r24
    3fce:	e1 59       	subi	r30, 0x91	; 145
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	90 81       	ld	r25, Z
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	69 2f       	mov	r22, r25
    3fd8:	41 e0       	ldi	r20, 0x01	; 1
    3fda:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>

            if (Local_u8_Flag)
    3fde:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fe0:	88 23       	and	r24, r24
    3fe2:	39 f4       	brne	.+14     	; 0x3ff2 <KPD_u8_GetKey+0x202>
    u8 Local_u8_RowCounter, Local_u8_ColCounter, Local_u8_PinVal, Local_u8_Flag = 0;
    *Copy_pu8_ReturnKey = KPD_U8_UNPRESED;

    if (Copy_pu8_ReturnKey != NULL)
    {
        for (Local_u8_RowCounter = 0; Local_u8_RowCounter <= 3; Local_u8_RowCounter++)
    3fe4:	89 89       	ldd	r24, Y+17	; 0x11
    3fe6:	8f 5f       	subi	r24, 0xFF	; 255
    3fe8:	89 8b       	std	Y+17, r24	; 0x11
    3fea:	89 89       	ldd	r24, Y+17	; 0x11
    3fec:	84 30       	cpi	r24, 0x04	; 4
    3fee:	08 f4       	brcc	.+2      	; 0x3ff2 <KPD_u8_GetKey+0x202>
    3ff0:	17 cf       	rjmp	.-466    	; 0x3e20 <KPD_u8_GetKey+0x30>
    else
    {
        return STD_TYPES_NOK;
    }

    return STD_TYPES_OK;
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	8d 8b       	std	Y+21, r24	; 0x15
    3ff6:	01 c0       	rjmp	.+2      	; 0x3ffa <KPD_u8_GetKey+0x20a>
            }
        }
    }
    else
    {
        return STD_TYPES_NOK;
    3ff8:	1d 8a       	std	Y+21, r1	; 0x15
    3ffa:	8d 89       	ldd	r24, Y+21	; 0x15
    }

    return STD_TYPES_OK;
}
    3ffc:	65 96       	adiw	r28, 0x15	; 21
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	de bf       	out	0x3e, r29	; 62
    4004:	0f be       	out	0x3f, r0	; 63
    4006:	cd bf       	out	0x3d, r28	; 61
    4008:	cf 91       	pop	r28
    400a:	df 91       	pop	r29
    400c:	08 95       	ret

0000400e <KeyPad_u8_Init>:



u8 KeyPad_u8_Init()
{
    400e:	df 93       	push	r29
    4010:	cf 93       	push	r28
    4012:	00 d0       	rcall	.+0      	; 0x4014 <KeyPad_u8_Init+0x6>
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
	for(int i = 0 ; i<=3 ; i++)
    4018:	1a 82       	std	Y+2, r1	; 0x02
    401a:	19 82       	std	Y+1, r1	; 0x01
    401c:	31 c0       	rjmp	.+98     	; 0x4080 <KeyPad_u8_Init+0x72>
	{
		// Set columns as outputs and enable pull-up resistors
		DIO_u8SetPinDirection(KPD_u8_C_PORT, KPD_u8_ColsPins[i], DIO_u8_INPUT);
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	9a 81       	ldd	r25, Y+2	; 0x02
    4022:	fc 01       	movw	r30, r24
    4024:	ed 58       	subi	r30, 0x8D	; 141
    4026:	ff 4f       	sbci	r31, 0xFF	; 255
    4028:	90 81       	ld	r25, Z
    402a:	80 e0       	ldi	r24, 0x00	; 0
    402c:	69 2f       	mov	r22, r25
    402e:	40 e0       	ldi	r20, 0x00	; 0
    4030:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_u8_C_PORT, KPD_u8_ColsPins[i], DIO_u8_HIGH);
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	9a 81       	ldd	r25, Y+2	; 0x02
    4038:	fc 01       	movw	r30, r24
    403a:	ed 58       	subi	r30, 0x8D	; 141
    403c:	ff 4f       	sbci	r31, 0xFF	; 255
    403e:	90 81       	ld	r25, Z
    4040:	80 e0       	ldi	r24, 0x00	; 0
    4042:	69 2f       	mov	r22, r25
    4044:	41 e0       	ldi	r20, 0x01	; 1
    4046:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>

		// Set rows as inputs
		DIO_u8SetPinDirection(KPD_u8_R_PORT,KPD_u8_RowsPins[i], DIO_u8_OUTPUT);
    404a:	89 81       	ldd	r24, Y+1	; 0x01
    404c:	9a 81       	ldd	r25, Y+2	; 0x02
    404e:	fc 01       	movw	r30, r24
    4050:	e1 59       	subi	r30, 0x91	; 145
    4052:	ff 4f       	sbci	r31, 0xFF	; 255
    4054:	90 81       	ld	r25, Z
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	69 2f       	mov	r22, r25
    405a:	41 e0       	ldi	r20, 0x01	; 1
    405c:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
		DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[i], DIO_u8_HIGH);
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	9a 81       	ldd	r25, Y+2	; 0x02
    4064:	fc 01       	movw	r30, r24
    4066:	e1 59       	subi	r30, 0x91	; 145
    4068:	ff 4f       	sbci	r31, 0xFF	; 255
    406a:	90 81       	ld	r25, Z
    406c:	80 e0       	ldi	r24, 0x00	; 0
    406e:	69 2f       	mov	r22, r25
    4070:	41 e0       	ldi	r20, 0x01	; 1
    4072:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>



u8 KeyPad_u8_Init()
{
	for(int i = 0 ; i<=3 ; i++)
    4076:	89 81       	ldd	r24, Y+1	; 0x01
    4078:	9a 81       	ldd	r25, Y+2	; 0x02
    407a:	01 96       	adiw	r24, 0x01	; 1
    407c:	9a 83       	std	Y+2, r25	; 0x02
    407e:	89 83       	std	Y+1, r24	; 0x01
    4080:	89 81       	ldd	r24, Y+1	; 0x01
    4082:	9a 81       	ldd	r25, Y+2	; 0x02
    4084:	84 30       	cpi	r24, 0x04	; 4
    4086:	91 05       	cpc	r25, r1
    4088:	54 f2       	brlt	.-108    	; 0x401e <KeyPad_u8_Init+0x10>

		// Set rows as inputs
		DIO_u8SetPinDirection(KPD_u8_R_PORT,KPD_u8_RowsPins[i], DIO_u8_OUTPUT);
		DIO_u8SetPinValue(KPD_u8_R_PORT, KPD_u8_RowsPins[i], DIO_u8_HIGH);
	}
    return STD_TYPES_OK;
    408a:	81 e0       	ldi	r24, 0x01	; 1
}
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <Keypad_GetPressedKey>:



/**********************************************************************************************/
/*  Keypad 3x3  */
u8 Keypad_GetPressedKey(){
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	00 d0       	rcall	.+0      	; 0x409c <Keypad_GetPressedKey+0x6>
    409c:	cd b7       	in	r28, 0x3d	; 61
    409e:	de b7       	in	r29, 0x3e	; 62
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    40a0:	1a 82       	std	Y+2, r1	; 0x02
    40a2:	4d c0       	rjmp	.+154    	; 0x413e <Keypad_GetPressedKey+0xa8>
		{
			Keypad_Port_Dir = (0b00010000 << Col);
    40a4:	ea e3       	ldi	r30, 0x3A	; 58
    40a6:	f0 e0       	ldi	r31, 0x00	; 0
    40a8:	8a 81       	ldd	r24, Y+2	; 0x02
    40aa:	28 2f       	mov	r18, r24
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	80 e1       	ldi	r24, 0x10	; 16
    40b0:	90 e0       	ldi	r25, 0x00	; 0
    40b2:	02 c0       	rjmp	.+4      	; 0x40b8 <Keypad_GetPressedKey+0x22>
    40b4:	88 0f       	add	r24, r24
    40b6:	99 1f       	adc	r25, r25
    40b8:	2a 95       	dec	r18
    40ba:	e2 f7       	brpl	.-8      	; 0x40b4 <Keypad_GetPressedKey+0x1e>
    40bc:	80 83       	st	Z, r24
			Keypad_Port_Out = ~(0b00010000 << Col);
    40be:	eb e3       	ldi	r30, 0x3B	; 59
    40c0:	f0 e0       	ldi	r31, 0x00	; 0
    40c2:	8a 81       	ldd	r24, Y+2	; 0x02
    40c4:	28 2f       	mov	r18, r24
    40c6:	30 e0       	ldi	r19, 0x00	; 0
    40c8:	80 e1       	ldi	r24, 0x10	; 16
    40ca:	90 e0       	ldi	r25, 0x00	; 0
    40cc:	02 2e       	mov	r0, r18
    40ce:	02 c0       	rjmp	.+4      	; 0x40d4 <Keypad_GetPressedKey+0x3e>
    40d0:	88 0f       	add	r24, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	0a 94       	dec	r0
    40d6:	e2 f7       	brpl	.-8      	; 0x40d0 <Keypad_GetPressedKey+0x3a>
    40d8:	80 95       	com	r24
    40da:	80 83       	st	Z, r24

			for (Row = 0; Row < N_Row; Row++)
    40dc:	19 82       	std	Y+1, r1	; 0x01
    40de:	29 c0       	rjmp	.+82     	; 0x4132 <Keypad_GetPressedKey+0x9c>
			{
				if (BIT_IS_CLEAR(Keypad_Port_In, Row))
    40e0:	e9 e3       	ldi	r30, 0x39	; 57
    40e2:	f0 e0       	ldi	r31, 0x00	; 0
    40e4:	80 81       	ld	r24, Z
    40e6:	28 2f       	mov	r18, r24
    40e8:	30 e0       	ldi	r19, 0x00	; 0
    40ea:	89 81       	ldd	r24, Y+1	; 0x01
    40ec:	88 2f       	mov	r24, r24
    40ee:	90 e0       	ldi	r25, 0x00	; 0
    40f0:	a9 01       	movw	r20, r18
    40f2:	02 c0       	rjmp	.+4      	; 0x40f8 <Keypad_GetPressedKey+0x62>
    40f4:	55 95       	asr	r21
    40f6:	47 95       	ror	r20
    40f8:	8a 95       	dec	r24
    40fa:	e2 f7       	brpl	.-8      	; 0x40f4 <Keypad_GetPressedKey+0x5e>
    40fc:	ca 01       	movw	r24, r20
    40fe:	81 70       	andi	r24, 0x01	; 1
    4100:	90 70       	andi	r25, 0x00	; 0
    4102:	00 97       	sbiw	r24, 0x00	; 0
    4104:	99 f4       	brne	.+38     	; 0x412c <Keypad_GetPressedKey+0x96>
				{
					return Keypad_4x3((Row * N_Col) + Col + 1);
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	28 2f       	mov	r18, r24
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	c9 01       	movw	r24, r18
    410e:	88 0f       	add	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	82 0f       	add	r24, r18
    4114:	93 1f       	adc	r25, r19
    4116:	98 2f       	mov	r25, r24
    4118:	8a 81       	ldd	r24, Y+2	; 0x02
    411a:	89 0f       	add	r24, r25
    411c:	8f 5f       	subi	r24, 0xFF	; 255
    411e:	0e 94 a4 20 	call	0x4148	; 0x4148 <Keypad_4x3>
				}
			}
		}
	}
}
    4122:	0f 90       	pop	r0
    4124:	0f 90       	pop	r0
    4126:	cf 91       	pop	r28
    4128:	df 91       	pop	r29
    412a:	08 95       	ret
		for (Col = 0; Col < N_Col; Col++)
		{
			Keypad_Port_Dir = (0b00010000 << Col);
			Keypad_Port_Out = ~(0b00010000 << Col);

			for (Row = 0; Row < N_Row; Row++)
    412c:	89 81       	ldd	r24, Y+1	; 0x01
    412e:	8f 5f       	subi	r24, 0xFF	; 255
    4130:	89 83       	std	Y+1, r24	; 0x01
    4132:	89 81       	ldd	r24, Y+1	; 0x01
    4134:	84 30       	cpi	r24, 0x04	; 4
    4136:	a0 f2       	brcs	.-88     	; 0x40e0 <Keypad_GetPressedKey+0x4a>
/*  Keypad 3x3  */
u8 Keypad_GetPressedKey(){
	u8 Col, Row;
	while (1)
	{
		for (Col = 0; Col < N_Col; Col++)
    4138:	8a 81       	ldd	r24, Y+2	; 0x02
    413a:	8f 5f       	subi	r24, 0xFF	; 255
    413c:	8a 83       	std	Y+2, r24	; 0x02
    413e:	8a 81       	ldd	r24, Y+2	; 0x02
    4140:	83 30       	cpi	r24, 0x03	; 3
    4142:	08 f4       	brcc	.+2      	; 0x4146 <Keypad_GetPressedKey+0xb0>
    4144:	af cf       	rjmp	.-162    	; 0x40a4 <Keypad_GetPressedKey+0xe>
    4146:	ac cf       	rjmp	.-168    	; 0x40a0 <Keypad_GetPressedKey+0xa>

00004148 <Keypad_4x3>:
		}
	}
}
#if(N_Col == 3)

u8 Keypad_4x3(u8 Num) {
    4148:	df 93       	push	r29
    414a:	cf 93       	push	r28
    414c:	00 d0       	rcall	.+0      	; 0x414e <Keypad_4x3+0x6>
    414e:	00 d0       	rcall	.+0      	; 0x4150 <Keypad_4x3+0x8>
    4150:	cd b7       	in	r28, 0x3d	; 61
    4152:	de b7       	in	r29, 0x3e	; 62
    4154:	89 83       	std	Y+1, r24	; 0x01
	switch (Num) {
    4156:	89 81       	ldd	r24, Y+1	; 0x01
    4158:	28 2f       	mov	r18, r24
    415a:	30 e0       	ldi	r19, 0x00	; 0
    415c:	3c 83       	std	Y+4, r19	; 0x04
    415e:	2b 83       	std	Y+3, r18	; 0x03
    4160:	8b 81       	ldd	r24, Y+3	; 0x03
    4162:	9c 81       	ldd	r25, Y+4	; 0x04
    4164:	8a 30       	cpi	r24, 0x0A	; 10
    4166:	91 05       	cpc	r25, r1
    4168:	81 f0       	breq	.+32     	; 0x418a <Keypad_4x3+0x42>
    416a:	2b 81       	ldd	r18, Y+3	; 0x03
    416c:	3c 81       	ldd	r19, Y+4	; 0x04
    416e:	2a 30       	cpi	r18, 0x0A	; 10
    4170:	31 05       	cpc	r19, r1
    4172:	9c f0       	brlt	.+38     	; 0x419a <Keypad_4x3+0x52>
    4174:	8b 81       	ldd	r24, Y+3	; 0x03
    4176:	9c 81       	ldd	r25, Y+4	; 0x04
    4178:	8b 30       	cpi	r24, 0x0B	; 11
    417a:	91 05       	cpc	r25, r1
    417c:	49 f0       	breq	.+18     	; 0x4190 <Keypad_4x3+0x48>
    417e:	2b 81       	ldd	r18, Y+3	; 0x03
    4180:	3c 81       	ldd	r19, Y+4	; 0x04
    4182:	2c 30       	cpi	r18, 0x0C	; 12
    4184:	31 05       	cpc	r19, r1
    4186:	31 f0       	breq	.+12     	; 0x4194 <Keypad_4x3+0x4c>
    4188:	08 c0       	rjmp	.+16     	; 0x419a <Keypad_4x3+0x52>
	case 10:
		return '*';
    418a:	3a e2       	ldi	r19, 0x2A	; 42
    418c:	3a 83       	std	Y+2, r19	; 0x02
    418e:	07 c0       	rjmp	.+14     	; 0x419e <Keypad_4x3+0x56>
		break;
	case 11:
		return 0;
    4190:	1a 82       	std	Y+2, r1	; 0x02
    4192:	05 c0       	rjmp	.+10     	; 0x419e <Keypad_4x3+0x56>
		break;
	case 12:
		return '#';
    4194:	83 e2       	ldi	r24, 0x23	; 35
    4196:	8a 83       	std	Y+2, r24	; 0x02
    4198:	02 c0       	rjmp	.+4      	; 0x419e <Keypad_4x3+0x56>
	default:
		return Num;
    419a:	99 81       	ldd	r25, Y+1	; 0x01
    419c:	9a 83       	std	Y+2, r25	; 0x02
    419e:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    41a0:	0f 90       	pop	r0
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	08 95       	ret

000041ae <DC_Motor_Init>:
#include "../../MCAL/DIO/DIO_Interface.h";

#include "DC_Motor_Config.h";
#include "DC_Motor_Private.h";

u8 DC_Motor_Init(u8 Copy_u8_Motor1, u8 Copy_u8_Motor2){
    41ae:	df 93       	push	r29
    41b0:	cf 93       	push	r28
    41b2:	00 d0       	rcall	.+0      	; 0x41b4 <DC_Motor_Init+0x6>
    41b4:	0f 92       	push	r0
    41b6:	cd b7       	in	r28, 0x3d	; 61
    41b8:	de b7       	in	r29, 0x3e	; 62
    41ba:	8a 83       	std	Y+2, r24	; 0x02
    41bc:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    41be:	81 e0       	ldi	r24, 0x01	; 1
    41c0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor1 == MOTOR_Connected){
    41c2:	8a 81       	ldd	r24, Y+2	; 0x02
    41c4:	81 30       	cpi	r24, 0x01	; 1
    41c6:	81 f4       	brne	.+32     	; 0x41e8 <DC_Motor_Init+0x3a>
		DIO_u8SetPinDirection(MOTOR_EN1_PORT, MOTOR_EN1_PIN, PIN_OUTPUT);
    41c8:	82 e0       	ldi	r24, 0x02	; 2
    41ca:	62 e0       	ldi	r22, 0x02	; 2
    41cc:	41 e0       	ldi	r20, 0x01	; 1
    41ce:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN1_PORT, MOTOR_IN1_PIN, PIN_OUTPUT);
    41d2:	82 e0       	ldi	r24, 0x02	; 2
    41d4:	60 e0       	ldi	r22, 0x00	; 0
    41d6:	41 e0       	ldi	r20, 0x01	; 1
    41d8:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN2_PORT, MOTOR_IN2_PIN, PIN_OUTPUT);
    41dc:	82 e0       	ldi	r24, 0x02	; 2
    41de:	61 e0       	ldi	r22, 0x01	; 1
    41e0:	41 e0       	ldi	r20, 0x01	; 1
    41e2:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
    41e6:	14 c0       	rjmp	.+40     	; 0x4210 <DC_Motor_Init+0x62>
	}

	else if(Copy_u8_Motor2 == MOTOR_Connected){
    41e8:	8b 81       	ldd	r24, Y+3	; 0x03
    41ea:	81 30       	cpi	r24, 0x01	; 1
    41ec:	81 f4       	brne	.+32     	; 0x420e <DC_Motor_Init+0x60>
		DIO_u8SetPinDirection(MOTOR_EN2_PORT, MOTOR_EN2_PIN, PIN_OUTPUT);
    41ee:	81 e0       	ldi	r24, 0x01	; 1
    41f0:	62 e0       	ldi	r22, 0x02	; 2
    41f2:	41 e0       	ldi	r20, 0x01	; 1
    41f4:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN3_PORT, MOTOR_IN3_PIN, PIN_OUTPUT);
    41f8:	81 e0       	ldi	r24, 0x01	; 1
    41fa:	61 e0       	ldi	r22, 0x01	; 1
    41fc:	41 e0       	ldi	r20, 0x01	; 1
    41fe:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
		DIO_u8SetPinDirection(MOTOR_IN4_PORT, MOTOR_IN4_PIN, PIN_OUTPUT);
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	60 e0       	ldi	r22, 0x00	; 0
    4206:	41 e0       	ldi	r20, 0x01	; 1
    4208:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
    420c:	01 c0       	rjmp	.+2      	; 0x4210 <DC_Motor_Init+0x62>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    420e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4210:	89 81       	ldd	r24, Y+1	; 0x01
}
    4212:	0f 90       	pop	r0
    4214:	0f 90       	pop	r0
    4216:	0f 90       	pop	r0
    4218:	cf 91       	pop	r28
    421a:	df 91       	pop	r29
    421c:	08 95       	ret

0000421e <DC_Motor_Rotate>:


u8 DC_Motor_Rotate(u8 Copy_u8_Motor, u8 Copy_u8_Motor_Dirction){
    421e:	df 93       	push	r29
    4220:	cf 93       	push	r28
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	29 97       	sbiw	r28, 0x09	; 9
    4228:	0f b6       	in	r0, 0x3f	; 63
    422a:	f8 94       	cli
    422c:	de bf       	out	0x3e, r29	; 62
    422e:	0f be       	out	0x3f, r0	; 63
    4230:	cd bf       	out	0x3d, r28	; 61
    4232:	8a 83       	std	Y+2, r24	; 0x02
    4234:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_Error_State = State_OK;
    4236:	81 e0       	ldi	r24, 0x01	; 1
    4238:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8_Motor){
    423a:	8a 81       	ldd	r24, Y+2	; 0x02
    423c:	28 2f       	mov	r18, r24
    423e:	30 e0       	ldi	r19, 0x00	; 0
    4240:	39 87       	std	Y+9, r19	; 0x09
    4242:	28 87       	std	Y+8, r18	; 0x08
    4244:	88 85       	ldd	r24, Y+8	; 0x08
    4246:	99 85       	ldd	r25, Y+9	; 0x09
    4248:	00 97       	sbiw	r24, 0x00	; 0
    424a:	31 f0       	breq	.+12     	; 0x4258 <DC_Motor_Rotate+0x3a>
    424c:	28 85       	ldd	r18, Y+8	; 0x08
    424e:	39 85       	ldd	r19, Y+9	; 0x09
    4250:	21 30       	cpi	r18, 0x01	; 1
    4252:	31 05       	cpc	r19, r1
    4254:	89 f1       	breq	.+98     	; 0x42b8 <DC_Motor_Rotate+0x9a>
    4256:	60 c0       	rjmp	.+192    	; 0x4318 <DC_Motor_Rotate+0xfa>
		case Motor1:
			switch(Copy_u8_Motor_Dirction){
    4258:	8b 81       	ldd	r24, Y+3	; 0x03
    425a:	28 2f       	mov	r18, r24
    425c:	30 e0       	ldi	r19, 0x00	; 0
    425e:	3f 83       	std	Y+7, r19	; 0x07
    4260:	2e 83       	std	Y+6, r18	; 0x06
    4262:	8e 81       	ldd	r24, Y+6	; 0x06
    4264:	9f 81       	ldd	r25, Y+7	; 0x07
    4266:	00 97       	sbiw	r24, 0x00	; 0
    4268:	a9 f0       	breq	.+42     	; 0x4294 <DC_Motor_Rotate+0x76>
    426a:	2e 81       	ldd	r18, Y+6	; 0x06
    426c:	3f 81       	ldd	r19, Y+7	; 0x07
    426e:	21 30       	cpi	r18, 0x01	; 1
    4270:	31 05       	cpc	r19, r1
    4272:	01 f5       	brne	.+64     	; 0x42b4 <DC_Motor_Rotate+0x96>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    4274:	82 e0       	ldi	r24, 0x02	; 2
    4276:	62 e0       	ldi	r22, 0x02	; 2
    4278:	41 e0       	ldi	r20, 0x01	; 1
    427a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_HIGH);
    427e:	82 e0       	ldi	r24, 0x02	; 2
    4280:	60 e0       	ldi	r22, 0x00	; 0
    4282:	41 e0       	ldi	r20, 0x01	; 1
    4284:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_LOW);
    4288:	82 e0       	ldi	r24, 0x02	; 2
    428a:	61 e0       	ldi	r22, 0x01	; 1
    428c:	40 e0       	ldi	r20, 0x00	; 0
    428e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
    4292:	43 c0       	rjmp	.+134    	; 0x431a <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_HIGH);
    4294:	82 e0       	ldi	r24, 0x02	; 2
    4296:	62 e0       	ldi	r22, 0x02	; 2
    4298:	41 e0       	ldi	r20, 0x01	; 1
    429a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN1_PORT ,MOTOR_IN1_PIN, DIO_u8_LOW);
    429e:	82 e0       	ldi	r24, 0x02	; 2
    42a0:	60 e0       	ldi	r22, 0x00	; 0
    42a2:	40 e0       	ldi	r20, 0x00	; 0
    42a4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN2_PORT ,MOTOR_IN2_PIN, DIO_u8_HIGH);
    42a8:	82 e0       	ldi	r24, 0x02	; 2
    42aa:	61 e0       	ldi	r22, 0x01	; 1
    42ac:	41 e0       	ldi	r20, 0x01	; 1
    42ae:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
    42b2:	33 c0       	rjmp	.+102    	; 0x431a <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    42b4:	19 82       	std	Y+1, r1	; 0x01
    42b6:	31 c0       	rjmp	.+98     	; 0x431a <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		case Motor2:
			switch(Copy_u8_Motor_Dirction){
    42b8:	8b 81       	ldd	r24, Y+3	; 0x03
    42ba:	28 2f       	mov	r18, r24
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	3d 83       	std	Y+5, r19	; 0x05
    42c0:	2c 83       	std	Y+4, r18	; 0x04
    42c2:	8c 81       	ldd	r24, Y+4	; 0x04
    42c4:	9d 81       	ldd	r25, Y+5	; 0x05
    42c6:	00 97       	sbiw	r24, 0x00	; 0
    42c8:	a9 f0       	breq	.+42     	; 0x42f4 <DC_Motor_Rotate+0xd6>
    42ca:	2c 81       	ldd	r18, Y+4	; 0x04
    42cc:	3d 81       	ldd	r19, Y+5	; 0x05
    42ce:	21 30       	cpi	r18, 0x01	; 1
    42d0:	31 05       	cpc	r19, r1
    42d2:	01 f5       	brne	.+64     	; 0x4314 <DC_Motor_Rotate+0xf6>
				case ClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	62 e0       	ldi	r22, 0x02	; 2
    42d8:	41 e0       	ldi	r20, 0x01	; 1
    42da:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_HIGH);
    42de:	81 e0       	ldi	r24, 0x01	; 1
    42e0:	61 e0       	ldi	r22, 0x01	; 1
    42e2:	41 e0       	ldi	r20, 0x01	; 1
    42e4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_LOW);
    42e8:	81 e0       	ldi	r24, 0x01	; 1
    42ea:	60 e0       	ldi	r22, 0x00	; 0
    42ec:	40 e0       	ldi	r20, 0x00	; 0
    42ee:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
    42f2:	13 c0       	rjmp	.+38     	; 0x431a <DC_Motor_Rotate+0xfc>
					break;

				case CounterClockWise:
					DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_HIGH);
    42f4:	81 e0       	ldi	r24, 0x01	; 1
    42f6:	62 e0       	ldi	r22, 0x02	; 2
    42f8:	41 e0       	ldi	r20, 0x01	; 1
    42fa:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN3_PORT ,MOTOR_IN3_PIN, DIO_u8_LOW);
    42fe:	81 e0       	ldi	r24, 0x01	; 1
    4300:	61 e0       	ldi	r22, 0x01	; 1
    4302:	40 e0       	ldi	r20, 0x00	; 0
    4304:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
					DIO_u8SetPinValue(MOTOR_IN4_PORT ,MOTOR_IN4_PIN, DIO_u8_HIGH);
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	60 e0       	ldi	r22, 0x00	; 0
    430c:	41 e0       	ldi	r20, 0x01	; 1
    430e:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
    4312:	03 c0       	rjmp	.+6      	; 0x431a <DC_Motor_Rotate+0xfc>
					break;

				default:
					Local_u8_Error_State = State_NOT_OK;
    4314:	19 82       	std	Y+1, r1	; 0x01
    4316:	01 c0       	rjmp	.+2      	; 0x431a <DC_Motor_Rotate+0xfc>
					break;
			}
			break;

		default:
			Local_u8_Error_State = State_NOT_OK;
    4318:	19 82       	std	Y+1, r1	; 0x01
			break;
	}

	return Local_u8_Error_State;
    431a:	89 81       	ldd	r24, Y+1	; 0x01
}
    431c:	29 96       	adiw	r28, 0x09	; 9
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	cd bf       	out	0x3d, r28	; 61
    4328:	cf 91       	pop	r28
    432a:	df 91       	pop	r29
    432c:	08 95       	ret

0000432e <DC_Motor_Stop>:


u8 DC_Motor_Stop(u8 Copy_u8_Motor){
    432e:	df 93       	push	r29
    4330:	cf 93       	push	r28
    4332:	00 d0       	rcall	.+0      	; 0x4334 <DC_Motor_Stop+0x6>
    4334:	cd b7       	in	r28, 0x3d	; 61
    4336:	de b7       	in	r29, 0x3e	; 62
    4338:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_Error_State = State_OK;
    433a:	81 e0       	ldi	r24, 0x01	; 1
    433c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8_Motor == Motor1){
    433e:	8a 81       	ldd	r24, Y+2	; 0x02
    4340:	88 23       	and	r24, r24
    4342:	31 f4       	brne	.+12     	; 0x4350 <DC_Motor_Stop+0x22>
		DIO_u8SetPinValue(MOTOR_EN1_PORT ,MOTOR_EN1_PIN, DIO_u8_LOW);
    4344:	82 e0       	ldi	r24, 0x02	; 2
    4346:	62 e0       	ldi	r22, 0x02	; 2
    4348:	40 e0       	ldi	r20, 0x00	; 0
    434a:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
    434e:	0a c0       	rjmp	.+20     	; 0x4364 <DC_Motor_Stop+0x36>
	}

	else if(Copy_u8_Motor == Motor2){
    4350:	8a 81       	ldd	r24, Y+2	; 0x02
    4352:	81 30       	cpi	r24, 0x01	; 1
    4354:	31 f4       	brne	.+12     	; 0x4362 <DC_Motor_Stop+0x34>
		DIO_u8SetPinValue(MOTOR_EN2_PORT ,MOTOR_EN2_PIN, DIO_u8_LOW);
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	62 e0       	ldi	r22, 0x02	; 2
    435a:	40 e0       	ldi	r20, 0x00	; 0
    435c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <DIO_u8SetPinValue>
    4360:	01 c0       	rjmp	.+2      	; 0x4364 <DC_Motor_Stop+0x36>
	}

	else{
		Local_u8_Error_State = State_NOT_OK;
    4362:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_Error_State;
    4364:	89 81       	ldd	r24, Y+1	; 0x01
}
    4366:	0f 90       	pop	r0
    4368:	0f 90       	pop	r0
    436a:	cf 91       	pop	r28
    436c:	df 91       	pop	r29
    436e:	08 95       	ret

00004370 <main>:
#include "../MCAL/DIO/DIO_Interface.h"

#include<util/delay.h>
#define F_CPU 16000000UL

int main(void){
    4370:	df 93       	push	r29
    4372:	cf 93       	push	r28
    4374:	00 d0       	rcall	.+0      	; 0x4376 <main+0x6>
    4376:	00 d0       	rcall	.+0      	; 0x4378 <main+0x8>
    4378:	00 d0       	rcall	.+0      	; 0x437a <main+0xa>
    437a:	cd b7       	in	r28, 0x3d	; 61
    437c:	de b7       	in	r29, 0x3e	; 62
	u8 count = 0;
    437e:	1c 82       	std	Y+4, r1	; 0x04
	u16 digitalValue, servoValue; 
	u8 ledBrightness;
	DIO_u8SetPinDirection(0, 0, 0);
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	60 e0       	ldi	r22, 0x00	; 0
    4384:	40 e0       	ldi	r20, 0x00	; 0
    4386:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(1, 3, 1);
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	63 e0       	ldi	r22, 0x03	; 3
    438e:	41 e0       	ldi	r20, 0x01	; 1
    4390:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(3, 5, 1);
    4394:	83 e0       	ldi	r24, 0x03	; 3
    4396:	65 e0       	ldi	r22, 0x05	; 5
    4398:	41 e0       	ldi	r20, 0x01	; 1
    439a:	0e 94 8d 0d 	call	0x1b1a	; 0x1b1a <DIO_u8SetPinDirection>
	
	TIMERS_voidTimer0Init();
    439e:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMERS_voidTimer0Init>
	TIMERS_voidTimer1Init();
    43a2:	0e 94 db 05 	call	0xbb6	; 0xbb6 <TIMERS_voidTimer1Init>
	ADC_void_Init();
    43a6:	0e 94 3e 15 	call	0x2a7c	; 0x2a7c <ADC_void_Init>
	
	while(1){
		ADC_u8_Get_Digital_ValueSynchNonBlocking(0, &digitalValue);
    43aa:	9e 01       	movw	r18, r28
    43ac:	2b 5f       	subi	r18, 0xFB	; 251
    43ae:	3f 4f       	sbci	r19, 0xFF	; 255
    43b0:	80 e0       	ldi	r24, 0x00	; 0
    43b2:	b9 01       	movw	r22, r18
    43b4:	0e 94 7d 15 	call	0x2afa	; 0x2afa <ADC_u8_Get_Digital_ValueSynchNonBlocking>
		ledBrightness = (digitalValue * 255UL) / 1023;
    43b8:	8d 81       	ldd	r24, Y+5	; 0x05
    43ba:	9e 81       	ldd	r25, Y+6	; 0x06
    43bc:	cc 01       	movw	r24, r24
    43be:	a0 e0       	ldi	r26, 0x00	; 0
    43c0:	b0 e0       	ldi	r27, 0x00	; 0
    43c2:	2f ef       	ldi	r18, 0xFF	; 255
    43c4:	30 e0       	ldi	r19, 0x00	; 0
    43c6:	40 e0       	ldi	r20, 0x00	; 0
    43c8:	50 e0       	ldi	r21, 0x00	; 0
    43ca:	bc 01       	movw	r22, r24
    43cc:	cd 01       	movw	r24, r26
    43ce:	0e 94 19 22 	call	0x4432	; 0x4432 <__mulsi3>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	2f ef       	ldi	r18, 0xFF	; 255
    43d8:	33 e0       	ldi	r19, 0x03	; 3
    43da:	40 e0       	ldi	r20, 0x00	; 0
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	bc 01       	movw	r22, r24
    43e0:	cd 01       	movw	r24, r26
    43e2:	0e 94 38 22 	call	0x4470	; 0x4470 <__udivmodsi4>
    43e6:	da 01       	movw	r26, r20
    43e8:	c9 01       	movw	r24, r18
    43ea:	89 83       	std	Y+1, r24	; 0x01
		servoValue = (digitalValue * 1000UL) / 1023;
    43ec:	8d 81       	ldd	r24, Y+5	; 0x05
    43ee:	9e 81       	ldd	r25, Y+6	; 0x06
    43f0:	cc 01       	movw	r24, r24
    43f2:	a0 e0       	ldi	r26, 0x00	; 0
    43f4:	b0 e0       	ldi	r27, 0x00	; 0
    43f6:	28 ee       	ldi	r18, 0xE8	; 232
    43f8:	33 e0       	ldi	r19, 0x03	; 3
    43fa:	40 e0       	ldi	r20, 0x00	; 0
    43fc:	50 e0       	ldi	r21, 0x00	; 0
    43fe:	bc 01       	movw	r22, r24
    4400:	cd 01       	movw	r24, r26
    4402:	0e 94 19 22 	call	0x4432	; 0x4432 <__mulsi3>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	2f ef       	ldi	r18, 0xFF	; 255
    440c:	33 e0       	ldi	r19, 0x03	; 3
    440e:	40 e0       	ldi	r20, 0x00	; 0
    4410:	50 e0       	ldi	r21, 0x00	; 0
    4412:	bc 01       	movw	r22, r24
    4414:	cd 01       	movw	r24, r26
    4416:	0e 94 38 22 	call	0x4470	; 0x4470 <__udivmodsi4>
    441a:	da 01       	movw	r26, r20
    441c:	c9 01       	movw	r24, r18
    441e:	9b 83       	std	Y+3, r25	; 0x03
    4420:	8a 83       	std	Y+2, r24	; 0x02
		TIMERS_voidTIMER0SetCompareMatchValue(ledBrightness);
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	0e 94 67 06 	call	0xcce	; 0xcce <TIMERS_voidTIMER0SetCompareMatchValue>
		TIMERS_voidTIMER1SetCompareMatchValueA(servoValue);
    4428:	8a 81       	ldd	r24, Y+2	; 0x02
    442a:	9b 81       	ldd	r25, Y+3	; 0x03
    442c:	0e 94 75 06 	call	0xcea	; 0xcea <TIMERS_voidTIMER1SetCompareMatchValueA>
    4430:	bc cf       	rjmp	.-136    	; 0x43aa <main+0x3a>

00004432 <__mulsi3>:
    4432:	62 9f       	mul	r22, r18
    4434:	d0 01       	movw	r26, r0
    4436:	73 9f       	mul	r23, r19
    4438:	f0 01       	movw	r30, r0
    443a:	82 9f       	mul	r24, r18
    443c:	e0 0d       	add	r30, r0
    443e:	f1 1d       	adc	r31, r1
    4440:	64 9f       	mul	r22, r20
    4442:	e0 0d       	add	r30, r0
    4444:	f1 1d       	adc	r31, r1
    4446:	92 9f       	mul	r25, r18
    4448:	f0 0d       	add	r31, r0
    444a:	83 9f       	mul	r24, r19
    444c:	f0 0d       	add	r31, r0
    444e:	74 9f       	mul	r23, r20
    4450:	f0 0d       	add	r31, r0
    4452:	65 9f       	mul	r22, r21
    4454:	f0 0d       	add	r31, r0
    4456:	99 27       	eor	r25, r25
    4458:	72 9f       	mul	r23, r18
    445a:	b0 0d       	add	r27, r0
    445c:	e1 1d       	adc	r30, r1
    445e:	f9 1f       	adc	r31, r25
    4460:	63 9f       	mul	r22, r19
    4462:	b0 0d       	add	r27, r0
    4464:	e1 1d       	adc	r30, r1
    4466:	f9 1f       	adc	r31, r25
    4468:	bd 01       	movw	r22, r26
    446a:	cf 01       	movw	r24, r30
    446c:	11 24       	eor	r1, r1
    446e:	08 95       	ret

00004470 <__udivmodsi4>:
    4470:	a1 e2       	ldi	r26, 0x21	; 33
    4472:	1a 2e       	mov	r1, r26
    4474:	aa 1b       	sub	r26, r26
    4476:	bb 1b       	sub	r27, r27
    4478:	fd 01       	movw	r30, r26
    447a:	0d c0       	rjmp	.+26     	; 0x4496 <__udivmodsi4_ep>

0000447c <__udivmodsi4_loop>:
    447c:	aa 1f       	adc	r26, r26
    447e:	bb 1f       	adc	r27, r27
    4480:	ee 1f       	adc	r30, r30
    4482:	ff 1f       	adc	r31, r31
    4484:	a2 17       	cp	r26, r18
    4486:	b3 07       	cpc	r27, r19
    4488:	e4 07       	cpc	r30, r20
    448a:	f5 07       	cpc	r31, r21
    448c:	20 f0       	brcs	.+8      	; 0x4496 <__udivmodsi4_ep>
    448e:	a2 1b       	sub	r26, r18
    4490:	b3 0b       	sbc	r27, r19
    4492:	e4 0b       	sbc	r30, r20
    4494:	f5 0b       	sbc	r31, r21

00004496 <__udivmodsi4_ep>:
    4496:	66 1f       	adc	r22, r22
    4498:	77 1f       	adc	r23, r23
    449a:	88 1f       	adc	r24, r24
    449c:	99 1f       	adc	r25, r25
    449e:	1a 94       	dec	r1
    44a0:	69 f7       	brne	.-38     	; 0x447c <__udivmodsi4_loop>
    44a2:	60 95       	com	r22
    44a4:	70 95       	com	r23
    44a6:	80 95       	com	r24
    44a8:	90 95       	com	r25
    44aa:	9b 01       	movw	r18, r22
    44ac:	ac 01       	movw	r20, r24
    44ae:	bd 01       	movw	r22, r26
    44b0:	cf 01       	movw	r24, r30
    44b2:	08 95       	ret

000044b4 <__prologue_saves__>:
    44b4:	2f 92       	push	r2
    44b6:	3f 92       	push	r3
    44b8:	4f 92       	push	r4
    44ba:	5f 92       	push	r5
    44bc:	6f 92       	push	r6
    44be:	7f 92       	push	r7
    44c0:	8f 92       	push	r8
    44c2:	9f 92       	push	r9
    44c4:	af 92       	push	r10
    44c6:	bf 92       	push	r11
    44c8:	cf 92       	push	r12
    44ca:	df 92       	push	r13
    44cc:	ef 92       	push	r14
    44ce:	ff 92       	push	r15
    44d0:	0f 93       	push	r16
    44d2:	1f 93       	push	r17
    44d4:	cf 93       	push	r28
    44d6:	df 93       	push	r29
    44d8:	cd b7       	in	r28, 0x3d	; 61
    44da:	de b7       	in	r29, 0x3e	; 62
    44dc:	ca 1b       	sub	r28, r26
    44de:	db 0b       	sbc	r29, r27
    44e0:	0f b6       	in	r0, 0x3f	; 63
    44e2:	f8 94       	cli
    44e4:	de bf       	out	0x3e, r29	; 62
    44e6:	0f be       	out	0x3f, r0	; 63
    44e8:	cd bf       	out	0x3d, r28	; 61
    44ea:	09 94       	ijmp

000044ec <__epilogue_restores__>:
    44ec:	2a 88       	ldd	r2, Y+18	; 0x12
    44ee:	39 88       	ldd	r3, Y+17	; 0x11
    44f0:	48 88       	ldd	r4, Y+16	; 0x10
    44f2:	5f 84       	ldd	r5, Y+15	; 0x0f
    44f4:	6e 84       	ldd	r6, Y+14	; 0x0e
    44f6:	7d 84       	ldd	r7, Y+13	; 0x0d
    44f8:	8c 84       	ldd	r8, Y+12	; 0x0c
    44fa:	9b 84       	ldd	r9, Y+11	; 0x0b
    44fc:	aa 84       	ldd	r10, Y+10	; 0x0a
    44fe:	b9 84       	ldd	r11, Y+9	; 0x09
    4500:	c8 84       	ldd	r12, Y+8	; 0x08
    4502:	df 80       	ldd	r13, Y+7	; 0x07
    4504:	ee 80       	ldd	r14, Y+6	; 0x06
    4506:	fd 80       	ldd	r15, Y+5	; 0x05
    4508:	0c 81       	ldd	r16, Y+4	; 0x04
    450a:	1b 81       	ldd	r17, Y+3	; 0x03
    450c:	aa 81       	ldd	r26, Y+2	; 0x02
    450e:	b9 81       	ldd	r27, Y+1	; 0x01
    4510:	ce 0f       	add	r28, r30
    4512:	d1 1d       	adc	r29, r1
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	de bf       	out	0x3e, r29	; 62
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	cd bf       	out	0x3d, r28	; 61
    451e:	ed 01       	movw	r28, r26
    4520:	08 95       	ret

00004522 <strlen>:
    4522:	fc 01       	movw	r30, r24
    4524:	01 90       	ld	r0, Z+
    4526:	00 20       	and	r0, r0
    4528:	e9 f7       	brne	.-6      	; 0x4524 <strlen+0x2>
    452a:	80 95       	com	r24
    452c:	90 95       	com	r25
    452e:	8e 0f       	add	r24, r30
    4530:	9f 1f       	adc	r25, r31
    4532:	08 95       	ret

00004534 <sprintf>:
    4534:	ae e0       	ldi	r26, 0x0E	; 14
    4536:	b0 e0       	ldi	r27, 0x00	; 0
    4538:	e0 ea       	ldi	r30, 0xA0	; 160
    453a:	f2 e2       	ldi	r31, 0x22	; 34
    453c:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <__prologue_saves__+0x1c>
    4540:	0d 89       	ldd	r16, Y+21	; 0x15
    4542:	1e 89       	ldd	r17, Y+22	; 0x16
    4544:	86 e0       	ldi	r24, 0x06	; 6
    4546:	8c 83       	std	Y+4, r24	; 0x04
    4548:	1a 83       	std	Y+2, r17	; 0x02
    454a:	09 83       	std	Y+1, r16	; 0x01
    454c:	8f ef       	ldi	r24, 0xFF	; 255
    454e:	9f e7       	ldi	r25, 0x7F	; 127
    4550:	9e 83       	std	Y+6, r25	; 0x06
    4552:	8d 83       	std	Y+5, r24	; 0x05
    4554:	9e 01       	movw	r18, r28
    4556:	27 5e       	subi	r18, 0xE7	; 231
    4558:	3f 4f       	sbci	r19, 0xFF	; 255
    455a:	ce 01       	movw	r24, r28
    455c:	01 96       	adiw	r24, 0x01	; 1
    455e:	6f 89       	ldd	r22, Y+23	; 0x17
    4560:	78 8d       	ldd	r23, Y+24	; 0x18
    4562:	a9 01       	movw	r20, r18
    4564:	0e 94 be 22 	call	0x457c	; 0x457c <vfprintf>
    4568:	2f 81       	ldd	r18, Y+7	; 0x07
    456a:	38 85       	ldd	r19, Y+8	; 0x08
    456c:	02 0f       	add	r16, r18
    456e:	13 1f       	adc	r17, r19
    4570:	f8 01       	movw	r30, r16
    4572:	10 82       	st	Z, r1
    4574:	2e 96       	adiw	r28, 0x0e	; 14
    4576:	e4 e0       	ldi	r30, 0x04	; 4
    4578:	0c 94 84 22 	jmp	0x4508	; 0x4508 <__epilogue_restores__+0x1c>

0000457c <vfprintf>:
    457c:	ab e0       	ldi	r26, 0x0B	; 11
    457e:	b0 e0       	ldi	r27, 0x00	; 0
    4580:	e4 ec       	ldi	r30, 0xC4	; 196
    4582:	f2 e2       	ldi	r31, 0x22	; 34
    4584:	0c 94 5a 22 	jmp	0x44b4	; 0x44b4 <__prologue_saves__>
    4588:	3c 01       	movw	r6, r24
    458a:	2b 01       	movw	r4, r22
    458c:	5a 01       	movw	r10, r20
    458e:	fc 01       	movw	r30, r24
    4590:	17 82       	std	Z+7, r1	; 0x07
    4592:	16 82       	std	Z+6, r1	; 0x06
    4594:	83 81       	ldd	r24, Z+3	; 0x03
    4596:	81 fd       	sbrc	r24, 1
    4598:	03 c0       	rjmp	.+6      	; 0x45a0 <vfprintf+0x24>
    459a:	6f ef       	ldi	r22, 0xFF	; 255
    459c:	7f ef       	ldi	r23, 0xFF	; 255
    459e:	c6 c1       	rjmp	.+908    	; 0x492c <vfprintf+0x3b0>
    45a0:	9a e0       	ldi	r25, 0x0A	; 10
    45a2:	89 2e       	mov	r8, r25
    45a4:	1e 01       	movw	r2, r28
    45a6:	08 94       	sec
    45a8:	21 1c       	adc	r2, r1
    45aa:	31 1c       	adc	r3, r1
    45ac:	f3 01       	movw	r30, r6
    45ae:	23 81       	ldd	r18, Z+3	; 0x03
    45b0:	f2 01       	movw	r30, r4
    45b2:	23 fd       	sbrc	r18, 3
    45b4:	85 91       	lpm	r24, Z+
    45b6:	23 ff       	sbrs	r18, 3
    45b8:	81 91       	ld	r24, Z+
    45ba:	2f 01       	movw	r4, r30
    45bc:	88 23       	and	r24, r24
    45be:	09 f4       	brne	.+2      	; 0x45c2 <vfprintf+0x46>
    45c0:	b2 c1       	rjmp	.+868    	; 0x4926 <vfprintf+0x3aa>
    45c2:	85 32       	cpi	r24, 0x25	; 37
    45c4:	39 f4       	brne	.+14     	; 0x45d4 <vfprintf+0x58>
    45c6:	23 fd       	sbrc	r18, 3
    45c8:	85 91       	lpm	r24, Z+
    45ca:	23 ff       	sbrs	r18, 3
    45cc:	81 91       	ld	r24, Z+
    45ce:	2f 01       	movw	r4, r30
    45d0:	85 32       	cpi	r24, 0x25	; 37
    45d2:	29 f4       	brne	.+10     	; 0x45de <vfprintf+0x62>
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	b3 01       	movw	r22, r6
    45d8:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    45dc:	e7 cf       	rjmp	.-50     	; 0x45ac <vfprintf+0x30>
    45de:	98 2f       	mov	r25, r24
    45e0:	ff 24       	eor	r15, r15
    45e2:	ee 24       	eor	r14, r14
    45e4:	99 24       	eor	r9, r9
    45e6:	ff e1       	ldi	r31, 0x1F	; 31
    45e8:	ff 15       	cp	r31, r15
    45ea:	d0 f0       	brcs	.+52     	; 0x4620 <vfprintf+0xa4>
    45ec:	9b 32       	cpi	r25, 0x2B	; 43
    45ee:	69 f0       	breq	.+26     	; 0x460a <vfprintf+0x8e>
    45f0:	9c 32       	cpi	r25, 0x2C	; 44
    45f2:	28 f4       	brcc	.+10     	; 0x45fe <vfprintf+0x82>
    45f4:	90 32       	cpi	r25, 0x20	; 32
    45f6:	59 f0       	breq	.+22     	; 0x460e <vfprintf+0x92>
    45f8:	93 32       	cpi	r25, 0x23	; 35
    45fa:	91 f4       	brne	.+36     	; 0x4620 <vfprintf+0xa4>
    45fc:	0e c0       	rjmp	.+28     	; 0x461a <vfprintf+0x9e>
    45fe:	9d 32       	cpi	r25, 0x2D	; 45
    4600:	49 f0       	breq	.+18     	; 0x4614 <vfprintf+0x98>
    4602:	90 33       	cpi	r25, 0x30	; 48
    4604:	69 f4       	brne	.+26     	; 0x4620 <vfprintf+0xa4>
    4606:	41 e0       	ldi	r20, 0x01	; 1
    4608:	24 c0       	rjmp	.+72     	; 0x4652 <vfprintf+0xd6>
    460a:	52 e0       	ldi	r21, 0x02	; 2
    460c:	f5 2a       	or	r15, r21
    460e:	84 e0       	ldi	r24, 0x04	; 4
    4610:	f8 2a       	or	r15, r24
    4612:	28 c0       	rjmp	.+80     	; 0x4664 <vfprintf+0xe8>
    4614:	98 e0       	ldi	r25, 0x08	; 8
    4616:	f9 2a       	or	r15, r25
    4618:	25 c0       	rjmp	.+74     	; 0x4664 <vfprintf+0xe8>
    461a:	e0 e1       	ldi	r30, 0x10	; 16
    461c:	fe 2a       	or	r15, r30
    461e:	22 c0       	rjmp	.+68     	; 0x4664 <vfprintf+0xe8>
    4620:	f7 fc       	sbrc	r15, 7
    4622:	29 c0       	rjmp	.+82     	; 0x4676 <vfprintf+0xfa>
    4624:	89 2f       	mov	r24, r25
    4626:	80 53       	subi	r24, 0x30	; 48
    4628:	8a 30       	cpi	r24, 0x0A	; 10
    462a:	70 f4       	brcc	.+28     	; 0x4648 <vfprintf+0xcc>
    462c:	f6 fe       	sbrs	r15, 6
    462e:	05 c0       	rjmp	.+10     	; 0x463a <vfprintf+0xbe>
    4630:	98 9c       	mul	r9, r8
    4632:	90 2c       	mov	r9, r0
    4634:	11 24       	eor	r1, r1
    4636:	98 0e       	add	r9, r24
    4638:	15 c0       	rjmp	.+42     	; 0x4664 <vfprintf+0xe8>
    463a:	e8 9c       	mul	r14, r8
    463c:	e0 2c       	mov	r14, r0
    463e:	11 24       	eor	r1, r1
    4640:	e8 0e       	add	r14, r24
    4642:	f0 e2       	ldi	r31, 0x20	; 32
    4644:	ff 2a       	or	r15, r31
    4646:	0e c0       	rjmp	.+28     	; 0x4664 <vfprintf+0xe8>
    4648:	9e 32       	cpi	r25, 0x2E	; 46
    464a:	29 f4       	brne	.+10     	; 0x4656 <vfprintf+0xda>
    464c:	f6 fc       	sbrc	r15, 6
    464e:	6b c1       	rjmp	.+726    	; 0x4926 <vfprintf+0x3aa>
    4650:	40 e4       	ldi	r20, 0x40	; 64
    4652:	f4 2a       	or	r15, r20
    4654:	07 c0       	rjmp	.+14     	; 0x4664 <vfprintf+0xe8>
    4656:	9c 36       	cpi	r25, 0x6C	; 108
    4658:	19 f4       	brne	.+6      	; 0x4660 <vfprintf+0xe4>
    465a:	50 e8       	ldi	r21, 0x80	; 128
    465c:	f5 2a       	or	r15, r21
    465e:	02 c0       	rjmp	.+4      	; 0x4664 <vfprintf+0xe8>
    4660:	98 36       	cpi	r25, 0x68	; 104
    4662:	49 f4       	brne	.+18     	; 0x4676 <vfprintf+0xfa>
    4664:	f2 01       	movw	r30, r4
    4666:	23 fd       	sbrc	r18, 3
    4668:	95 91       	lpm	r25, Z+
    466a:	23 ff       	sbrs	r18, 3
    466c:	91 91       	ld	r25, Z+
    466e:	2f 01       	movw	r4, r30
    4670:	99 23       	and	r25, r25
    4672:	09 f0       	breq	.+2      	; 0x4676 <vfprintf+0xfa>
    4674:	b8 cf       	rjmp	.-144    	; 0x45e6 <vfprintf+0x6a>
    4676:	89 2f       	mov	r24, r25
    4678:	85 54       	subi	r24, 0x45	; 69
    467a:	83 30       	cpi	r24, 0x03	; 3
    467c:	18 f0       	brcs	.+6      	; 0x4684 <vfprintf+0x108>
    467e:	80 52       	subi	r24, 0x20	; 32
    4680:	83 30       	cpi	r24, 0x03	; 3
    4682:	38 f4       	brcc	.+14     	; 0x4692 <vfprintf+0x116>
    4684:	44 e0       	ldi	r20, 0x04	; 4
    4686:	50 e0       	ldi	r21, 0x00	; 0
    4688:	a4 0e       	add	r10, r20
    468a:	b5 1e       	adc	r11, r21
    468c:	5f e3       	ldi	r21, 0x3F	; 63
    468e:	59 83       	std	Y+1, r21	; 0x01
    4690:	0f c0       	rjmp	.+30     	; 0x46b0 <vfprintf+0x134>
    4692:	93 36       	cpi	r25, 0x63	; 99
    4694:	31 f0       	breq	.+12     	; 0x46a2 <vfprintf+0x126>
    4696:	93 37       	cpi	r25, 0x73	; 115
    4698:	79 f0       	breq	.+30     	; 0x46b8 <vfprintf+0x13c>
    469a:	93 35       	cpi	r25, 0x53	; 83
    469c:	09 f0       	breq	.+2      	; 0x46a0 <vfprintf+0x124>
    469e:	56 c0       	rjmp	.+172    	; 0x474c <vfprintf+0x1d0>
    46a0:	20 c0       	rjmp	.+64     	; 0x46e2 <vfprintf+0x166>
    46a2:	f5 01       	movw	r30, r10
    46a4:	80 81       	ld	r24, Z
    46a6:	89 83       	std	Y+1, r24	; 0x01
    46a8:	42 e0       	ldi	r20, 0x02	; 2
    46aa:	50 e0       	ldi	r21, 0x00	; 0
    46ac:	a4 0e       	add	r10, r20
    46ae:	b5 1e       	adc	r11, r21
    46b0:	61 01       	movw	r12, r2
    46b2:	01 e0       	ldi	r16, 0x01	; 1
    46b4:	10 e0       	ldi	r17, 0x00	; 0
    46b6:	12 c0       	rjmp	.+36     	; 0x46dc <vfprintf+0x160>
    46b8:	f5 01       	movw	r30, r10
    46ba:	c0 80       	ld	r12, Z
    46bc:	d1 80       	ldd	r13, Z+1	; 0x01
    46be:	f6 fc       	sbrc	r15, 6
    46c0:	03 c0       	rjmp	.+6      	; 0x46c8 <vfprintf+0x14c>
    46c2:	6f ef       	ldi	r22, 0xFF	; 255
    46c4:	7f ef       	ldi	r23, 0xFF	; 255
    46c6:	02 c0       	rjmp	.+4      	; 0x46cc <vfprintf+0x150>
    46c8:	69 2d       	mov	r22, r9
    46ca:	70 e0       	ldi	r23, 0x00	; 0
    46cc:	42 e0       	ldi	r20, 0x02	; 2
    46ce:	50 e0       	ldi	r21, 0x00	; 0
    46d0:	a4 0e       	add	r10, r20
    46d2:	b5 1e       	adc	r11, r21
    46d4:	c6 01       	movw	r24, r12
    46d6:	0e 94 a6 24 	call	0x494c	; 0x494c <strnlen>
    46da:	8c 01       	movw	r16, r24
    46dc:	5f e7       	ldi	r21, 0x7F	; 127
    46de:	f5 22       	and	r15, r21
    46e0:	14 c0       	rjmp	.+40     	; 0x470a <vfprintf+0x18e>
    46e2:	f5 01       	movw	r30, r10
    46e4:	c0 80       	ld	r12, Z
    46e6:	d1 80       	ldd	r13, Z+1	; 0x01
    46e8:	f6 fc       	sbrc	r15, 6
    46ea:	03 c0       	rjmp	.+6      	; 0x46f2 <vfprintf+0x176>
    46ec:	6f ef       	ldi	r22, 0xFF	; 255
    46ee:	7f ef       	ldi	r23, 0xFF	; 255
    46f0:	02 c0       	rjmp	.+4      	; 0x46f6 <vfprintf+0x17a>
    46f2:	69 2d       	mov	r22, r9
    46f4:	70 e0       	ldi	r23, 0x00	; 0
    46f6:	42 e0       	ldi	r20, 0x02	; 2
    46f8:	50 e0       	ldi	r21, 0x00	; 0
    46fa:	a4 0e       	add	r10, r20
    46fc:	b5 1e       	adc	r11, r21
    46fe:	c6 01       	movw	r24, r12
    4700:	0e 94 9b 24 	call	0x4936	; 0x4936 <strnlen_P>
    4704:	8c 01       	movw	r16, r24
    4706:	50 e8       	ldi	r21, 0x80	; 128
    4708:	f5 2a       	or	r15, r21
    470a:	f3 fe       	sbrs	r15, 3
    470c:	07 c0       	rjmp	.+14     	; 0x471c <vfprintf+0x1a0>
    470e:	1a c0       	rjmp	.+52     	; 0x4744 <vfprintf+0x1c8>
    4710:	80 e2       	ldi	r24, 0x20	; 32
    4712:	90 e0       	ldi	r25, 0x00	; 0
    4714:	b3 01       	movw	r22, r6
    4716:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    471a:	ea 94       	dec	r14
    471c:	8e 2d       	mov	r24, r14
    471e:	90 e0       	ldi	r25, 0x00	; 0
    4720:	08 17       	cp	r16, r24
    4722:	19 07       	cpc	r17, r25
    4724:	a8 f3       	brcs	.-22     	; 0x4710 <vfprintf+0x194>
    4726:	0e c0       	rjmp	.+28     	; 0x4744 <vfprintf+0x1c8>
    4728:	f6 01       	movw	r30, r12
    472a:	f7 fc       	sbrc	r15, 7
    472c:	85 91       	lpm	r24, Z+
    472e:	f7 fe       	sbrs	r15, 7
    4730:	81 91       	ld	r24, Z+
    4732:	6f 01       	movw	r12, r30
    4734:	90 e0       	ldi	r25, 0x00	; 0
    4736:	b3 01       	movw	r22, r6
    4738:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    473c:	e1 10       	cpse	r14, r1
    473e:	ea 94       	dec	r14
    4740:	01 50       	subi	r16, 0x01	; 1
    4742:	10 40       	sbci	r17, 0x00	; 0
    4744:	01 15       	cp	r16, r1
    4746:	11 05       	cpc	r17, r1
    4748:	79 f7       	brne	.-34     	; 0x4728 <vfprintf+0x1ac>
    474a:	ea c0       	rjmp	.+468    	; 0x4920 <vfprintf+0x3a4>
    474c:	94 36       	cpi	r25, 0x64	; 100
    474e:	11 f0       	breq	.+4      	; 0x4754 <vfprintf+0x1d8>
    4750:	99 36       	cpi	r25, 0x69	; 105
    4752:	69 f5       	brne	.+90     	; 0x47ae <vfprintf+0x232>
    4754:	f7 fe       	sbrs	r15, 7
    4756:	08 c0       	rjmp	.+16     	; 0x4768 <vfprintf+0x1ec>
    4758:	f5 01       	movw	r30, r10
    475a:	20 81       	ld	r18, Z
    475c:	31 81       	ldd	r19, Z+1	; 0x01
    475e:	42 81       	ldd	r20, Z+2	; 0x02
    4760:	53 81       	ldd	r21, Z+3	; 0x03
    4762:	84 e0       	ldi	r24, 0x04	; 4
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	0a c0       	rjmp	.+20     	; 0x477c <vfprintf+0x200>
    4768:	f5 01       	movw	r30, r10
    476a:	80 81       	ld	r24, Z
    476c:	91 81       	ldd	r25, Z+1	; 0x01
    476e:	9c 01       	movw	r18, r24
    4770:	44 27       	eor	r20, r20
    4772:	37 fd       	sbrc	r19, 7
    4774:	40 95       	com	r20
    4776:	54 2f       	mov	r21, r20
    4778:	82 e0       	ldi	r24, 0x02	; 2
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	a8 0e       	add	r10, r24
    477e:	b9 1e       	adc	r11, r25
    4780:	9f e6       	ldi	r25, 0x6F	; 111
    4782:	f9 22       	and	r15, r25
    4784:	57 ff       	sbrs	r21, 7
    4786:	09 c0       	rjmp	.+18     	; 0x479a <vfprintf+0x21e>
    4788:	50 95       	com	r21
    478a:	40 95       	com	r20
    478c:	30 95       	com	r19
    478e:	21 95       	neg	r18
    4790:	3f 4f       	sbci	r19, 0xFF	; 255
    4792:	4f 4f       	sbci	r20, 0xFF	; 255
    4794:	5f 4f       	sbci	r21, 0xFF	; 255
    4796:	e0 e8       	ldi	r30, 0x80	; 128
    4798:	fe 2a       	or	r15, r30
    479a:	ca 01       	movw	r24, r20
    479c:	b9 01       	movw	r22, r18
    479e:	a1 01       	movw	r20, r2
    47a0:	2a e0       	ldi	r18, 0x0A	; 10
    47a2:	30 e0       	ldi	r19, 0x00	; 0
    47a4:	0e 94 dd 24 	call	0x49ba	; 0x49ba <__ultoa_invert>
    47a8:	d8 2e       	mov	r13, r24
    47aa:	d2 18       	sub	r13, r2
    47ac:	40 c0       	rjmp	.+128    	; 0x482e <vfprintf+0x2b2>
    47ae:	95 37       	cpi	r25, 0x75	; 117
    47b0:	29 f4       	brne	.+10     	; 0x47bc <vfprintf+0x240>
    47b2:	1f 2d       	mov	r17, r15
    47b4:	1f 7e       	andi	r17, 0xEF	; 239
    47b6:	2a e0       	ldi	r18, 0x0A	; 10
    47b8:	30 e0       	ldi	r19, 0x00	; 0
    47ba:	1d c0       	rjmp	.+58     	; 0x47f6 <vfprintf+0x27a>
    47bc:	1f 2d       	mov	r17, r15
    47be:	19 7f       	andi	r17, 0xF9	; 249
    47c0:	9f 36       	cpi	r25, 0x6F	; 111
    47c2:	61 f0       	breq	.+24     	; 0x47dc <vfprintf+0x260>
    47c4:	90 37       	cpi	r25, 0x70	; 112
    47c6:	20 f4       	brcc	.+8      	; 0x47d0 <vfprintf+0x254>
    47c8:	98 35       	cpi	r25, 0x58	; 88
    47ca:	09 f0       	breq	.+2      	; 0x47ce <vfprintf+0x252>
    47cc:	ac c0       	rjmp	.+344    	; 0x4926 <vfprintf+0x3aa>
    47ce:	0f c0       	rjmp	.+30     	; 0x47ee <vfprintf+0x272>
    47d0:	90 37       	cpi	r25, 0x70	; 112
    47d2:	39 f0       	breq	.+14     	; 0x47e2 <vfprintf+0x266>
    47d4:	98 37       	cpi	r25, 0x78	; 120
    47d6:	09 f0       	breq	.+2      	; 0x47da <vfprintf+0x25e>
    47d8:	a6 c0       	rjmp	.+332    	; 0x4926 <vfprintf+0x3aa>
    47da:	04 c0       	rjmp	.+8      	; 0x47e4 <vfprintf+0x268>
    47dc:	28 e0       	ldi	r18, 0x08	; 8
    47de:	30 e0       	ldi	r19, 0x00	; 0
    47e0:	0a c0       	rjmp	.+20     	; 0x47f6 <vfprintf+0x27a>
    47e2:	10 61       	ori	r17, 0x10	; 16
    47e4:	14 fd       	sbrc	r17, 4
    47e6:	14 60       	ori	r17, 0x04	; 4
    47e8:	20 e1       	ldi	r18, 0x10	; 16
    47ea:	30 e0       	ldi	r19, 0x00	; 0
    47ec:	04 c0       	rjmp	.+8      	; 0x47f6 <vfprintf+0x27a>
    47ee:	14 fd       	sbrc	r17, 4
    47f0:	16 60       	ori	r17, 0x06	; 6
    47f2:	20 e1       	ldi	r18, 0x10	; 16
    47f4:	32 e0       	ldi	r19, 0x02	; 2
    47f6:	17 ff       	sbrs	r17, 7
    47f8:	08 c0       	rjmp	.+16     	; 0x480a <vfprintf+0x28e>
    47fa:	f5 01       	movw	r30, r10
    47fc:	60 81       	ld	r22, Z
    47fe:	71 81       	ldd	r23, Z+1	; 0x01
    4800:	82 81       	ldd	r24, Z+2	; 0x02
    4802:	93 81       	ldd	r25, Z+3	; 0x03
    4804:	44 e0       	ldi	r20, 0x04	; 4
    4806:	50 e0       	ldi	r21, 0x00	; 0
    4808:	08 c0       	rjmp	.+16     	; 0x481a <vfprintf+0x29e>
    480a:	f5 01       	movw	r30, r10
    480c:	80 81       	ld	r24, Z
    480e:	91 81       	ldd	r25, Z+1	; 0x01
    4810:	bc 01       	movw	r22, r24
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	90 e0       	ldi	r25, 0x00	; 0
    4816:	42 e0       	ldi	r20, 0x02	; 2
    4818:	50 e0       	ldi	r21, 0x00	; 0
    481a:	a4 0e       	add	r10, r20
    481c:	b5 1e       	adc	r11, r21
    481e:	a1 01       	movw	r20, r2
    4820:	0e 94 dd 24 	call	0x49ba	; 0x49ba <__ultoa_invert>
    4824:	d8 2e       	mov	r13, r24
    4826:	d2 18       	sub	r13, r2
    4828:	8f e7       	ldi	r24, 0x7F	; 127
    482a:	f8 2e       	mov	r15, r24
    482c:	f1 22       	and	r15, r17
    482e:	f6 fe       	sbrs	r15, 6
    4830:	0b c0       	rjmp	.+22     	; 0x4848 <vfprintf+0x2cc>
    4832:	5e ef       	ldi	r21, 0xFE	; 254
    4834:	f5 22       	and	r15, r21
    4836:	d9 14       	cp	r13, r9
    4838:	38 f4       	brcc	.+14     	; 0x4848 <vfprintf+0x2cc>
    483a:	f4 fe       	sbrs	r15, 4
    483c:	07 c0       	rjmp	.+14     	; 0x484c <vfprintf+0x2d0>
    483e:	f2 fc       	sbrc	r15, 2
    4840:	05 c0       	rjmp	.+10     	; 0x484c <vfprintf+0x2d0>
    4842:	8f ee       	ldi	r24, 0xEF	; 239
    4844:	f8 22       	and	r15, r24
    4846:	02 c0       	rjmp	.+4      	; 0x484c <vfprintf+0x2d0>
    4848:	1d 2d       	mov	r17, r13
    484a:	01 c0       	rjmp	.+2      	; 0x484e <vfprintf+0x2d2>
    484c:	19 2d       	mov	r17, r9
    484e:	f4 fe       	sbrs	r15, 4
    4850:	0d c0       	rjmp	.+26     	; 0x486c <vfprintf+0x2f0>
    4852:	fe 01       	movw	r30, r28
    4854:	ed 0d       	add	r30, r13
    4856:	f1 1d       	adc	r31, r1
    4858:	80 81       	ld	r24, Z
    485a:	80 33       	cpi	r24, 0x30	; 48
    485c:	19 f4       	brne	.+6      	; 0x4864 <vfprintf+0x2e8>
    485e:	99 ee       	ldi	r25, 0xE9	; 233
    4860:	f9 22       	and	r15, r25
    4862:	08 c0       	rjmp	.+16     	; 0x4874 <vfprintf+0x2f8>
    4864:	1f 5f       	subi	r17, 0xFF	; 255
    4866:	f2 fe       	sbrs	r15, 2
    4868:	05 c0       	rjmp	.+10     	; 0x4874 <vfprintf+0x2f8>
    486a:	03 c0       	rjmp	.+6      	; 0x4872 <vfprintf+0x2f6>
    486c:	8f 2d       	mov	r24, r15
    486e:	86 78       	andi	r24, 0x86	; 134
    4870:	09 f0       	breq	.+2      	; 0x4874 <vfprintf+0x2f8>
    4872:	1f 5f       	subi	r17, 0xFF	; 255
    4874:	0f 2d       	mov	r16, r15
    4876:	f3 fc       	sbrc	r15, 3
    4878:	14 c0       	rjmp	.+40     	; 0x48a2 <vfprintf+0x326>
    487a:	f0 fe       	sbrs	r15, 0
    487c:	0f c0       	rjmp	.+30     	; 0x489c <vfprintf+0x320>
    487e:	1e 15       	cp	r17, r14
    4880:	10 f0       	brcs	.+4      	; 0x4886 <vfprintf+0x30a>
    4882:	9d 2c       	mov	r9, r13
    4884:	0b c0       	rjmp	.+22     	; 0x489c <vfprintf+0x320>
    4886:	9d 2c       	mov	r9, r13
    4888:	9e 0c       	add	r9, r14
    488a:	91 1a       	sub	r9, r17
    488c:	1e 2d       	mov	r17, r14
    488e:	06 c0       	rjmp	.+12     	; 0x489c <vfprintf+0x320>
    4890:	80 e2       	ldi	r24, 0x20	; 32
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	b3 01       	movw	r22, r6
    4896:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    489a:	1f 5f       	subi	r17, 0xFF	; 255
    489c:	1e 15       	cp	r17, r14
    489e:	c0 f3       	brcs	.-16     	; 0x4890 <vfprintf+0x314>
    48a0:	04 c0       	rjmp	.+8      	; 0x48aa <vfprintf+0x32e>
    48a2:	1e 15       	cp	r17, r14
    48a4:	10 f4       	brcc	.+4      	; 0x48aa <vfprintf+0x32e>
    48a6:	e1 1a       	sub	r14, r17
    48a8:	01 c0       	rjmp	.+2      	; 0x48ac <vfprintf+0x330>
    48aa:	ee 24       	eor	r14, r14
    48ac:	04 ff       	sbrs	r16, 4
    48ae:	0f c0       	rjmp	.+30     	; 0x48ce <vfprintf+0x352>
    48b0:	80 e3       	ldi	r24, 0x30	; 48
    48b2:	90 e0       	ldi	r25, 0x00	; 0
    48b4:	b3 01       	movw	r22, r6
    48b6:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    48ba:	02 ff       	sbrs	r16, 2
    48bc:	1d c0       	rjmp	.+58     	; 0x48f8 <vfprintf+0x37c>
    48be:	01 fd       	sbrc	r16, 1
    48c0:	03 c0       	rjmp	.+6      	; 0x48c8 <vfprintf+0x34c>
    48c2:	88 e7       	ldi	r24, 0x78	; 120
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	0e c0       	rjmp	.+28     	; 0x48e4 <vfprintf+0x368>
    48c8:	88 e5       	ldi	r24, 0x58	; 88
    48ca:	90 e0       	ldi	r25, 0x00	; 0
    48cc:	0b c0       	rjmp	.+22     	; 0x48e4 <vfprintf+0x368>
    48ce:	80 2f       	mov	r24, r16
    48d0:	86 78       	andi	r24, 0x86	; 134
    48d2:	91 f0       	breq	.+36     	; 0x48f8 <vfprintf+0x37c>
    48d4:	01 ff       	sbrs	r16, 1
    48d6:	02 c0       	rjmp	.+4      	; 0x48dc <vfprintf+0x360>
    48d8:	8b e2       	ldi	r24, 0x2B	; 43
    48da:	01 c0       	rjmp	.+2      	; 0x48de <vfprintf+0x362>
    48dc:	80 e2       	ldi	r24, 0x20	; 32
    48de:	f7 fc       	sbrc	r15, 7
    48e0:	8d e2       	ldi	r24, 0x2D	; 45
    48e2:	90 e0       	ldi	r25, 0x00	; 0
    48e4:	b3 01       	movw	r22, r6
    48e6:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    48ea:	06 c0       	rjmp	.+12     	; 0x48f8 <vfprintf+0x37c>
    48ec:	80 e3       	ldi	r24, 0x30	; 48
    48ee:	90 e0       	ldi	r25, 0x00	; 0
    48f0:	b3 01       	movw	r22, r6
    48f2:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    48f6:	9a 94       	dec	r9
    48f8:	d9 14       	cp	r13, r9
    48fa:	c0 f3       	brcs	.-16     	; 0x48ec <vfprintf+0x370>
    48fc:	da 94       	dec	r13
    48fe:	f1 01       	movw	r30, r2
    4900:	ed 0d       	add	r30, r13
    4902:	f1 1d       	adc	r31, r1
    4904:	80 81       	ld	r24, Z
    4906:	90 e0       	ldi	r25, 0x00	; 0
    4908:	b3 01       	movw	r22, r6
    490a:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    490e:	dd 20       	and	r13, r13
    4910:	a9 f7       	brne	.-22     	; 0x48fc <vfprintf+0x380>
    4912:	06 c0       	rjmp	.+12     	; 0x4920 <vfprintf+0x3a4>
    4914:	80 e2       	ldi	r24, 0x20	; 32
    4916:	90 e0       	ldi	r25, 0x00	; 0
    4918:	b3 01       	movw	r22, r6
    491a:	0e 94 b1 24 	call	0x4962	; 0x4962 <fputc>
    491e:	ea 94       	dec	r14
    4920:	ee 20       	and	r14, r14
    4922:	c1 f7       	brne	.-16     	; 0x4914 <vfprintf+0x398>
    4924:	43 ce       	rjmp	.-890    	; 0x45ac <vfprintf+0x30>
    4926:	f3 01       	movw	r30, r6
    4928:	66 81       	ldd	r22, Z+6	; 0x06
    492a:	77 81       	ldd	r23, Z+7	; 0x07
    492c:	cb 01       	movw	r24, r22
    492e:	2b 96       	adiw	r28, 0x0b	; 11
    4930:	e2 e1       	ldi	r30, 0x12	; 18
    4932:	0c 94 76 22 	jmp	0x44ec	; 0x44ec <__epilogue_restores__>

00004936 <strnlen_P>:
    4936:	fc 01       	movw	r30, r24
    4938:	05 90       	lpm	r0, Z+
    493a:	61 50       	subi	r22, 0x01	; 1
    493c:	70 40       	sbci	r23, 0x00	; 0
    493e:	01 10       	cpse	r0, r1
    4940:	d8 f7       	brcc	.-10     	; 0x4938 <strnlen_P+0x2>
    4942:	80 95       	com	r24
    4944:	90 95       	com	r25
    4946:	8e 0f       	add	r24, r30
    4948:	9f 1f       	adc	r25, r31
    494a:	08 95       	ret

0000494c <strnlen>:
    494c:	fc 01       	movw	r30, r24
    494e:	61 50       	subi	r22, 0x01	; 1
    4950:	70 40       	sbci	r23, 0x00	; 0
    4952:	01 90       	ld	r0, Z+
    4954:	01 10       	cpse	r0, r1
    4956:	d8 f7       	brcc	.-10     	; 0x494e <strnlen+0x2>
    4958:	80 95       	com	r24
    495a:	90 95       	com	r25
    495c:	8e 0f       	add	r24, r30
    495e:	9f 1f       	adc	r25, r31
    4960:	08 95       	ret

00004962 <fputc>:
    4962:	0f 93       	push	r16
    4964:	1f 93       	push	r17
    4966:	cf 93       	push	r28
    4968:	df 93       	push	r29
    496a:	8c 01       	movw	r16, r24
    496c:	eb 01       	movw	r28, r22
    496e:	8b 81       	ldd	r24, Y+3	; 0x03
    4970:	81 ff       	sbrs	r24, 1
    4972:	1b c0       	rjmp	.+54     	; 0x49aa <fputc+0x48>
    4974:	82 ff       	sbrs	r24, 2
    4976:	0d c0       	rjmp	.+26     	; 0x4992 <fputc+0x30>
    4978:	2e 81       	ldd	r18, Y+6	; 0x06
    497a:	3f 81       	ldd	r19, Y+7	; 0x07
    497c:	8c 81       	ldd	r24, Y+4	; 0x04
    497e:	9d 81       	ldd	r25, Y+5	; 0x05
    4980:	28 17       	cp	r18, r24
    4982:	39 07       	cpc	r19, r25
    4984:	64 f4       	brge	.+24     	; 0x499e <fputc+0x3c>
    4986:	e8 81       	ld	r30, Y
    4988:	f9 81       	ldd	r31, Y+1	; 0x01
    498a:	01 93       	st	Z+, r16
    498c:	f9 83       	std	Y+1, r31	; 0x01
    498e:	e8 83       	st	Y, r30
    4990:	06 c0       	rjmp	.+12     	; 0x499e <fputc+0x3c>
    4992:	e8 85       	ldd	r30, Y+8	; 0x08
    4994:	f9 85       	ldd	r31, Y+9	; 0x09
    4996:	80 2f       	mov	r24, r16
    4998:	09 95       	icall
    499a:	89 2b       	or	r24, r25
    499c:	31 f4       	brne	.+12     	; 0x49aa <fputc+0x48>
    499e:	8e 81       	ldd	r24, Y+6	; 0x06
    49a0:	9f 81       	ldd	r25, Y+7	; 0x07
    49a2:	01 96       	adiw	r24, 0x01	; 1
    49a4:	9f 83       	std	Y+7, r25	; 0x07
    49a6:	8e 83       	std	Y+6, r24	; 0x06
    49a8:	02 c0       	rjmp	.+4      	; 0x49ae <fputc+0x4c>
    49aa:	0f ef       	ldi	r16, 0xFF	; 255
    49ac:	1f ef       	ldi	r17, 0xFF	; 255
    49ae:	c8 01       	movw	r24, r16
    49b0:	df 91       	pop	r29
    49b2:	cf 91       	pop	r28
    49b4:	1f 91       	pop	r17
    49b6:	0f 91       	pop	r16
    49b8:	08 95       	ret

000049ba <__ultoa_invert>:
    49ba:	fa 01       	movw	r30, r20
    49bc:	aa 27       	eor	r26, r26
    49be:	28 30       	cpi	r18, 0x08	; 8
    49c0:	51 f1       	breq	.+84     	; 0x4a16 <__ultoa_invert+0x5c>
    49c2:	20 31       	cpi	r18, 0x10	; 16
    49c4:	81 f1       	breq	.+96     	; 0x4a26 <__ultoa_invert+0x6c>
    49c6:	e8 94       	clt
    49c8:	6f 93       	push	r22
    49ca:	6e 7f       	andi	r22, 0xFE	; 254
    49cc:	6e 5f       	subi	r22, 0xFE	; 254
    49ce:	7f 4f       	sbci	r23, 0xFF	; 255
    49d0:	8f 4f       	sbci	r24, 0xFF	; 255
    49d2:	9f 4f       	sbci	r25, 0xFF	; 255
    49d4:	af 4f       	sbci	r26, 0xFF	; 255
    49d6:	b1 e0       	ldi	r27, 0x01	; 1
    49d8:	3e d0       	rcall	.+124    	; 0x4a56 <__ultoa_invert+0x9c>
    49da:	b4 e0       	ldi	r27, 0x04	; 4
    49dc:	3c d0       	rcall	.+120    	; 0x4a56 <__ultoa_invert+0x9c>
    49de:	67 0f       	add	r22, r23
    49e0:	78 1f       	adc	r23, r24
    49e2:	89 1f       	adc	r24, r25
    49e4:	9a 1f       	adc	r25, r26
    49e6:	a1 1d       	adc	r26, r1
    49e8:	68 0f       	add	r22, r24
    49ea:	79 1f       	adc	r23, r25
    49ec:	8a 1f       	adc	r24, r26
    49ee:	91 1d       	adc	r25, r1
    49f0:	a1 1d       	adc	r26, r1
    49f2:	6a 0f       	add	r22, r26
    49f4:	71 1d       	adc	r23, r1
    49f6:	81 1d       	adc	r24, r1
    49f8:	91 1d       	adc	r25, r1
    49fa:	a1 1d       	adc	r26, r1
    49fc:	20 d0       	rcall	.+64     	; 0x4a3e <__ultoa_invert+0x84>
    49fe:	09 f4       	brne	.+2      	; 0x4a02 <__ultoa_invert+0x48>
    4a00:	68 94       	set
    4a02:	3f 91       	pop	r19
    4a04:	2a e0       	ldi	r18, 0x0A	; 10
    4a06:	26 9f       	mul	r18, r22
    4a08:	11 24       	eor	r1, r1
    4a0a:	30 19       	sub	r19, r0
    4a0c:	30 5d       	subi	r19, 0xD0	; 208
    4a0e:	31 93       	st	Z+, r19
    4a10:	de f6       	brtc	.-74     	; 0x49c8 <__ultoa_invert+0xe>
    4a12:	cf 01       	movw	r24, r30
    4a14:	08 95       	ret
    4a16:	46 2f       	mov	r20, r22
    4a18:	47 70       	andi	r20, 0x07	; 7
    4a1a:	40 5d       	subi	r20, 0xD0	; 208
    4a1c:	41 93       	st	Z+, r20
    4a1e:	b3 e0       	ldi	r27, 0x03	; 3
    4a20:	0f d0       	rcall	.+30     	; 0x4a40 <__ultoa_invert+0x86>
    4a22:	c9 f7       	brne	.-14     	; 0x4a16 <__ultoa_invert+0x5c>
    4a24:	f6 cf       	rjmp	.-20     	; 0x4a12 <__ultoa_invert+0x58>
    4a26:	46 2f       	mov	r20, r22
    4a28:	4f 70       	andi	r20, 0x0F	; 15
    4a2a:	40 5d       	subi	r20, 0xD0	; 208
    4a2c:	4a 33       	cpi	r20, 0x3A	; 58
    4a2e:	18 f0       	brcs	.+6      	; 0x4a36 <__ultoa_invert+0x7c>
    4a30:	49 5d       	subi	r20, 0xD9	; 217
    4a32:	31 fd       	sbrc	r19, 1
    4a34:	40 52       	subi	r20, 0x20	; 32
    4a36:	41 93       	st	Z+, r20
    4a38:	02 d0       	rcall	.+4      	; 0x4a3e <__ultoa_invert+0x84>
    4a3a:	a9 f7       	brne	.-22     	; 0x4a26 <__ultoa_invert+0x6c>
    4a3c:	ea cf       	rjmp	.-44     	; 0x4a12 <__ultoa_invert+0x58>
    4a3e:	b4 e0       	ldi	r27, 0x04	; 4
    4a40:	a6 95       	lsr	r26
    4a42:	97 95       	ror	r25
    4a44:	87 95       	ror	r24
    4a46:	77 95       	ror	r23
    4a48:	67 95       	ror	r22
    4a4a:	ba 95       	dec	r27
    4a4c:	c9 f7       	brne	.-14     	; 0x4a40 <__ultoa_invert+0x86>
    4a4e:	00 97       	sbiw	r24, 0x00	; 0
    4a50:	61 05       	cpc	r22, r1
    4a52:	71 05       	cpc	r23, r1
    4a54:	08 95       	ret
    4a56:	9b 01       	movw	r18, r22
    4a58:	ac 01       	movw	r20, r24
    4a5a:	0a 2e       	mov	r0, r26
    4a5c:	06 94       	lsr	r0
    4a5e:	57 95       	ror	r21
    4a60:	47 95       	ror	r20
    4a62:	37 95       	ror	r19
    4a64:	27 95       	ror	r18
    4a66:	ba 95       	dec	r27
    4a68:	c9 f7       	brne	.-14     	; 0x4a5c <__ultoa_invert+0xa2>
    4a6a:	62 0f       	add	r22, r18
    4a6c:	73 1f       	adc	r23, r19
    4a6e:	84 1f       	adc	r24, r20
    4a70:	95 1f       	adc	r25, r21
    4a72:	a0 1d       	adc	r26, r0
    4a74:	08 95       	ret

00004a76 <_exit>:
    4a76:	f8 94       	cli

00004a78 <__stop_program>:
    4a78:	ff cf       	rjmp	.-2      	; 0x4a78 <__stop_program>
