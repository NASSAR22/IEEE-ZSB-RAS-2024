
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006cc  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cc  00000000  00000000  00000eef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000362  00000000  00000000  00001220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004c  00000000  00000000  00001582  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000015ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
#include <avr/io.h>
#include <util/delay.h>

void ADC_init() {
	
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);
  6c:	86 b1       	in	r24, 0x06	; 6
  6e:	86 60       	ori	r24, 0x06	; 6
  70:	86 b9       	out	0x06, r24	; 6
	ADMUX |= (1 << REFS0);
  72:	87 b1       	in	r24, 0x07	; 7
  74:	80 64       	ori	r24, 0x40	; 64
  76:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADEN);
  78:	86 b1       	in	r24, 0x06	; 6
  7a:	80 68       	ori	r24, 0x80	; 128
  7c:	86 b9       	out	0x06, r24	; 6
  7e:	08 95       	ret

00000080 <ADC_read>:
}

uint16_t ADC_read(uint8_t channel) {
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F); 
  80:	97 b1       	in	r25, 0x07	; 7
  82:	90 7f       	andi	r25, 0xF0	; 240
  84:	8f 70       	andi	r24, 0x0F	; 15
  86:	89 2b       	or	r24, r25
  88:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC); 
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	80 64       	ori	r24, 0x40	; 64
  8e:	86 b9       	out	0x06, r24	; 6
	while (ADCSRA & (1 << ADSC)); 
  90:	36 99       	sbic	0x06, 6	; 6
  92:	fe cf       	rjmp	.-4      	; 0x90 <ADC_read+0x10>
	return ADC; 
  94:	84 b1       	in	r24, 0x04	; 4
  96:	95 b1       	in	r25, 0x05	; 5
}
  98:	08 95       	ret

0000009a <LED_init>:

void LED_init() {
	// Set LED pins as output
	DDRD = 0xFF; 
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	81 bb       	out	0x11, r24	; 17
  9e:	08 95       	ret

000000a0 <LED_control>:
}

void LED_control(uint8_t num_leds) {
	
	PORTD = (1 << num_leds) - 1; 
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <LED_control+0xa>
  a6:	22 0f       	add	r18, r18
  a8:	33 1f       	adc	r19, r19
  aa:	8a 95       	dec	r24
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <LED_control+0x6>
  ae:	21 50       	subi	r18, 0x01	; 1
  b0:	22 bb       	out	0x12, r18	; 18
  b2:	08 95       	ret

000000b4 <main>:

int main(void) {
	uint16_t pot_value;
	uint8_t num_leds;

	ADC_init();
  b4:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	LED_init();
  b8:	0e 94 4d 00 	call	0x9a	; 0x9a <LED_init>

	while (1) {
		pot_value = ADC_read(0); 
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	0e 94 40 00 	call	0x80	; 0x80 <ADC_read>
		num_leds = (pot_value * 8) / 1023;
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6f ef       	ldi	r22, 0xFF	; 255
  d0:	73 e0       	ldi	r23, 0x03	; 3
  d2:	0e 94 78 00 	call	0xf0	; 0xf0 <__udivmodhi4>
  d6:	86 2f       	mov	r24, r22

		LED_control(num_leds);
  d8:	0e 94 50 00 	call	0xa0	; 0xa0 <LED_control>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	80 e7       	ldi	r24, 0x70	; 112
  e0:	92 e0       	ldi	r25, 0x02	; 2
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x2e>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x38>
  ec:	00 00       	nop
  ee:	e6 cf       	rjmp	.-52     	; 0xbc <main+0x8>

000000f0 <__udivmodhi4>:
  f0:	aa 1b       	sub	r26, r26
  f2:	bb 1b       	sub	r27, r27
  f4:	51 e1       	ldi	r21, 0x11	; 17
  f6:	07 c0       	rjmp	.+14     	; 0x106 <__udivmodhi4_ep>

000000f8 <__udivmodhi4_loop>:
  f8:	aa 1f       	adc	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	a6 17       	cp	r26, r22
  fe:	b7 07       	cpc	r27, r23
 100:	10 f0       	brcs	.+4      	; 0x106 <__udivmodhi4_ep>
 102:	a6 1b       	sub	r26, r22
 104:	b7 0b       	sbc	r27, r23

00000106 <__udivmodhi4_ep>:
 106:	88 1f       	adc	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	5a 95       	dec	r21
 10c:	a9 f7       	brne	.-22     	; 0xf8 <__udivmodhi4_loop>
 10e:	80 95       	com	r24
 110:	90 95       	com	r25
 112:	bc 01       	movw	r22, r24
 114:	cd 01       	movw	r24, r26
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
