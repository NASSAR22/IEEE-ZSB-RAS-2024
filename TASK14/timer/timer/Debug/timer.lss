
timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001bc  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006a  0080006a  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fc  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000622  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002db  00000000  00000000  00001026  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000090  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036e  00000000  00000000  00001394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  00001702  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec eb       	ldi	r30, 0xBC	; 188
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b8 00 	call	0x170	; 0x170 <main>
  8a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <timer0_init>:
volatile uint8_t ones = 0;    // Ones digit of seconds count

// Function to initialize TIMER0
void timer0_init() {
	// Set Timer/Counter Control Register TCCR0
	TCCR0 = (1 << CS02) | (1 << CS00); // Prescaler of 1024
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	83 bf       	out	0x33, r24	; 51
	
	// Enable overflow interrupt for TIMER0
	TIMSK |= (1 << TOIE0);
  96:	89 b7       	in	r24, 0x39	; 57
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	89 bf       	out	0x39, r24	; 57
	
	// Initialize counter
	TCNT0 = 0;
  9c:	12 be       	out	0x32, r1	; 50
	
	// Enable global interrupts
	sei();
  9e:	78 94       	sei
  a0:	08 95       	ret

000000a2 <__vector_11>:
}

// Interrupt service routine for TIMER0 overflow
ISR(TIMER0_OVF_vect) {
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	2f 93       	push	r18
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25
	// Check if seconds reached 99, stop further increment
	if (seconds < 99) {
  b2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <seconds>
  b6:	83 36       	cpi	r24, 0x63	; 99
  b8:	28 f4       	brcc	.+10     	; 0xc4 <__vector_11+0x22>
		seconds++;
  ba:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <seconds>
  be:	8f 5f       	subi	r24, 0xFF	; 255
  c0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <seconds>
	}
	
	// Update tens and ones digits
	tens = seconds / 10;
  c4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <seconds>
  c8:	8d ec       	ldi	r24, 0xCD	; 205
  ca:	98 9f       	mul	r25, r24
  cc:	91 2d       	mov	r25, r1
  ce:	11 24       	eor	r1, r1
  d0:	96 95       	lsr	r25
  d2:	96 95       	lsr	r25
  d4:	96 95       	lsr	r25
  d6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <tens>
	ones = seconds % 10;
  da:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <seconds>
  de:	28 9f       	mul	r18, r24
  e0:	81 2d       	mov	r24, r1
  e2:	11 24       	eor	r1, r1
  e4:	86 95       	lsr	r24
  e6:	86 95       	lsr	r24
  e8:	86 95       	lsr	r24
  ea:	88 0f       	add	r24, r24
  ec:	98 2f       	mov	r25, r24
  ee:	99 0f       	add	r25, r25
  f0:	99 0f       	add	r25, r25
  f2:	89 0f       	add	r24, r25
  f4:	28 1b       	sub	r18, r24
  f6:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <__data_end>
}
  fa:	9f 91       	pop	r25
  fc:	8f 91       	pop	r24
  fe:	2f 91       	pop	r18
 100:	0f 90       	pop	r0
 102:	0f be       	out	0x3f, r0	; 63
 104:	0f 90       	pop	r0
 106:	1f 90       	pop	r1
 108:	18 95       	reti

0000010a <seg7_init>:

// Function to initialize 7-segment display
void seg7_init() {
	// Initialize Port D for 7-segment display
	DDRD = 0xFF; // All pins as output
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	81 bb       	out	0x11, r24	; 17
 10e:	08 95       	ret

00000110 <seg7_display>:
}

// Function to display seconds on 7-segment display
void seg7_display(uint8_t tens, uint8_t ones) {
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
 118:	2a 97       	sbiw	r28, 0x0a	; 10
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
	// 7-segment display patterns for digits 0-9
	uint8_t segments[] = {
 124:	9a e0       	ldi	r25, 0x0A	; 10
 126:	e0 e6       	ldi	r30, 0x60	; 96
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	de 01       	movw	r26, r28
 12c:	11 96       	adiw	r26, 0x01	; 1
 12e:	01 90       	ld	r0, Z+
 130:	0d 92       	st	X+, r0
 132:	9a 95       	dec	r25
 134:	e1 f7       	brne	.-8      	; 0x12e <seg7_display+0x1e>
		0b10000000, // 8
		0b10010000  // 9
	};
	
	// Display tens digit on left segment (PD7-PD4) and units digit on right segment (PD3-PD0)
	PORTD = (segments[ones] << 4) | segments[tens];
 136:	e1 e0       	ldi	r30, 0x01	; 1
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	ec 0f       	add	r30, r28
 13c:	fd 1f       	adc	r31, r29
 13e:	e6 0f       	add	r30, r22
 140:	f1 1d       	adc	r31, r1
 142:	20 81       	ld	r18, Z
 144:	90 e1       	ldi	r25, 0x10	; 16
 146:	29 9f       	mul	r18, r25
 148:	90 01       	movw	r18, r0
 14a:	11 24       	eor	r1, r1
 14c:	e1 e0       	ldi	r30, 0x01	; 1
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ec 0f       	add	r30, r28
 152:	fd 1f       	adc	r31, r29
 154:	e8 0f       	add	r30, r24
 156:	f1 1d       	adc	r31, r1
 158:	80 81       	ld	r24, Z
 15a:	28 2b       	or	r18, r24
 15c:	22 bb       	out	0x12, r18	; 18
}
 15e:	2a 96       	adiw	r28, 0x0a	; 10
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <main>:

int main() {
	// Initialize Port C, Pin 0 for LED
	DDRC |= (1 << PC0);
 170:	84 b3       	in	r24, 0x14	; 20
 172:	81 60       	ori	r24, 0x01	; 1
 174:	84 bb       	out	0x14, r24	; 20
	
	// Initialize 7-segment display
	seg7_init();
 176:	0e 94 85 00 	call	0x10a	; 0x10a <seg7_init>
	
	// Initialize Timer0
	timer0_init();
 17a:	0e 94 49 00 	call	0x92	; 0x92 <timer0_init>
	
	while (1) {
		// Toggle LED every second
		PORTC ^= (1 << PC0);
 17e:	95 b3       	in	r25, 0x15	; 21
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	89 27       	eor	r24, r25
 184:	85 bb       	out	0x15, r24	; 21
		
		// Display seconds on 7-segment display
		seg7_display(tens, ones); // Display TX (where T is tens digit and X is ones digit)
 186:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <__data_end>
 18a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <tens>
 18e:	0e 94 88 00 	call	0x110	; 0x110 <seg7_display>
		
		// Check if seconds reached 99, stop the loop
		if (seconds >= 99) {
 192:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <seconds>
 196:	83 36       	cpi	r24, 0x63	; 99
 198:	50 f4       	brcc	.+20     	; 0x1ae <main+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19a:	2f e3       	ldi	r18, 0x3F	; 63
 19c:	8d e0       	ldi	r24, 0x0D	; 13
 19e:	93 e0       	ldi	r25, 0x03	; 3
 1a0:	21 50       	subi	r18, 0x01	; 1
 1a2:	80 40       	sbci	r24, 0x00	; 0
 1a4:	90 40       	sbci	r25, 0x00	; 0
 1a6:	e1 f7       	brne	.-8      	; 0x1a0 <main+0x30>
 1a8:	00 c0       	rjmp	.+0      	; 0x1aa <main+0x3a>
 1aa:	00 00       	nop
 1ac:	e8 cf       	rjmp	.-48     	; 0x17e <main+0xe>
		// Delay to approximate 1 second
		_delay_ms(1000);
	}
	
	// Freeze at 99 on 7-segment display
	seg7_display(9, 9); // Display 99
 1ae:	69 e0       	ldi	r22, 0x09	; 9
 1b0:	89 e0       	ldi	r24, 0x09	; 9
 1b2:	0e 94 88 00 	call	0x110	; 0x110 <seg7_display>
 1b6:	ff cf       	rjmp	.-2      	; 0x1b6 <main+0x46>

000001b8 <_exit>:
 1b8:	f8 94       	cli

000001ba <__stop_program>:
 1ba:	ff cf       	rjmp	.-2      	; 0x1ba <__stop_program>
